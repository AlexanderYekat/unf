#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Обновляет график регулярных платежей по документу
//
// Параметры:
//   ДанныеГрафика - Структура - Содеждит исходный документ и данные периодичности.
//   ИсходныйДокументДоИзменения - ДокументСсылка.ПлатежноеПоручение, ДокументСсылка.РасходДСПлан - Исходный документ
//
Процедура ОбновитьГрафикПоДокументу(ДанныеГрафика, ИсходныйДокументДоИзменения = Неопределено) Экспорт
	
	НаборЗаписейРегулярныеПлатежиГрафик = РегистрыСведений.РегулярныеПлатежиГрафик.СоздатьНаборЗаписей();
	НаборЗаписейРегулярныеПлатежиГрафик.Отбор.ИсходныйДокумент.Установить(ДанныеГрафика.ИсходныйДокумент);
	
	ГрафикРегулярныхПлатежей = ГрафикРегулярныхПлатежейПоДокументу(ДанныеГрафика);
	
	НаборЗаписейРегулярныеПлатежиГрафик.Загрузить(ГрафикРегулярныхПлатежей);		
	НаборЗаписейРегулярныеПлатежиГрафик.Записать();
	
	Если ЗначениеЗаполнено(ИсходныйДокументДоИзменения)
		И ИсходныйДокументДоИзменения <> ДанныеГрафика.ИсходныйДокумент Тогда
		ОчиститьГрафикПоДокументу(ИсходныйДокументДоИзменения);
	КонецЕсли;
	
КонецПроцедуры

// Очищает график регулярных платежей по документу
//
// Параметры:
//   ИсходныйДокумент - ДокументСсылка.ПлатежноеПоручение, ДокументСсылка.РасходДСПлан - Исходный документ.
//
Процедура ОчиститьГрафикПоДокументу(ИсходныйДокумент) Экспорт
	
	НаборЗаписейРегулярныеПлатежиГрафик = РегистрыСведений.РегулярныеПлатежиГрафик.СоздатьНаборЗаписей();
	НаборЗаписейРегулярныеПлатежиГрафик.Отбор.ИсходныйДокумент.Установить(ИсходныйДокумент);
	НаборЗаписейРегулярныеПлатежиГрафик.Записать();
	
КонецПроцедуры

// Удаляет запись из графика регулярных платежей
//
// Параметры:
//   ИсходныйДокумент - ДокументСсылка.ПлатежноеПоручение, ДокументСсылка.РасходДСПлан - Исходный документ.
//   Дата - Дата - Дата планового платежа.
//
Процедура УдалитьЗаписьИзГрафика(ИсходныйДокумент, Дата) Экспорт

	Запись = РегистрыСведений.РегулярныеПлатежиГрафик.СоздатьМенеджерЗаписи();
    Запись.Период = Дата;
    Запись.ИсходныйДокумент = ИсходныйДокумент;
    Запись.Удалить();
	
КонецПроцедуры

// Возвращает дату ближайшего платежа по документу
//
// Параметры:
//   ИсходныйДокумент - ДокументСсылка.ПлатежноеПоручение, ДокументСсылка.РасходДСПлан - Исходный документ.
//
// Возвращаемое значение:
//	 Дата - дата ближайшего платежа
// 
Функция ДатаБлижайшегоПлатежа(ИсходныйДокумент) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегулярныеПлатежиГрафик.Период КАК Период
	|ИЗ
	|	РегистрСведений.РегулярныеПлатежиГрафик КАК РегулярныеПлатежиГрафик
	|ГДЕ
	|	РегулярныеПлатежиГрафик.ИсходныйДокумент = &ИсходныйДокумент
	|	И РегулярныеПлатежиГрафик.Период > &ТекущаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("ИсходныйДокумент", ИсходныйДокумент);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
			
		Возврат РезультатЗапроса.Выгрузить()[0].Период;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ГрафикРегулярныхПлатежейПоДокументу(ДанныеГрафика)
	
	// АПК:494-выкл проектное решение, не влияет на быстродествие
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотни.Значение * 100 + Десятки.Значение * 10 + Единицы.Значение КАК Значение
	|ПОМЕСТИТЬ ШаблонГрафика
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК Значение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		1
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		2) КАК Сотни
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			0 КАК Значение
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			1
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			2
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			3
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			4
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			5
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			6
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			7
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			8
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			9) КАК Десятки
	|		ПО (ИСТИНА)
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			0 КАК Значение
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			1
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			2
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			3
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			4
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			5
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			6
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			7
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			8
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			9) КАК Единицы
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&НачалоВыполнения, ДЕНЬ, ШаблонГрафика.Значение)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&НачалоВыполнения, НЕДЕЛЯ, ШаблонГрафика.Значение)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&НачалоВыполнения, МЕСЯЦ, ШаблонГрафика.Значение)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&НачалоВыполнения, КВАРТАЛ, ШаблонГрафика.Значение)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&НачалоВыполнения, ГОД, ШаблонГрафика.Значение)
	|	КОНЕЦ КАК ДатаСледующегоПлатежа
	|ПОМЕСТИТЬ ПромежуточныйРезультат
	|ИЗ
	|	ШаблонГрафика КАК ШаблонГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПромежуточныйРезультат.ДатаСледующегоПлатежа КАК Период,
	|	&ИсходныйДокумент КАК ИсходныйДокумент
	|ИЗ
	|	ПромежуточныйРезультат КАК ПромежуточныйРезультат
	|ГДЕ
	|	ПромежуточныйРезультат.ДатаСледующегоПлатежа <= &ОкончаниеВыполнения
	|	И ПромежуточныйРезультат.ДатаСледующегоПлатежа >= &АктуальнаяДатаСеанса
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПромежуточныйРезультат.ДатаСледующегоПлатежа";
	
	// АПК:494-вкл
	
	Запрос.УстановитьПараметр("ИсходныйДокумент", ДанныеГрафика.ИсходныйДокумент);
	Запрос.УстановитьПараметр("НачалоВыполнения", ДанныеГрафика.НачалоВыполнения);
	Запрос.УстановитьПараметр("ОкончаниеВыполнения", ДанныеГрафика.ОкончаниеВыполнения);
	Запрос.УстановитьПараметр("Периодичность", ДанныеГрафика.Периодичность);
	Запрос.УстановитьПараметр("АктуальнаяДатаСеанса", ТекущаяДатаСеанса());

	ГрафикРегулярныхПлатежей = Запрос.Выполнить().Выгрузить();
	
	Возврат ГрафикРегулярныхПлатежей;
			
КонецФункции

#КонецОбласти 

#КонецЕсли