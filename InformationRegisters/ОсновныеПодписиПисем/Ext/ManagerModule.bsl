#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Удаляются записи с переданной подписью
//
// Параметры:
//  Подпись - СправочникСсылка.ПодписиПисем
//  Пользователь - Неопределено, СправочникСсылка.Пользователи - если Неопределено, отбор не устанавливается
//
Процедура УдалитьЗаписиСПодписью(Подпись, Пользователь = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеПодписиПисем.Пользователь КАК Пользователь,
	|	ОсновныеПодписиПисем.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ОсновныеПодписиПисем.ПредназначениеПодписи КАК ПредназначениеПодписи
	|ИЗ
	|	РегистрСведений.ОсновныеПодписиПисем КАК ОсновныеПодписиПисем
	|ГДЕ
	|	ОсновныеПодписиПисем.Подпись = &Подпись
	|	И ОсновныеПодписиПисем.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Подпись", Подпись);
	
	Если Пользователь = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ОсновныеПодписиПисем.Пользователь = &Пользователь", "");
	Иначе
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОсновныеПодписиПисем");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Пользователь", "Пользователь");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("УчетнаяЗапись", "УчетнаяЗапись");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредназначениеПодписи", "ПредназначениеПодписи");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МенеджерЗаписи = РегистрыСведений.ОсновныеПодписиПисем.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Пользователь = Выборка.Пользователь;
			МенеджерЗаписи.УчетнаяЗапись = Выборка.УчетнаяЗапись;
			МенеджерЗаписи.ПредназначениеПодписи = Выборка.ПредназначениеПодписи;
			МенеджерЗаписи.Удалить();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ОсновныеПодписиПисем.ОчиститьЗаписиСПодписью'",
		ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		Неопределено,
		Неопределено,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

// Возвращает соответствие с основными подписями по каждой учетной записи,
// пустая учетная запись (пустая ссылка) находится первой в этом соответствии
//
// Параметры:
//  УчетныеЗаписи - Массив из СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - массив учетных записей
//  Пользователь - Неопределено, СправочникСсылка.Пользователи - пользователь ИБ
// 
// Возвращаемое значение:
//  Соответствие - использование подписей по учетным записям:
//   * Ключ - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты
//   * Значение - Неопределено, Соответствие - использование подписей по предназначению:
//     ** Ключ - ПеречислениеСсылка.ПредназначенияПодписейПисем
//     ** Значение - СправочникСсылка.ПодписиПисем
//
Функция ОсновныеПодписиПоУчетнымЗаписям(УчетныеЗаписи = Неопределено, Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ПустаяУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	
	Если УчетныеЗаписи = Неопределено Тогда
		
		УчетныеЗаписи = РегистрыСведений.УчетныеЗаписиПользователя.УчетныеЗаписи(
		, Истина, Пользователь); // Учетная запись используется для отправки
		
		УчетныеЗаписи.Добавить(ПустаяУчетнаяЗапись);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеПодписиПисем.Подпись КАК Подпись,
		|	ОсновныеПодписиПисем.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ОсновныеПодписиПисем.ПредназначениеПодписи КАК ПредназначениеПодписи
		|ИЗ
		|	РегистрСведений.ОсновныеПодписиПисем КАК ОсновныеПодписиПисем
		|ГДЕ
		|	ОсновныеПодписиПисем.Пользователь = &Пользователь
		|	И ОсновныеПодписиПисем.УчетнаяЗапись В(&УчетныеЗаписи)";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("УчетныеЗаписи", УчетныеЗаписи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Соответствие;
	
	Для Каждого УчетнаяЗапись Из УчетныеЗаписи Цикл
		Если Результат[УчетнаяЗапись] = Неопределено Тогда
			
			Результат[УчетнаяЗапись] = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Результат[Выборка.УчетнаяЗапись] = Неопределено Тогда
			Результат[Выборка.УчетнаяЗапись] = Новый Соответствие;
		КонецЕсли;
		
		Результат[Выборка.УчетнаяЗапись].Вставить(Выборка.ПредназначениеПодписи, Выборка.Подпись);
		
	КонецЦикла;
	
	ГлавноеЗначение = Результат[ПустаяУчетнаяЗапись];
	Результат.Удалить(ПустаяУчетнаяЗапись);
	Результат[ПустаяУчетнаяЗапись] = ГлавноеЗначение;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает подпись основной
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись
//  ПредназначениеПодписи - ПеречислениеСсылка.ПредназначенияПодписейПисем - предназначение
//  Подпись - СправочникСсылка.ПодписиПисем - подпись
//  Пользователь - Неопределено, СправочникСсылка.Пользователи - пользователь ИБ
//
Процедура УстановитьПодписьОсновной(УчетнаяЗапись, ПредназначениеПодписи, Подпись, Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ОсновныеПодписиПисем.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
	МенеджерЗаписи.ПредназначениеПодписи = ПредназначениеПодписи;
	МенеджерЗаписи.Подпись = Подпись;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Перезаписывает все основные подписи по полученным данным
//
// Параметры:
//  Данные - Массив из Структура - данные подписей:
//   * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись для установки подписи основной
//   * ПредназначениеПодписи - ПеречислениеСсылка.ПредназначенияПодписейПисем - предназначение подписи
//   * Подпись - СправочникСсылка.ПодписиПисем - подпись для установки
//  Пользователь - Неопределено, СправочникСсылка.Пользователи - пользователь ИБ
//
Процедура СохранитьОсновныеПодписи(Данные, Пользователь = Неопределено) Экспорт
	
	Если ТипЗнч(Данные) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОсновныеПодписиПисем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Очистить();
	
	Для Каждого ДанныеОсновнойПодписи Из Данные Цикл
		
		Запись = НаборЗаписей.Добавить();
		Запись.Пользователь = Пользователь;
		Запись.УчетнаяЗапись = ДанныеОсновнойПодписи.УчетнаяЗапись;
		Запись.ПредназначениеПодписи = ДанныеОсновнойПодписи.ПредназначениеПодписи;
		Запись.Подпись = ДанныеОсновнойПодписи.Подпись;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Проверяет, что переданная подпись является основной (что в регистре есть запись с ней)
//
// Параметры:
//  Подпись - СправочникСсылка.ПодписиПисем - подпись на проверку
//  Пользователь - Неопределено, СправочникСсылка.Пользователи - если Неопределено, отбор не осуществляется
// 
// Возвращаемое значение:
//  Булево - подпись является основной (в регистре есть запись с данной подписью)
//
Функция ЭтоОсновнаяПодпись(Подпись, Пользователь = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОсновныеПодписиПисем.Подпись КАК Подпись
		|ИЗ
		|	РегистрСведений.ОсновныеПодписиПисем КАК ОсновныеПодписиПисем
		|ГДЕ
		|	ОсновныеПодписиПисем.Подпись = &Подпись
		|	И ОсновныеПодписиПисем.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Подпись", Подпись);
	
	Если Пользователь = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ОсновныеПодписиПисем.Пользователь = &Пользователь", "");
	Иначе
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#КонецЕсли
