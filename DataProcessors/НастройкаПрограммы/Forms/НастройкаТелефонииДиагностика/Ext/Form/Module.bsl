
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьЗначенияНастроек();
	ИндексАктивнойСтроки = -1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОчиститьСписокГруппПроверок();
	ПодключитьОбработчикОжидания("НачатьДиагностику", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Телефония_ДиагностикаПодключения" И Параметр = ИдентификаторПроверки Тогда
		ОбновлениеПроверкиСистемыВзаимодействия = Истина;
		Если ОбновлениеВсехПроверок Тогда
			ОбновитьГруппуПроверкиСистемыВзаимодействия();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Телефония_ОбновлениеНастроек" Тогда
		Элементы.ГруппаОбновлениеНастроек.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВыполнитьДиагностику(Команда)
	
	ОчиститьСписокГруппПроверок();
	ПодключитьОбработчикОжидания("НачатьДиагностику", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьДиагностику()
	
	ОбновлениеВсехПроверок = Ложь;
	ОбновлениеПроверкиСистемыВзаимодействия = Ложь;
	
	
	ИдентификаторПроверки = Новый УникальныйИдентификатор;
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ЗавершениеОжидания = Новый ОписаниеОповещения("ЗавершитьДиагностикуНастроекТелефонии", ЭтотОбъект);
	
	ДлительнаяОперация = ВыполнитьДиагностикуНастроек();
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОжидания, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДиагностикуНастроекТелефонии(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		Сообщить(Результат.ПодробноеПредставлениеОшибки);
	Иначе
		Если НЕ ОбновлениеПроверкиСистемыВзаимодействия Тогда
			ВыполнитьОжидание(4000);
		КонецЕсли;
		РезультатыВсехПроверок = ПолучитьИЗВременногоХранилища(Результат.АдресРезультата);
		ОбновитьЭлементыФормы(РезультатыВсехПроверок);
		ОбновитьТаблицуГруппыПроверок();
		ОбновитьЭлементыДляСпискаПроверок();
		ВыделитьСтрокуПервойОшибкеВСпискеПроверок();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналРегистрации(Команда)
	
	События = Новый Массив;
	События.Добавить(НСтр("ru = 'Телефония.ЗагрузкаСпискаАбонентовВАТСБилайн'"));
	События.Добавить(НСтр("ru = 'Телефония.ЗапросНовойПодпискиНаСобытия'"));
	События.Добавить(НСтр("ru = 'Телефония.ЗапросПодпискиНаСобытия'"));
	События.Добавить(НСтр("ru = 'Телефония.ИнициализацияИсходящегоВызова'"));
	События.Добавить(НСтр("ru = 'Телефония.ИзменениеДоступаСлужебногоПользователя'"));
	События.Добавить(НСтр("ru = 'Телефония.ОбновлениеПодпискиНаСобытия'"));
	События.Добавить(НСтр("ru = 'Телефония.ОбновлениеСтатусаПодключения'"));
	События.Добавить(НСтр("ru = 'Телефония.ПроверкаНастроекПодключения'"));
	События.Добавить(НСтр("ru = 'Телефония.СозданиеСлужебногоПользователя'"));
	
	Отбор = Новый Структура("Пользователь, СобытиеЖурналаРегистрации, ДатаНачала, ДатаОкончания, Данные, Сеанс, Уровень");
	Отбор.Пользователь = "";
	Отбор.ДатаНачала = НачалоДня(ТекущаяДата()-86400);
	Отбор.ДатаОкончания = КонецДня(ТекущаяДата());
	Отбор.Вставить("СобытиеЖурналаРегистрации", События);
	
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(Отбор, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПодпискуНаСобытия(Команда)
	
	Элементы.ГруппаОбновлениеНастроек.Видимость = Ложь;
	ОчиститьСообщения();
	СоздатьНовуюПодпискуНаСобытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструкцию(Элемент)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Элемент.Подсказка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПроверокПриАктивизацииСтроки(Элемент)
	
	Если ИндексАктивнойСтроки = Элемент.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	ИндексАктивнойСтроки = Элемент.ТекущаяСтрока;
	ТекущиеДанные = Элементы.ГруппыПроверок.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПолучитьИнструкцию(ТекущиеДанные.ТипГруппыПроверок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОжидание(ДлительностьОжидания)
	ТекущаяДата = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() - ТекущаяДата < ДлительностьОжидания Цикл
		// Ожидание таймаута
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСлужебногоПользователя(Команда)
	
	СоздатьИзменитьСлужебногоПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	ДанныеФайла = СохранитьОтчетПоДиагностике();
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьСохранениеФайла", ЭтотОбъект);
	ПараметрыСохраненияФайла = ПараметрыСохраненияФайла("zip");
	ФайловаяСистемаКлиент.СохранитьФайл(ОписаниеОповещения, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
		ДанныеФайла.ИмяФайла, ПараметрыСохраненияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСохранениеФайла(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолученныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = ПолученныеФайлы[0].ПолноеИмя;
	
	Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработкаНажатияНаОповещение",
		ЭтотОбъект,
		Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла));
	
	ПоказатьОповещениеПользователя(
		НСтр("ru='Сохранение файла'"),
		ОписаниеОповещения,
		НСтр("ru='Открыть каталог'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНажатияНаОповещение(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = Неопределено;
	ДополнительныеПараметры.Свойство("ПолноеИмяФайла", ПолноеИмяФайла);
	
	Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ФайловаяСистемаКлиент.ОткрытьПроводник(ПолноеИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыСохраненияФайла(РасширениеФайла)
	
	ПараметрыСохраненияФайла = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохраненияФайла.Диалог.Расширение = РасширениеФайла;
	ПараметрыСохраненияФайла.Диалог.Фильтр = НСтр("ru='Файл Zip|*.zip;'");;
	Возврат ПараметрыСохраненияФайла;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ВыполнитьДиагностикуНастроек()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ЭтаФорма.УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьНеВФоне = Ложь;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИдентификаторПроверки", ИдентификаторПроверки);
	ПараметрыПроверки.Вставить("АдресОбратногоВызоваОблачнаяТелефония", ТелефонияСервер.АдресОбратногоВызоваОблачнаяТелефония());
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ТелефонияДиагностика.ДиагностикаПодключения", ПараметрыПроверки);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаСервере
Процедура ОчиститьСписокГруппПроверок()
	
	ОбновлениеПроверкиСистемыВзаимодействия = Ложь;
	РезультатыВсехПроверок = ТелефонияДиагностика.ПолучитьСписокГруппПроверок();
	ОбновитьЭлементыФормы(РезультатыВсехПроверок);
	ОбновитьТаблицуГруппыПроверок();
	ОбновитьЭлементыДляСпискаПроверок(Истина);
	ВыделитьСтрокуПервойОшибкеВСпискеПроверок();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы(РезультатыВсехПроверок)
	
	Элементы.ГруппаОбновлениеНастроек.Видимость = Ложь;
	ОбновлениеВсехПроверок = Истина;
	
	РезультатыПроверок.Очистить();
	Для каждого РезультатПроверки Из РезультатыВсехПроверок Цикл
		
		Проверка = РезультатыПроверок.Добавить();
		Проверка.ТипГруппыПроверок = РезультатПроверки.ТипГруппыПроверок;
		Проверка.ТипПроверки = РезультатПроверки.ТипПроверки;
		Проверка.УровеньПроверки = РезультатПроверки.УровеньПроверки;
		Проверка.СтатусПроверки = РезультатПроверки.СтатусПроверки;
		Проверка.ЗаголовокСообщения = ?(РезультатПроверки.УровеньПроверки = "Группа", РезультатПроверки.ЗаголовокГруппыПроверок, РезультатПроверки.ЗаголовокПроверки);
		Проверка.ТекстСообщения = РезультатПроверки.ТекстПроверки;
		Проверка.СпособыУстранения = РезультатПроверки.СпособыУстранения;
		Проверка.Инструкция = РезультатПроверки.Инструкция;
		
	КонецЦикла;
	
	Если ОбновлениеПроверкиСистемыВзаимодействия Тогда
		ОбновитьГруппуПроверкиСистемыВзаимодействия();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуГруппыПроверок()
	
	ГруппыПроверок.Очистить();
	Элементы.ГруппыПроверок.Обновить();
	
	Для каждого РезультатПроверки Из РезультатыПроверок Цикл
		
		Если РезультатПроверки.УровеньПроверки = "Группа" Тогда
			Проверка = ГруппыПроверок.Добавить();
			Проверка.ТипГруппыПроверок = РезультатПроверки.ТипГруппыПроверок;
			Проверка.ТипПроверки = РезультатПроверки.ТипПроверки;
			Проверка.ЗаголовокСообщения = РезультатПроверки.ЗаголовокСообщения;
			Проверка.ТекстСообщения = РезультатПроверки.ТекстСообщения;
			Проверка.СпособыУстранения = РезультатПроверки.СпособыУстранения;
			Проверка.СтатусПроверки = РезультатПроверки.СтатусПроверки;
			Проверка.УровеньПроверки = -1;
			Если ЗначениеЗаполнено(РезультатПроверки.СтатусПроверки) Тогда
				Если РезультатПроверки.СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Успешно Тогда
					Проверка.СтатусПроверкиКартинка = БиблиотекаКартинок.ЗеленыйШар;
				ИначеЕсли РезультатПроверки.СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Предупреждение Тогда
					Проверка.СтатусПроверкиКартинка = БиблиотекаКартинок.ЖелтыйШарБЭД;
				ИначеЕсли РезультатПроверки.СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка Тогда
					Проверка.СтатусПроверкиКартинка = БиблиотекаКартинок.КрасныйШар;
				КонецЕсли;
			Иначе
				Проверка.СтатусПроверкиКартинка = БиблиотекаКартинок.СерыйШар;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДляСпискаПроверок(ОбновлениеТолькоГрупп = Ложь)
	
	Для каждого РезультатПроверки Из РезультатыПроверок Цикл
		Если РезультатПроверки.УровеньПроверки = "Группа" Тогда
			ЭлементГруппыПроверок = ЭтаФорма.Элементы.Найти("Группа" + СтрЗаменить(РезультатПроверки.ТипГруппыПроверок, " ",""));
			Если ЭлементГруппыПроверок <> Неопределено Тогда
				ЭтаФорма.Элементы.Удалить(ЭлементГруппыПроверок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НомерПроверки = 0;
	ТекущаяГруппаПроверок = Неопределено;
	Для каждого РезультатПроверки Из РезультатыПроверок Цикл
		
		Если РезультатПроверки.УровеньПроверки = "Группа" Тогда
			
			НаименованиеГруппы = "Группа" + СтрЗаменить(РезультатПроверки.ТипГруппыПроверок, " ","");
			ГруппаПроверок = Элементы.Добавить(Строка(НаименованиеГруппы), Тип("ГруппаФормы"), Элементы.ГруппаВыполненныеПроверки);
			ГруппаПроверок.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаПроверок.ОтображатьЗаголовок = Истина;
			ГруппаПроверок.Заголовок = Строка(РезультатПроверки.ЗаголовокСообщения);
			ГруппаПроверок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаПроверок.Видимость = Ложь;
			ГруппаПроверок.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
			
		ИначеЕсли РезультатПроверки.УровеньПроверки = "Элемент" Тогда
			
			ГруппаЭлементПроверки = Элементы.Добавить("ГруппаЭлементПроверки" + НомерПроверки, Тип("ГруппаФормы"), ГруппаПроверок);
			ГруппаЭлементПроверки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлементПроверки.ОтображатьЗаголовок = Ложь;
			ГруппаЭлементПроверки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаЭлементПроверки.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
			
			ДекорацияОтступОсновной = Элементы.Добавить("ДекорацияОтступОсновной" + НомерПроверки, Тип("ДекорацияФормы"), ГруппаЭлементПроверки);
			ДекорацияОтступОсновной.Вид = ВидДекорацииФормы.Картинка;
			ДекорацияОтступОсновной.РазмерКартинки = РазмерКартинки.АвтоРазмер;
			ДекорацияОтступОсновной.Ширина = 1;
			ДекорацияОтступОсновной.Высота = 1;
			
			ГруппаЭлементПроверкиОписание = Элементы.Добавить(Строка("ГруппаЭлементПроверкиОписание" + НомерПроверки), Тип("ГруппаФормы"), ГруппаЭлементПроверки);
			ГруппаЭлементПроверкиОписание.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлементПроверкиОписание.ОтображатьЗаголовок = Ложь;
			ГруппаЭлементПроверкиОписание.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			
			ГруппаЗаголовокПроверки = Элементы.Добавить(Строка("ГруппаЗаголовокПроверки" + НомерПроверки), Тип("ГруппаФормы"), ГруппаЭлементПроверкиОписание);
			ГруппаЗаголовокПроверки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЗаголовокПроверки.ОтображатьЗаголовок = Ложь;
			ГруппаЗаголовокПроверки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаЗаголовокПроверки.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
			
			
			ДекорацияСтатус = Элементы.Добавить("ДекорацияСтатус" + НомерПроверки, Тип("ДекорацияФормы"), ГруппаЗаголовокПроверки);
			ДекорацияСтатус.Вид = ВидДекорацииФормы.Картинка;
			ДекорацияСтатус.РазмерКартинки = РазмерКартинки.АвтоРазмер;
			
			Если РезультатПроверки.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Успешно") Тогда
				ДекорацияСтатус.Картинка = БиблиотекаКартинок.СостоянияРасширенийПодключено;
			ИначеЕсли РезультатПроверки.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Ошибка") Тогда
				ДекорацияСтатус.Картинка = БиблиотекаКартинок.СостоянияРасширенийОшибка;
			ИначеЕсли РезультатПроверки.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Предупреждение") Тогда
				ДекорацияСтатус.Картинка = БиблиотекаКартинок.ПредупреждениеСНачалаСтроки;
			КонецЕсли;
			
			ДекорацияТекстЗаголовка = Элементы.Добавить("ДекорацияТекстЗаголовка" + НомерПроверки, Тип("ДекорацияФормы"), ГруппаЗаголовокПроверки);
			ДекорацияТекстЗаголовка.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияТекстЗаголовка.Заголовок = Строка(РезультатПроверки.ЗаголовокСообщения);
			ДекорацияТекстЗаголовка.АвтоМаксимальнаяШирина = Ложь;
			ДекорацияТекстЗаголовка.ЦветТекста = ЦветаСтиля.ЦветАкцента;
			
			Если РезультатПроверки.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Ошибка")
				ИЛИ РезультатПроверки.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Предупреждение") Тогда
				
				ГруппаДеталиПроверки = Элементы.Добавить("ГруппаДеталиПроверки" + НомерПроверки, Тип("ГруппаФормы"), ГруппаЭлементПроверкиОписание);
				ГруппаДеталиПроверки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаДеталиПроверки.ОтображатьЗаголовок = Истина;
				ГруппаДеталиПроверки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
				ГруппаДеталиПроверки.ОтображатьЗаголовок = Ложь;
				ГруппаДеталиПроверки.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаФормы;
				ГруппаДеталиПроверки.Отображение = ОтображениеОбычнойГруппы.Нет;
				ГруппаДеталиПроверки.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.ГиперссылкаЗаголовка;
				
				ДекорацияОтступ = Элементы.Добавить("ДекорацияОтступ" + НомерПроверки, Тип("ДекорацияФормы"), ГруппаДеталиПроверки);
				ДекорацияОтступ.Вид = ВидДекорацииФормы.Картинка;
				ДекорацияОтступ.РазмерКартинки = РазмерКартинки.АвтоРазмер;
				ДекорацияОтступ.Ширина = 1;
				ДекорацияОтступ.Высота = 1;
				
				ГруппаТекстыПроверки = Элементы.Добавить("ГруппаТекстыПроверки" + НомерПроверки, Тип("ГруппаФормы"), ГруппаДеталиПроверки);
				ГруппаТекстыПроверки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаТекстыПроверки.ОтображатьЗаголовок = Ложь;
				ГруппаТекстыПроверки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				
				Если ЗначениеЗаполнено(РезультатыПроверок[НомерПроверки].ТекстСообщения) Тогда
					ПолеТекстОшибки = Элементы.Добавить("ПолеТекстОшибки" + НомерПроверки, Тип("ПолеФормы"), ГруппаТекстыПроверки);
					ПолеТекстОшибки.Вид = ВидПоляФормы.ПолеВвода;
					ПолеТекстОшибки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
					ПолеТекстОшибки.Заголовок = "Текст ошибки";
					ПолеТекстОшибки.ШрифтЗаголовка = ШрифтыСтиля.ВыделенныйЗаголовокПодтвержденияШрифт;
					ПолеТекстОшибки.МногострочныйРежим = Истина;
					ПолеТекстОшибки.Доступность = Истина;
					ПолеТекстОшибки.ТолькоПросмотр = Истина;
					ПолеТекстОшибки.АвтоМаксимальнаяШирина = Ложь;
					ПолеТекстОшибки.МаксимальнаяШирина = 55;
					ПолеТекстОшибки.АвтоМаксимальнаяВысота = Ложь;
					ПолеТекстОшибки.МаксимальнаяВысота = 3;
					ПолеТекстОшибки.ПутьКДанным = "РезультатыПроверок[" + НомерПроверки + "].ТекстСообщения";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(РезультатыПроверок[НомерПроверки].СпособыУстранения)Тогда
					ПолеСпособыУстранения = Элементы.Добавить("ПолеСпособыУстранения" + НомерПроверки, Тип("ПолеФормы"), ГруппаТекстыПроверки);
					ПолеСпособыУстранения.Вид = ВидПоляФормы.ПолеВвода;
					ПолеСпособыУстранения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
					ПолеСпособыУстранения.Заголовок = "Способы устранения";
					ПолеСпособыУстранения.ШрифтЗаголовка = ШрифтыСтиля.ВыделенныйЗаголовокПодтвержденияШрифт;
					ПолеСпособыУстранения.МногострочныйРежим = Истина;
					ПолеСпособыУстранения.Доступность = Истина;
					ПолеСпособыУстранения.ТолькоПросмотр = Истина;
					ПолеСпособыУстранения.АвтоМаксимальнаяШирина = Ложь;
					ПолеСпособыУстранения.МаксимальнаяШирина = 55;
					ПолеСпособыУстранения.АвтоМаксимальнаяВысота = Ложь;
					ПолеСпособыУстранения.МаксимальнаяВысота = 3;
					ПолеСпособыУстранения.ПутьКДанным = "РезультатыПроверок[" + НомерПроверки + "].СпособыУстранения";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(РезультатыПроверок[НомерПроверки].Инструкция)Тогда
					ДекорацияИнструкция = Элементы.Добавить("ДекорацияИнструкция" + НомерПроверки, Тип("ДекорацияФормы"), ГруппаТекстыПроверки);
					ДекорацияИнструкция.Вид = ВидДекорацииФормы.Надпись;
					ДекорацияИнструкция.Заголовок = "Инструкция";
					ДекорацияИнструкция.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
					ДекорацияИнструкция.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
					ДекорацияИнструкция.Гиперссылка = Истина;
					ДекорацияИнструкция.УстановитьДействие("Нажатие","ОткрытьИнструкцию");
					ДекорацияИнструкция.Подсказка = РезультатыПроверок[НомерПроверки].Инструкция;
					ДекорацияИнструкция.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
				КонецЕсли;
				
			КонецЕсли;
			
			Если РезультатПроверки.ТипПроверки = ПредопределенноеЗначение("Перечисление.ТипыПроверокТелефонии.ПроверкаПолучениеПодпискиНаСобытияАТС") Тогда
				НаименованиеЭлемента = "КнопкаСоздатьПодпискуАТС" + НомерПроверки;
				КнопкаПересоздатьПодписку = Элементы.Добавить(НаименованиеЭлемента, Тип("КнопкаФормы"), ГруппаЭлементПроверкиОписание);
				КнопкаПересоздатьПодписку.ИмяКоманды = "СоздатьПодпискуНаСобытия";
				КнопкаПересоздатьПодписку.Заголовок = "Создать новую подписку АТС";
			КонецЕсли;
			
			Если РезультатПроверки.ТипПроверки = ПредопределенноеЗначение("Перечисление.ТипыПроверокТелефонии.ПроверкаСлужебногоПользователя")
				И РезультатПроверки.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Ошибка") Тогда
				НаименованиеЭлемента = "КнопкаСоздатьСлужебногоПользователя" + НомерПроверки;
				Если Элементы.Найти(НаименованиеЭлемента) = Неопределено Тогда
					КнопкаСоздатьСлужебногоПользователя = Элементы.Добавить(НаименованиеЭлемента, Тип("КнопкаФормы"), ГруппаЭлементПроверкиОписание);
					КнопкаСоздатьСлужебногоПользователя.ИмяКоманды = "СоздатьСлужебногоПользователя";
					КнопкаСоздатьСлужебногоПользователя.Заголовок = "Создать служебного пользователя телефонии";
				КонецЕсли;
			КонецЕсли;
			
			
		КонецЕсли;
		НомерПроверки = НомерПроверки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИнструкцию(ТипГруппыПроверок)
	
	Для каждого ТекущаяГруппаПроверок Из ГруппыПроверок Цикл
		Если ТекущаяГруппаПроверок.ТипГруппыПроверок <> ТипГруппыПроверок Тогда
			ГруппаПроверок = Элементы.Найти(СтрШаблон("Группа%1", СтрЗаменить(ТекущаяГруппаПроверок.ТипГруппыПроверок, " ","")));
			ГруппаПроверок.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ГруппаПроверок = Элементы.Найти("Группа" + СтрЗаменить(ТипГруппыПроверок, " ",""));
	ГруппаПроверок.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовуюПодпискуНаСобытия()
	
	РезультатыПроверкиПодпискиНаСобытия = Новый Массив;
	ТелефонияБилайн.ПроверкаПолучениеПодпискиНаСобытияАТС(РезультатыПроверкиПодпискиНаСобытия);
	
	ЗаголовокСообщения = Неопределено;
	
	Для каждого РезультатОбновленный Из РезультатыПроверкиПодпискиНаСобытия Цикл
		Для каждого РезультатТекущий Из РезультатыПроверок Цикл
			Если РезультатТекущий.ТипГруппыПроверок = ПредопределенноеЗначение("Перечисление.ТипыПроверокТелефонии.ПроверкаПолучениеПодпискиНаСобытияАТС") Тогда
				Если РезультатТекущий.УровеньПроверки = "Группа" И РезультатОбновленный.УровеньПроверки = "Группа" Тогда
					РезультатТекущий.ЗаголовокСообщения = РезультатОбновленный.ЗаголовокГруппыПроверок;
					РезультатТекущий.СтатусПроверки = РезультатОбновленный.СтатусПроверки;
					ЗаголовокСообщения = РезультатОбновленный.ЗаголовокГруппыПроверок;
					Прервать;
				ИначеЕсли РезультатТекущий.УровеньПроверки = "Элемент" И РезультатОбновленный.УровеньПроверки = "Элемент"
					И РезультатТекущий.ТипПроверки = РезультатОбновленный.ТипПроверки Тогда
					РезультатТекущий.ЗаголовокСообщения = РезультатОбновленный.ЗаголовокПроверки;
					РезультатТекущий.ТекстСообщения = РезультатОбновленный.ТекстПроверки;
					РезультатТекущий.СпособыУстранения = РезультатОбновленный.СпособыУстранения;
					РезультатТекущий.СтатусПроверки = РезультатОбновленный.СтатусПроверки;
					
					Если РезультатОбновленный.ТипПроверки = ПредопределенноеЗначение("Перечисление.ТипыПроверокТелефонии.ПроверкаПолучениеПодпискиНаСобытияАТС") Тогда
						Если РезультатТекущий.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Успешно") Тогда
							Сообщить(НСтр("ru='Новая подписка на события АТС получена.'"));
						Иначе
							Сообщить(НСтр("ru='Ошибка при попытке создания новой подписки на события АТС.
							|Текст ошибки указан в описании для проверки - ''Проверка получения подписки на события АТС''.'"));
						КонецЕсли;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьЭлементыДляСпискаПроверок();
	ОбновитьТаблицуГруппыПроверок();
	Если ЗаголовокСообщения <> Неопределено Тогда
		ВыделитьСтрокуПоЗаголовкуСообщения(ЗаголовокСообщения);
	Иначе
		ВыделитьСтрокуПервойОшибкеВСпискеПроверок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГруппуПроверкиСистемыВзаимодействия()
	
	Для каждого РезультатТекущий Из РезультатыПроверок Цикл
		Если РезультатТекущий.ТипГруппыПроверок = ПредопределенноеЗначение("Перечисление.ТипыПроверокТелефонии.ПроверкаСистемыВзаимодействия") Тогда
			Если РезультатТекущий.УровеньПроверки = "Группа" Тогда
				РезультатТекущий.СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Успешно;
			ИначеЕсли РезультатТекущий.УровеньПроверки = "Элемент"
				И РезультатТекущий.ТипПроверки = ПредопределенноеЗначение("Перечисление.ТипыПроверокТелефонии.ПроверкаОтправкиСообщенияВСистемуВзаимодействия") Тогда
				РезультатТекущий.ЗаголовокСообщения = "Сообщение получено";
				РезультатТекущий.ТекстСообщения = "";
				РезультатТекущий.СпособыУстранения = "";
				РезультатТекущий.СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Успешно;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьТаблицуГруппыПроверок();
	ОбновитьЭлементыДляСпискаПроверок();
	ВыделитьСтрокуПервойОшибкеВСпискеПроверок();
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьСтрокуПервойОшибкеВСпискеПроверок()
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ГруппыПроверок;
	
	ТекущаяСтрока = Неопределено;
	Если ГруппыПроверок.Количество() > 0 Тогда
		Для каждого Группа Из ГруппыПроверок Цикл
			Если Группа.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Ошибка") Тогда
				ТекущаяСтрока = Группа;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Элементы.ГруппыПроверок.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьСтрокуПоЗаголовкуСообщения(ЗаголовокСообщения)
	
	ТекущаяСтрока = Неопределено;
	Если ГруппыПроверок.Количество() > 0 Тогда
		Для каждого Группа Из ГруппыПроверок Цикл
			Если Группа.ЗаголовокСообщения = ЗаголовокСообщения Тогда
				ТекущаяСтрока = Группа;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Элементы.ГруппыПроверок.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИзменитьСлужебногоПользователя()
	
	ТелефонияСервер.СоздатьИзменитьСлужебногоПользователяТелефонии(ЭтоОблачнаяАТС(ИспользуемаяАТС));
	
	РезультатыПроверкиСлужебногоПользователя = Новый Массив;
	ТелефонияДиагностика.ПроверкаСлужебногоПользователя(РезультатыПроверкиСлужебногоПользователя);
	ЗаголовокСообщения = Неопределено;
	Для каждого РезультатПроверки Из РезультатыПроверок Цикл
		Если РезультатПроверки.ТипГруппыПроверок = ПредопределенноеЗначение("Перечисление.ТипыПроверокТелефонии.ПроверкаСлужебногоПользователя") Тогда
			Для каждого Результат Из РезультатыПроверкиСлужебногоПользователя Цикл
				Если РезультатПроверки.УровеньПроверки = "Группа" И Результат.УровеньПроверки = "Группа" Тогда
					РезультатПроверки.ЗаголовокСообщения = Результат.ЗаголовокГруппыПроверок;
					РезультатПроверки.ТекстСообщения = Результат.ТекстПроверки;
					РезультатПроверки.СпособыУстранения = Результат.СпособыУстранения;
					РезультатПроверки.СтатусПроверки = Результат.СтатусПроверки;
					ЗаголовокСообщения = Результат.ЗаголовокГруппыПроверок;
					Прервать;
				ИначеЕсли РезультатПроверки.УровеньПроверки = "Элемент" И Результат.УровеньПроверки = "Элемент" Тогда
					Если РезультатПроверки.ТипПроверки = Результат.ТипПроверки Тогда
						РезультатПроверки.ЗаголовокСообщения = Результат.ЗаголовокПроверки;
						РезультатПроверки.ТекстСообщения = Результат.ТекстПроверки;
						РезультатПроверки.СпособыУстранения = Результат.СпособыУстранения;
						РезультатПроверки.СтатусПроверки = Результат.СтатусПроверки;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьЭлементыДляСпискаПроверок();
	ОбновитьТаблицуГруппыПроверок();
	Если ЗаголовокСообщения <> Неопределено Тогда
		ВыделитьСтрокуПоЗаголовкуСообщения(ЗаголовокСообщения);
	Иначе
		ВыделитьСтрокуПервойОшибкеВСпискеПроверок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗначенияНастроек()
	
	УстановитьПривилегированныйРежим(Истина);
	Если Константы.ИспользоватьОблачнуюТелефонию.Получить() Тогда
		ИспользуемаяАТС = Константы.ИспользуемаяАТС.Получить();
	ИначеЕсли Константы.ИспользоватьМобильнуюТелефонию.Получить() Тогда
		ИспользуемаяАТС = "МобильнаяТелефония";
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ИндексПриВыполнениеОперации = -1;
	ВыполнениеОперации = Ложь;
	
КонецПроцедуры

&НаСервере
Функция СохранитьОтчетПоДиагностике() Экспорт
	
	Возврат ТелефонияДиагностика.СохранитьОтчетПоДиагностике(РезультатыПроверок);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОблачнаяАТС(АТС)
	
	Возврат ТипЗнч(АТС) = Тип("ПеречислениеСсылка.ДоступныеАТС");
	
КонецФункции

#КонецОбласти

