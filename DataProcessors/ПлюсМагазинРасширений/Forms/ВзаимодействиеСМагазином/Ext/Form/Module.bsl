#Область ОписаниеПеременных

&НаКлиенте
Перем HTMLДокумент;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Установка", ЭтоУстановкаОбновлений);
		
	ЭтоРазделенныйСеанс = ОбщегоНазначения.РазделениеВключено() 
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	АдресПрограммногоИнтерфейса = ПлюсМагазинРасширений.АдресAPI();
	
	УстановкаРазрешена = Пользователи.ЭтоПолноправныйПользователь() 
		Или Пользователи.ЭтоПолноправныйПользователь(, Истина);
		
	Если ОбщегоНазначения.РазделениеВключено() 
		И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		УстановкаРазрешена = Ложь;
	КонецЕсли;
	
	Если Не ЭтоУстановкаОбновлений Тогда
		ИдентификаторСеанса = ПлюсМагазинРасширений.СинхронизироватьСписокРасширенийСМагазином(УстановкаРазрешена);
		АдресИнтерфейса = ПлюсМагазинРасширений.НавигационнаяСсылкаИнтерфейса(ИдентификаторСеанса);
	КонецЕсли;
	
	Если УстановкаРазрешена Тогда
		ТекстДокумента = Обработки.ПлюсМагазинРасширений.ПолучитьМакет("ОжиданиеУстановки").ПолучитьТекст();
		ОбновитьСостояниеРасширений();
	КонецЕсли;
	
	АдресХранилищаДляОбменаДанными = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоУстановкаОбновлений И УстановкаРазрешена Тогда
		ТребуетсяМонопольныйРежим = Истина;
		НачатьУстановку();
		Возврат;
	КонецЕсли;
	
	ПерейтиПоНавигационнойСсылке(АдресИнтерфейса);
		
	Если Не УстановкаРазрешена Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Документ = ПолучитьТекстHTML();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодтверждениеЗакрытияПолучено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Отказ = Истина;
	ПродолжитьЗакрытие();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Асинх Процедура ДокументПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ДанныеСобытия.Element.id <> "button1c" Тогда
		Возврат;
	КонецЕсли;
	
	Если HTMLДокумент.resultStatus = 0 Тогда
		ПоказатьОкноИнформации(
			НСтр("ru = 'Сервер недоступен или не ответил вовремя. Повторить попытку?'"),
			БиблиотекаКартинок.СинхронизацияДанныхОтключение,
			Ложь,
			Истина);
		Возврат;	
	ИначеЕсли HTMLДокумент.resultStatus <> 200 Тогда
		ПоказатьОкноИнформации(
			НСтр("ru = 'Выполнение запроса завершилось с ошибкой. Повторить попытку?'"),
			БиблиотекаКартинок.СинхронизацияДанныхОтключение,
			Ложь,
			Истина);
		Возврат;
	КонецЕсли;
		
	ЗаписатьЗаданиеНаУстановку(HTMLДокумент.resultText);
	НачатьУстановку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументДокументСформирован(Элемент)
	
	Если ТипЗнч(Элемент.Документ.defaultView) = Тип("ВнешнийОбъект") Тогда
		HTMLДокумент = Элемент.Документ.defaultView;
	ИначеЕсли ТипЗнч(Элемент.Документ.parentWindow) = Тип("ВнешнийОбъект") Тогда
		HTMLДокумент = Элемент.Документ.parentWindow;
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось определить тип браузера'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИнформацияОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиПоНавигационнойСсылке(АдресИнтерфейса);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасширенияКУстановке

&НаКлиенте
Процедура РасширенияКУстановкеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РасширенияКУстановкеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьСостояниеРасширений();
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПодключение(Команда)
	ПовторноеПодключение();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВ1СПлюс(Команда)
	ПерейтиПоНавигационнойСсылке(АдресИнтерфейса);
КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьРасширение(Команда)
	
	ТекущиеДанные = Элементы.РасширенияКУстановке.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Статус <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Ждать ВопросАсинх(
		СтрШаблон(НСтр("ru = 'Удалить расширение ""%1""?'"), ТекущиеДанные.Имя),
		РежимДиалогаВопрос.ДаНет,,,
		НСтр("ru = 'Удаление расширения'"), );
		
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРасширения = Новый Структура();
	ДанныеРасширения.Вставить("ИдРасширения", ТекущиеДанные.ИдРасширения);
	ДанныеРасширения.Вставить("ИмяРасширения", ТекущиеДанные.Имя);
	ДанныеРасширения.Вставить("ВерсияРасширения", ТекущиеДанные.Версия);
	
	Если ТребуетсяМонопольныйДоступ(ТекущиеДанные.ИдРасширения) Тогда
		
		ПоказатьОкноИнформации(НСтр("ru = 'Установка монопольного режима'"));
		
		Если ЭтоРазделенныйСеанс Тогда
			ПодключитьОбработчикОжидания(ИмяОбработчикаОжиданияУстановкиМонопольногоРежима(), 5);
		Иначе
			Оповещение = Новый ОписаниеОповещения(
				"ПродолжитьУдалениеРасширения",
				ЭтотОбъект,
				ДанныеРасширения);
			ОткрытьФорму(
				"Обработка.ПлюсМагазинРасширений.Форма.ПредупреждениеМонопольныйРежим",
				Новый Структура("ЭтоУдаление", Истина),
				ЭтотОбъект,,,,
				Оповещение,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПродолжитьУдалениеРасширения(Истина, ДанныеРасширения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ТребуетсяМонопольныйДоступ(Знач ИдРасширения)
	
	Если Не ПлюсМагазинРасширений.РасширениеИзменяетСтруктуруДанных(ИдРасширения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Не УстановитьМонопольныйРежимНаСервере();
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьРасширениеНаСервере(Знач ДанныеРасширения)
	
	ПлюсМагазинРасширений.УдалитьРасширение(ДанныеРасширения);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПродолжитьЗакрытие()
	
	Результат = Ждать ВопросАсинх(
		НСтр("ru = 'Данное окно отвечает за взаимодействие с 1С:Плюс.
			|Если закрыть данное окно в процессе установки расширения, установка будет прервана.
			|Закрыть окно?'"),
		РежимДиалогаВопрос.ДаНет);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПодтверждениеЗакрытияПолучено = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОкноИнформации(ТекстОжидания, КартинкаДействия = Неопределено,
	ПоказатьКнопкиВопроса = Ложь, ПоказатьКнопкуПовторногоПодключения = Ложь,
	ЗакрытьФорму = Ложь, ТекстОшибки = "")
	
	Если КартинкаДействия = Неопределено Тогда
		КартинкаДействия = БиблиотекаКартинок.ПлюсПрогресс48;
	КонецЕсли;
	
	ПараметрыОтображения = Новый Структура();
	ПараметрыОтображения.Вставить("Картинка", КартинкаДействия);
	ПараметрыОтображения.Вставить("Текст", ТекстОжидания);
	ПараметрыОтображения.Вставить("ПоказатьКнопкиВопроса", ПоказатьКнопкиВопроса);
	ПараметрыОтображения.Вставить("ПоказатьКнопкуПовторногоПодключения", ПоказатьКнопкуПовторногоПодключения);
	ПараметрыОтображения.Вставить("ЗакрытьФорму", ЗакрытьФорму);
	ПараметрыОтображения.Вставить("ТекстОшибки", ТекстОшибки);
	
	ПараметрыНовойФормы = Новый Структура("АдресХранилищаДляОбменаДанными", АдресХранилищаДляОбменаДанными);
	ПараметрыНовойФормы.Вставить("АдресХранилищаДляОбменаДанными", АдресХранилищаДляОбменаДанными);
	ПоместитьВоВременноеХранилище(ПараметрыОтображения, АдресХранилищаДляОбменаДанными);
	
	ОткрытьФорму(
		"Обработка.ПлюсМагазинРасширений.Форма.ФормаОжиданиеУстановки",
		ПараметрыНовойФормы,
		ЭтотОбъект,
		"УникальныйКлючДляОткрытияФормы",,,,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ПовторноеПодключение() Экспорт
	ПоказатьОкноИнформации("",,,, Истина);
	HTMLДокумент.subscribe();
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановку()
	
	Если ТребуетсяМонопольныйРежим И Не УстановитьМонопольныйРежимНаСервере() Тогда		ПоказатьОкноИнформации(НСтр("ru = 'Установка монопольного режима'"));
		Если ЭтоРазделенныйСеанс Тогда
			ПодключитьОбработчикОжидания(ИмяОбработчикаОжиданияУстановкиМонопольногоРежима(), 5);
		Иначе
			Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыПредупреждения", ЭтотОбъект);
			ОткрытьФорму(
				"Обработка.ПлюсМагазинРасширений.Форма.ПредупреждениеМонопольныйРежим"
				,Новый Структура("ЭтоУдаление", Ложь),
				ЭтотОбъект,,,,
				Оповещение,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗапуститьУстановкуРасширений();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыПредупреждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НачатьУстановку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьУдалениеРасширения(Результат, ДанныеРасширения) Экспорт
	
	Если Результат = Неопределено Тогда
		ПоказатьОкноИнформации("",,,, Истина);
		Возврат;
	КонецЕсли;
	
	ПоказатьОкноИнформации(НСтр("ru = 'Удаление расширения'"),,,,);
	УдалитьРасширениеНаСервере(ДанныеРасширения);
	ОбновитьСостояниеРасширений();
	ПоказатьОкноИнформации(
		НСтр("ru = 'Расширение удалено.
			|Перезапустить приложение?'"),
		БиблиотекаКартинок.ПлюсУспех48,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ИмяОбработчикаОжиданияУстановкиМонопольногоРежима()
	Возврат "Подключаемый_ПроверитьРезультатОжиданияУстановкиМонопольногоРежима";
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьРезультатОжиданияУстановкиМонопольногоРежима()
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания(ИмяОбработчикаОжиданияУстановкиМонопольногоРежима());
	
	Если Не Результат.Успешно Тогда
		ВызватьИсключение Результат.ТекстОшибки;
	КонецЕсли;
	
	ЗапуститьУстановкуРасширений();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьУстановкуРасширений()
	
	ПоказатьОкноИнформации(НСтр("ru = 'Установка расширения'"));
	ПодключитьОбработчикОжидания("ПродолжитьУстановкуРасширений", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьУстановкуРасширений()
	
	УстановкаВыполненаУспешно = Истина;
	Попытка
		ЗапуститьУстановкуРасширенийНаСервере();
	Исключение
		УстановкаВыполненаУспешно = Ложь;
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПоказатьОкноИнформации(
			НСтр("ru = 'Установка расширения завершилась ошибкой'"),
			БиблиотекаКартинок.ПлюсОшибка48,
			Ложь,
			Ложь,
			Ложь,
			ТекстОшибки);
	КонецПопытки;
			
	ЗавершитьУстановкуРасширений(УстановкаВыполненаУспешно);
	
КонецПроцедуры

&НаСервере
Функция УстановитьМонопольныйРежимНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		УстановитьМонопольныйРежим(Истина);
		Возврат Истина;
	Исключение
		Если Не ЭтоРазделенныйСеанс Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки;
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);

	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(АдресРезультата);
	ПараметрыЗадания.Добавить(ПолучитьТекущийСеансИнформационнойБазы().НомерСеанса);
	
	ФоновыеЗадания.Выполнить(
		"ПлюсМагазинРасширенийВМоделиСервиса.НачатьУстановкуМонопольногоРежима",
		ПараметрыЗадания);
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОбновитьСостояниеРасширений()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПлюсРасширенияКУстановке.ИдРасширения КАК ИдРасширения, 
	|	ПлюсРасширенияКУстановке.ИдВерсииРасширения КАК ИдВерсииРасширения,
	|	ПлюсРасширенияКУстановке.ИмяРасширения КАК Имя,
	|	ПлюсРасширенияКУстановке.ВерсияРасширения КАК Версия,
	|	ДАТАВРЕМЯ(1,1,1,0,0,0) КАК ДатаУстановки,
	|	0 КАК Статус
	|ИЗ
	|	РегистрСведений.ПлюсРасширенияКУстановке КАК ПлюсРасширенияКУстановке
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПлюсУстановленныеРасширения.ИдРасширения,
	|	ПлюсУстановленныеРасширения.ИдВерсииРасширения,
	|	ПлюсУстановленныеРасширения.ИмяРасширения,
	|	ПлюсУстановленныеРасширения.ВерсияРасширения,
	|	ПлюсУстановленныеРасширения.ДатаУстановкиОбновления,
	|	1
	|ИЗ
	|	РегистрСведений.ПлюсУстановленныеРасширения КАК ПлюсУстановленныеРасширения
	|УПОРЯДОЧИТЬ ПО 
	|	Статус,
	|	ДатаУстановки УБЫВ");
	
	РасширенияКУстановке.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтрока = РасширенияКУстановке.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
		
		Если Выборка.Статус = 1 И УстановленныеВСеансеРасширения.Количество() <> 0 Тогда
			Отбор = Новый Структура("ИдВерсииРасширения", Выборка.ИдВерсииРасширения);
			Если УстановленныеВСеансеРасширения.НайтиСтроки(Отбор).Количество() > 0 Тогда
				Выборка.Статус = 2;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗавершитьУстановкуРасширений(УстановкаЗавершенаУспешно = Истина) Экспорт
	
	Если УстановкаЗавершенаУспешно Тогда
		ОбновитьСостояниеРасширений();
		ПоказатьОкноИнформации(
			НСтр("ru = 'Установка расширения завершена.
			|Перезапустить приложение?'"),
			БиблиотекаКартинок.ПлюсУспех48,
			Истина);
	КонецЕсли;
	
	СнятьМонопольныйРежим();
	ТребуетсяМонопольныйРежим = Ложь;
	
	HTMLДокумент.subscribe();
	
КонецПроцедуры

&НаСервере
Процедура СнятьМонопольныйРежим()
	
	Если МонопольныйРежим() Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстHTML()
	
	ДлительностьВызова = 30;
	ТаймаутВызова = (ДлительностьВызова + 10) * 1000;
	Путь = АдресПрограммногоИнтерфейса + СтрШаблон("/%1/WaitingInstall", ИдентификаторСеанса);
	
	Возврат СтрШаблон(ТекстДокумента, 
			Путь, 
			Формат(ДлительностьВызова, "ЧГ=0;"), 
			Формат(ТаймаутВызова, "ЧГ=0;"));
КонецФункции

&НаСервере
Процедура ЗаписатьЗаданиеНаУстановку(Знач ДанныеЗадания)
	
	ЗаданиеНаУстановку = ОбщегоНазначения.JSONВЗначение(ДанныеЗадания, , Ложь);
	
	НайденыРРД = Ложь;
	ПлюсМагазинРасширений.ЗаписатьЗаданиеНаУстановку(ЗаданиеНаУстановку, ИдентификаторСеанса, НайденыРРД);
	ТребуетсяМонопольныйРежим = НайденыРРД;
	
	ОбновитьСостояниеРасширений();
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьУстановкуРасширенийНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТребуетсяМонопольныйРежим Тогда
		Если ЭтоРазделенныйСеанс Тогда
			ПлюсМагазинРасширенийВМоделиСервиса.ВыполнитьУстановкуМонопольногоРежима(
				Пользователи.ТекущийПользователь(),
				Неопределено,
				Неопределено,
				Истина);
		ИначеЕсли Не МонопольныйРежим() Тогда 
			УстановитьМонопольныйРежим(Истина);
		КонецЕсли;
	КонецЕсли;
	
	ПлюсМагазинРасширений.УстановитьРасширения(ЭтоУстановкаОбновлений);

КонецПроцедуры

#КонецОбласти


