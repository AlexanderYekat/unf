////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры для выполнения операций по проверке настроек облачной телефонии
// - проверка настроек по всем доступным операторам телефонии;
// - предоставление рекоммендаций по устранению ошибок;
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Запускает проверку настроек облачной телефонии.
//
// Параметры:
//  УникальныйИдентификаторПроверки - Строка - идентификатор проверки используемый в дальнейшем при передачи результатов на форму запуска.
//
Функция ДиагностикаПодключения(Параметры) Экспорт
	
	ИспользуемаяАТС = Константы.ИспользуемаяАТС.Получить();
	
	РезультатыВсехПроверок = Новый Массив;
	
	Если ЗначениеЗаполнено(ИспользуемаяАТС) Тогда
		
		АдресПринимающегоСервиса = Параметры.АдресОбратногоВызоваОблачнаяТелефония;
		ПроверкаОбязательныхПолей(АдресПринимающегоСервиса, РезультатыВсехПроверок);
		Если ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.ДоступныеАТС.Билайн") Тогда
			ТелефонияБилайн.ПроверкаПолучениеПодпискиНаСобытияАТС(АдресПринимающегоСервиса, РезультатыВсехПроверок)
		КонецЕсли;
		ПроверкаСлужебногоПользователя(РезультатыВсехПроверок);
		ПроверкаПубликуемогоСервиса(АдресПринимающегоСервиса, РезультатыВсехПроверок);
		ПроверкаПодключенияАТС(ИспользуемаяАТС, РезультатыВсехПроверок);
		ПроверкаСистемыВзаимодействия(Параметры.ИдентификаторПроверки, РезультатыВсехПроверок);
		
		Если ИспользуемаяАТС <> ПредопределенноеЗначение("Перечисление.ДоступныеАТС.Ростелеком") Тогда
			ПроверкаАбонентовОАТС(РезультатыВсехПроверок);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатыВсехПроверок;
	
КонецФункции

// Возвращает список проверок определенных для текущего оператора телефонии.
//
Функция ПолучитьСписокГруппПроверок() Экспорт
	
	ИспользуемаяАТС = Константы.ИспользуемаяАТС.Получить();
	ПроверкиПодключения = ТелефонияСервер.НастройкиИнтеграции(ИспользуемаяАТС).Проверки;
	
	РезультатыВсехПроверок = Новый Массив;
	Для каждого Проверка Из ПроверкиПодключения Цикл
		
		ДобавитьРезультатПроверкиВСписок(
		РезультатыВсехПроверок,
		Перечисления["ТипыПроверокТелефонии"][Строка(Проверка.Ключ)],
		Перечисления["ТипыПроверокТелефонии"][Строка(Проверка.Ключ)],
		"Группа",
		Неопределено,
		Перечисления["ТипыПроверокТелефонии"][Строка(Проверка.Ключ)]);
		
	КонецЦикла;
	
	Возврат РезультатыВсехПроверок;
	
КонецФункции

// Выполняет проверку обязательных полей текущего оператора телефонии.
//
// Параметры:
//  РезультатыВсехПроверок - Массив - результаты проверок по всем настройкам облачной телефонии.
//
Процедура ПроверкаОбязательныхПолей(АдресПринимающегоСервиса, РезультатыВсехПроверок) Экспорт
	
	ТипГруппыПроверок = Перечисления.ТипыПроверокТелефонии.ПроверкаОбязательныхПолей;
	
	// Выполнение проверок обязательных полей
	РезультатыТекущейГруппыПроверок = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатыТекущейГруппыПроверок,
		ПроверкаПолейАвторизацииОАТС(ТипГруппыПроверок));
	ПроверкаАдресаПубликуемогоСервиса(АдресПринимающегоСервиса, РезультатыТекущейГруппыПроверок, ТипГруппыПроверок);
	
	// Добавление заголовка текущей группы проверок в общий список проверок
	ОбщийСтатусГруппыПроверок = ПолучитьОбщийСтатусДляГруппыПроверок(РезультатыТекущейГруппыПроверок);
	
	ДобавитьРезультатПроверкиВСписок(
		РезультатыВсехПроверок,
		ТипГруппыПроверок,
		ТипГруппыПроверок,
		"Группа",
		ОбщийСтатусГруппыПроверок,
		НСтр("ru='Проверка обязательных полей'"));
		
	// Добавление всех результатов текущей группы проверок в общий список проверок
	ДополнитьРезультатыПроверок(РезультатыВсехПроверок, РезультатыТекущейГруппыПроверок);
	
КонецПроцедуры

// Выполняет проверку адреса публикуемого сервиса текущего оператора телефонии.
//
// Параметры:
//  РезультатыВсехПроверок - Массив - результаты проверок по всем настройкам облачной телефонии.
//
Процедура ПроверкаАдресаПубликуемогоСервиса(АдресПринимающегоСервиса, РезультатыПроверок, ТипГруппыПроверок) Экспорт
	
	ТипПроверки = Перечисления.ТипыПроверокТелефонии.ПроверкаАдресаПубликуемогоСервиса;
	СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Успешно;
	ЗаголовокПроверки = НСтр("ru='Адрес публикуемого сервиса телефонии заполнен корректно'");
	ТекстПроверки = "";
	СпособыУстранения = "";
	
	АТС = Константы.ИспользуемаяАТС.Получить();
	Если Перечисления.ДоступныеАТС.ЭтоПлатформаItoolabs(АТС)
		И АТС <> ПредопределенноеЗначение("Перечисление.ДоступныеАТС.ДомRu")
		И АТС <> ПредопределенноеЗначение("Перечисление.ДоступныеАТС.ДеловаяСетьИркутск")
		И АТС <> ПредопределенноеЗначение("Перечисление.ДоступныеАТС.ВестКоллСПб") Тогда
		АТС = ПредопределенноеЗначение("Перечисление.ДоступныеАТС.УниверсальныйItoolabs");
	КонецЕсли;
	
	Настройки = Константы.ОбщиеНастройкиТелефонии.Получить().Получить();
	
	АдресСервераОсновнойПубликации = "";
	АдресРесурсаОсновнойПубликации = "";
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		Если Настройки.Свойство("АдресСервераОсновнойПубликации") Тогда
			АдресСервераОсновнойПубликации = Настройки.АдресСервераОсновнойПубликации;
		КонецЕсли;
		
		НастройкиПубликации = Настройки.НастройкиПубликации.Получить(АТС);
		Если НастройкиПубликации.Свойство("АдресРесурсаОсновнойПубликации") Тогда
			АдресРесурсаОсновнойПубликации = НастройкиПубликации.АдресРесурсаОсновнойПубликации;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресСервераОсновнойПубликации) И Не ОбщегоНазначения.РазделениеВключено() Тогда
		СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
		ЗаголовокПроверки = НСтр("ru='Поле ''Адрес сервера'' публикуемого сервиса 1С:УНФ не заполнено'");
		ТекстПроверки = НСтр("ru='Для успешной передачи данных о звонках от оператора телефонии, требуется корректное заполнение адреса публикуемого сервиса.'");
		
		
		СпособыУстранения = НСтр("ru='Заполните поле ''Адрес публикации'' в разделе: Настройка - Облачная телефония - Настройки публикации http-сервисов 1С:УНФ'");
		
	ИначеЕсли НЕ ЗначениеЗаполнено(АдресРесурсаОсновнойПубликации) И Не ОбщегоНазначения.РазделениеВключено() Тогда
		СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
		ЗаголовокПроверки = НСтр("ru='Поле ''Адрес публикации'' публикуемого сервиса 1С:УНФ не заполнено'");
		ТекстПроверки = НСтр("ru='Для успешной передачи данных о звонках от оператора телефонии, требуется корректное заполнение адреса публикуемого сервиса.'");
		СпособыУстранения = НСтр("ru='Заполните поле ''Адрес публикации'' в разделе: Настройка - Облачная телефония - Настройки публикации http-сервисов 1С:УНФ'");
	Иначе
		КорректноеНачалоАдреса = Ложь;
		АдресЛокальнойСети = Неопределено;
		АдресСервера = "";
		Если СтрНайти(АдресПринимающегоСервиса, "http://") > 0 ИЛИ СтрНайти(АдресПринимающегоСервиса, "https://") > 0 Тогда
			КорректноеНачалоАдреса = Истина;
			АдресСервера = СтрЗаменить(АдресПринимающегоСервиса, "http://", "");
			АдресСервера = СтрЗаменить(АдресСервера, "https://", "");
		КонецЕсли;
		
		АдресСервера = СтрРазделить(АдресСервера, "/")[0];
		АдресСервера = СтрРазделить(АдресСервера, ".");
		Если АдресСервера.Количество() = 4
			И ((СтрНайти(АдресСервера[0], "192") > 0 И АдресСервера[1] = "168") ИЛИ (СтрНайти(АдресСервера[0], "127") > 0)) Тогда
			АдресЛокальнойСети = СтрШаблон("%1.%2.%3.%4",АдресСервера[0], АдресСервера[1], АдресСервера[2], АдресСервера[3]);
		ИначеЕсли СтрНайти(АдресПринимающегоСервиса, "localhost") > 0 Тогда
			АдресЛокальнойСети = "localhost";
		КонецЕсли;
		ИндексКорректныхСимволов = СтрНайти(АдресПринимающегоСервиса, "/hs/telephony");
		
		НайденныеНедопустимыеСимволы = ПроверитьАдресНаНаличиеНедопустимыхСимволов(АдресПринимающегоСервиса);
		
		Если НЕ КорректноеНачалоАдреса Тогда
			СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
			ЗаголовокПроверки = НСтр("ru='Проверка адреса публикуемого сервиса 1С:УНФ'");
			ТекстПроверки = НСтр("ru='В поле ''Адрес публикации 1С:УНФ'' отсутствует обязательный фрагмент адреса http(s)://'");
			СпособыУстранения = НСтр("ru='Адрес сервиса должен начинаться с http(s)://'");
		ИначеЕсли АдресЛокальнойСети <> Неопределено Тогда
			СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
			ЗаголовокПроверки = СтрШаблон(
				НСтр("ru='Поле ''Адрес публикации 1С:УНФ'' содержит адрес локальной сети - %1'"),
				АдресЛокальнойСети);
			ТекстПроверки = СтрШаблон(
				НСтр("ru='Возможно, публикуемый сервис 1С:УНФ с указанным адресом сервера (%1) не доступен для внешних вызовов.%2%3'"),
			АдресЛокальнойСети, Символы.ПС, АдресПринимающегоСервиса);
			СпособыУстранения = НСтр("ru='Проверьте доступность публикуемого сервиса 1С:УНФ с другого внешнего устройства.'");
		ИначеЕсли ИндексКорректныхСимволов = 0 Тогда
			СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
			ЗаголовокПроверки = НСтр("ru='Проверка адреса публикуемого сервиса 1С:УНФ'");
			ТекстПроверки = НСтр("ru='Отсутствует обязательный фрагмент адреса /hs/telephony '");
			СпособыУстранения = НСтр("ru='Добавьте обязательный фрагмент /hs/telephony в поле ''Адрес публикации''.'");
		ИначеЕсли СтрДлина(НайденныеНедопустимыеСимволы) > 0 Тогда
			СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
			ЗаголовокПроверки = НСтр("ru='Обнаружены недопустимые символы в адресе публикуемого сервиса 1С:УНФ'");
			ТекстПроверки = СтрШаблон(НСтр("ru='Поле ''Адрес публикуемого сервиса'' ""%1""%2содержит недопустимые символы: %3'"),
				АдресПринимающегоСервиса,
				Символы.ПС,
				НайденныеНедопустимыеСимволы);
			СпособыУстранения = НСтр("ru='Удалите недопустимые символы из полей ''Адрес сервера'' и ''Адрес публикации''.'");
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьРезультатПроверкиВСписок(
		РезультатыПроверок,
		ТипГруппыПроверок,
		ТипПроверки,
		"Элемент",
		СтатусПроверки,
		ЗаголовокПроверки,
		ТекстПроверки,
		СпособыУстранения);
	
КонецПроцедуры

// Выполняет проверку адреса сервиса публикуемого сервиса 1С:УНФ для текущего оператора телефонии.
//
// Параметры:
//  РезультатыВсехПроверок - Массив - результаты проверок по всем настройкам облачной телефонии.
//  ТипГруппыПроверок - Перечисление - наименование группы проверок к оторому будет отнесена проверка в структуре РезультатыВсехПроверок
//
Процедура ПроверкаАдресаСервераОсновнойПубликации(РезультатыПроверок, ТипГруппыПроверок) Экспорт
	
	ТипПроверки = Перечисления.ТипыПроверокТелефонии.ПроверкаОбязательныхПолей;
	СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Успешно;
	ЗаголовокСообщения = НСтр("ru='Поле ''Адрес сервера'' публикуемого сервиса заполнено'");
	
	Настройки = Константы.ОбщиеНастройкиТелефонии.Получить().Получить();
	
	АдресСервераОсновнойПубликации = "";
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		АдресСервераОсновнойПубликации = Настройки.АдресСервераОсновнойПубликации;
	КонецЕсли;

	Если ЗначениеЗаполнено(АдресСервераОсновнойПубликации) Тогда

	Иначе
		СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
		ЗаголовокСообщения = НСтр("ru='Поле ''Адрес сервера'' публикуемого сервиса не заполнено'");
	КонецЕсли;
	
	ДобавитьРезультатПроверкиВСписок(
		РезультатыПроверок,
		ТипГруппыПроверок,
		ТипПроверки,
		"Элемент",
		СтатусПроверки,
		ЗаголовокСообщения);
	
КонецПроцедуры

// Выполняет проверку адреса ресурса публикуемого сервиса 1С:УНФ для текущего оператора телефонии.
//
// Параметры:
//  РезультатыВсехПроверок - Массив - результаты проверок по всем настройкам облачной телефонии.
//  ТипГруппыПроверок - Перечисление - наименование группы проверок к оторому будет отнесена проверка в структуре РезультатыВсехПроверок
//
Процедура ПроверкаАдресаРесурсаОсновнойПубликации(РезультатыПроверок, ТипГруппыПроверок) Экспорт
	
	ТипПроверки = Перечисления.ТипыПроверокТелефонии.ПроверкаОбязательныхПолей;
	СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Успешно;
	ЗаголовокСообщения = НСтр("ru='Поле ''Адрес публикации'' публикуемого сервиса заполнено'");
	ТекстСообщения = "";
	СпособыУстранения = "";
	
	АТС = Константы.ИспользуемаяАТС.Получить();
	Настройки = Константы.ОбщиеНастройкиТелефонии.Получить().Получить();
	
	АдресРесурсаОсновнойПубликации = "";
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		АдресРесурсаОсновнойПубликации = Настройки.НастройкиПубликации.Получить(АТС).АдресРесурсаОсновнойПубликации;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресРесурсаОсновнойПубликации) Тогда
		СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
		ЗаголовокСообщения = НСтр("ru='Поле ''Адрес публикации'' публикуемого сервиса не заполнено'");
	КонецЕсли;
		
	ДобавитьРезультатПроверкиВСписок(
		РезультатыПроверок,
		ТипГруппыПроверок,
		ТипПроверки,
		"Элемент",
		СтатусПроверки,
		ЗаголовокСообщения,
		ТекстСообщения,
		СпособыУстранения);
	
КонецПроцедуры

// Выполняет проверку подключения к АТС текущего оператора телефонии.
//
// Параметры:
//  РезультатыВсехПроверок - Массив - результаты проверок по всем настройкам облачной телефонии.
//  ИспользуемаяАТС - Перечисление - наименование оператора
//
Процедура ПроверкаПодключенияАТС(ИспользуемаяАТС, РезультатыВсехПроверок) Экспорт
	
	ТипГруппыПроверок = Перечисления.ТипыПроверокТелефонии.ПроверкаПодключенияАТС;

	РезультатыТекущейГруппыПроверок = Новый Массив;
	
	РезультатыТекущейГруппыПроверок = ПроверкаПолейАвторизацииОАТС(ТипГруппыПроверок);
	
	ОбщийСтатусГруппыПроверок = ПолучитьОбщийСтатусДляГруппыПроверок(РезультатыТекущейГруппыПроверок);
	Если ОбщийСтатусГруппыПроверок = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Успешно") Тогда
		Если ИспользуемаяАТС <> ПредопределенноеЗначение("Перечисление.ДоступныеАТС.Ростелеком") Тогда
			ПроверкаЗагрузкиПользователейАТС(РезультатыТекущейГруппыПроверок, ТипГруппыПроверок);
		Иначе
			ПроверкаПодключенияРостелеком(РезультатыТекущейГруппыПроверок, ТипГруппыПроверок);
		КонецЕсли;
	КонецЕсли;
	
	ОбщийСтатусГруппыПроверок = ПолучитьОбщийСтатусДляГруппыПроверок(РезультатыТекущейГруппыПроверок);
	
	// Добавление заголовка текущей группы проверок в общий список проверок
	ДобавитьРезультатПроверкиВСписок(
		РезультатыВсехПроверок,
		ТипГруппыПроверок,
		ТипГруппыПроверок,
		"Группа",
		ОбщийСтатусГруппыПроверок,
		НСтр("ru='Проверка подключения к АТС'"));
		
	// Добавление всех результатов текущей группы проверок в общий список проверок
	ДополнитьРезультатыПроверок(РезультатыВсехПроверок, РезультатыТекущейГруппыПроверок);
	
КонецПроцедуры

// Дополняет в конец списка всех проверок, список проверок отдельной группы проверок.
//
// Параметры:
//  РезультатыВсехПроверок - Массив - результаты проверок по всем настройкам облачной телефонии.
//  РезультатыТекущейГруппыПроверок - Структура - результаты проверок по отдельной группе настроек облачной телефонии.
//  ЗаполнятьДоПервойОшибки - Булево - индикатор позволяющий ограничивать заполнение списка всех проверок новой группой проверок до первой ошибки
//
Процедура ДополнитьРезультатыПроверок(РезультатыВсехПроверок,
	РезультатыТекущейГруппыПроверок,
	ЗаполнятьДоПервойОшибки = Истина) Экспорт
	
	Если ЗаполнятьДоПервойОшибки Тогда
		Ошибка = Неопределено;
		Для каждого РезультатПроверки Из РезультатыТекущейГруппыПроверок Цикл
			Если РезультатПроверки.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Ошибка") Тогда
				Если Ошибка = Неопределено Тогда
					Ошибка = РезультатПроверки;
				КонецЕсли;
			Иначе
				РезультатыВсехПроверок.Добавить(РезультатПроверки);
			КонецЕсли;
		КонецЦикла;
		Если Ошибка <> Неопределено Тогда
			РезультатыВсехПроверок.Добавить(Ошибка);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатыВсехПроверок, РезультатыТекущейГруппыПроверок);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку наличия служебного пользователя телефонии.
//
// Параметры:
//  РезультатыВсехПроверок - Массив - результаты проверок по всем настройкам облачной телефонии.
//
Процедура ПроверкаСлужебногоПользователя(РезультатыВсехПроверок) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипПроверки = Перечисления.ТипыПроверокТелефонии.ПроверкаСлужебногоПользователя;
	РезультатыТекущейГруппыПроверок = Новый Массив;
	
	СлужебныйПользовательИмя = ТелефонияСервер.СлужебныйПользовательТелефонииЛогин();
	СлужебныйПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(СлужебныйПользовательИмя);
	
	СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Успешно;
	
	Если СлужебныйПользователь <> Неопределено Тогда
		СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Успешно;
		ЗаголовокПроверки = СтрШаблон(НСтр("ru='Служебный пользователь %1 найден'"), СлужебныйПользовательИмя);
	Иначе
		СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
		ЗаголовокПроверки = НСтр("ru='Служебный пользователь телефонии не найден'");
		ТекстСообщения = НСтр("ru='Служебный пользователь телефонии не найден'");
		СпособыУстранения = НСтр("ru='Необходимо создать служебного пользователя'");
	КонецЕсли;
	
	ДобавитьРезультатПроверкиВСписок(
		РезультатыТекущейГруппыПроверок,
		ТипПроверки,
		ТипПроверки,
		"Элемент",
		СтатусПроверки,
		ЗаголовокПроверки,
		ТекстСообщения,
		СпособыУстранения);
		
	ДобавитьРезультатПроверкиВСписок(
		РезультатыВсехПроверок,
		ТипПроверки,
		ТипПроверки,
		"Группа",
		СтатусПроверки,
		НСтр("ru='Проверка служебного пользователя телефонии'"));
	
	// Добавление всех результатов текущей группы проверок в общий список проверок
	ДополнитьРезультатыПроверок(РезультатыВсехПроверок, РезультатыТекущейГруппыПроверок);
	
КонецПроцедуры

// Выполняет проверку публикуемого сервиса 1С:УНФ для текущего оператора телефонии.
// Проверка включает вызов отдельных проверок для проверки отдельных полей заполняемых в настройках телефонии
//
// Параметры:
//  РезультатыВсехПроверок - Массив - результаты проверок по всем настройкам облачной телефонии.
//
Процедура ПроверкаПубликуемогоСервиса(АдресПринимающегоСервиса, РезультатыВсехПроверок) Экспорт
	
	ТипГруппыПроверок = Перечисления.ТипыПроверокТелефонии.ПроверкаПубликуемогоСервиса;
	
	// Выполнение проверок обязательных полей
	РезультатыТекущейГруппыПроверок = Новый Массив;
	ПроверкаАдресаПубликуемогоСервиса(АдресПринимающегоСервиса, РезультатыТекущейГруппыПроверок, ТипГруппыПроверок);
	
	// Добавление заголовка текущей группы проверок в общий список проверок
	СтатусПроверкиАдресаПубликуемогоСервиса = ПолучитьОбщийСтатусДляГруппыПроверок(РезультатыТекущейГруппыПроверок);
	
	Если СтатусПроверкиАдресаПубликуемогоСервиса = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Успешно") Тогда
		
		ТипГруппыПроверок = Перечисления.ТипыПроверокТелефонии.ПроверкаПубликуемогоСервиса;
		ТипПроверки = Перечисления.ТипыПроверокТелефонии.ПроверкаДоступностиПубликуемогоСервиса;
		
		СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Успешно;
		ЗаголовокПроверки = "";
		ТекстСообщения = "";
		СпособыУстранения = "";
		
		Попытка
			
			HTTPОтвет = Неопределено;
			ТелефонияСервер.ПроверитьАдресПубликацииСервисаТелефонии(HTTPОтвет);
			
			Если HTTPОтвет.КодСостояния = 200 Тогда
				
				ЗаголовокПроверки = НСтр("ru='Публикуемый сервис 1С:УНФ доступен'");
				
			ИначеЕсли HTTPОтвет.КодСостояния >= 500 Тогда
				
				СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
				ЗаголовокПроверки = НСтр("ru='Публикуемый сервис 1С:УНФ не доступен'");
				ТекстСообщения = СтрШаблон(НСтр("ru='Вызов публикуемого сервиса 1С:УНФ вернул ошибку.
					|Код ошибки: %1'"), HTTPОтвет.КодСостояния);
				СпособыУстранения = НСтр("ru='Проверьте доступность публикуемого сервиса 1С:УНФ в соответствии с инструкцией.'");
				
			ИначеЕсли HTTPОтвет.КодСостояния = 401 Тогда
				
				СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
				ЗаголовокПроверки = НСтр("ru='Публикуемый сервис 1С:УНФ не доступен - ошибка авторизации'");
				ТекстСообщения = СтрШаблон(НСтр("ru='Вызов публикуемого сервиса 1С:УНФ вернул ошибку.
					|Код ошибки: %1'"), HTTPОтвет.КодСостояния);
				СпособыУстранения = СтрШаблон(НСтр("ru='Проверьте настройки авторизации публикуемого сервиса 1С:УНФ.%1 В соответствии с инструкцией, значение авторизации указанное в файле default.vrd должно соответствовать значению авторизации указанному в настройках:%2''%3''.'"),
					Символы.ПС, Символы.ПС, ТелефонияСервер.СтрокаАвторизацииФайлVRDТекстПодсказки());
				
			ИначеЕсли HTTPОтвет.КодСостояния = 404 Тогда
				
				СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
				ЗаголовокПроверки = НСтр("ru='Публикуемый сервис 1С:УНФ не найден'");
				ТекстСообщения = СтрШаблон(НСтр("ru='Вызов публикуемого сервиса вернул ошибку.
					|Код ошибки: %1'"), HTTPОтвет.КодСостояния);
				СпособыУстранения = СтрШаблон(НСтр("ru='Возможно указан некорректный адрес публикуемого сервиса 1С:УНФ.
					|Проверьте доступность публикуемого сервиса в соответствии с инструкцией.'"));
				
			Иначе
				
				СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
				ЗаголовокПроверки = НСтр("ru='Ошибка проверки доступности публикуемого сервиса 1С:УНФ'");
				ТекстСообщения = СтрШаблон(НСтр("ru='Вызов публикуемого сервиса вернул ошибку.
					|Код ошибки: %1'"), HTTPОтвет.КодСостояния);
				СпособыУстранения = СтрШаблон(НСтр("ru='Возможно указан некорректный адрес публикуемого сервиса 1С:УНФ.
					|Проверьте доступность публикуемого сервиса в соответствии с инструкцией.'"));
				
			КонецЕсли;
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ЗаписьЖурналаРегистрации(
				ТелефонияСервер.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
			ЗаголовокПроверки = НСтр("ru='Ошибка выполнения проверки публикуемого сервиса 1С:УНФ'");
			
			ПричинаТекст = "";
			Если ТипЗнч( ИнформацияОбОшибке.Причина ) = Тип( "ИнформацияОбОшибке" ) Тогда
				ПричинаТекст = СтрШаблон("%1Причина: %2", Символы.ПС, ИнформацияОбОшибке.Причина.Описание);
			КонецЕсли;
			ТекстСообщения = СтрШаблон(НСтр("ru='При попытке вызова публикуемого сервиса - %1
				|Произошла ошибка: %2%3'"),
				АдресПринимающегоСервиса, ИнформацияОбОшибке.Описание, ПричинаТекст);
				
			СпособыУстранения = НСтр("ru='Проверьте доступность публикуемого сервиса 1С:УНФ в соответствии с инструкцией или обратитесь в службу технической поддержки .'");
			СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
			
		КонецПопытки;
		
		ДобавитьРезультатПроверкиВСписок(
			РезультатыТекущейГруппыПроверок,
			ТипГруппыПроверок,
			ТипПроверки,
			"Элемент",
			СтатусПроверки,
			ЗаголовокПроверки,
			ТекстСообщения,
			СпособыУстранения,
			"https://its.1c.ru/db/metod81#content:6966:hdoc");
			
	КонецЕсли;
	
	// Добавление заголовка текущей группы проверок в общий список проверок
	ОбщийСтатусГруппыПроверок = ПолучитьОбщийСтатусДляГруппыПроверок(РезультатыТекущейГруппыПроверок);
	ДобавитьРезультатПроверкиВСписок(
		РезультатыВсехПроверок,
		ТипГруппыПроверок,
		ТипГруппыПроверок,
		"Группа",
		ОбщийСтатусГруппыПроверок,
		НСтр("ru='Проверка публикуемого сервиса'"));
		
	// Добавление всех результатов текущей группы проверок в общий список проверок
	ДополнитьРезультатыПроверок(РезультатыВсехПроверок, РезультатыТекущейГруппыПроверок);
	
КонецПроцедуры

// Выполняет проверку загрузки списка абонентов АТС для текущего оператора телефонии.
//
// Параметры:
//  РезультатыВсехПроверок - Массив - результаты проверок по всем настройкам облачной телефонии.
//  ТипГруппыПроверок - Перечисление - наименование группы проверок к оторому будет отнесена проверка в структуре РезультатыВсехПроверок
//
Процедура ПроверкаЗагрузкиПользователейАТС(РезультатыВсехПроверок, ТипГруппыПроверок) Экспорт
	
	ТипПроверки = Перечисления.ТипыПроверокТелефонии.ПроверкаЗагрузкиАбонентовАТС;
	
	СтатусТекущейПроверки = Перечисления.СтатусПроверкиТелефонии.Успешно;
	ЗаголовокПроверки = НСтр("ru='Загрузка списка пользователей АТС выполнена успешно'");
	РезультатПроверки = Неопределено;
	СпособыУстранения = Неопределено;
	ДанныеПроверки = Неопределено;
	
	Попытка
		
		HTTPОтвет = Неопределено;
		АТС = Константы.ИспользуемаяАТС.Получить();
		ДанныеПоАбонентамОАТС = ТелефонияСервер.ЗагрузитьДанныеПоАбонентам();
		
		Если ЗначениеЗаполнено(ДанныеПоАбонентамОАТС.ЗаголовокОшибки) Тогда
			СтатусТекущейПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
			ЗаголовокПроверки = ДанныеПоАбонентамОАТС.ЗаголовокОшибки;
			Если Не ЗначениеЗаполнено(ДанныеПоАбонентамОАТС.КодСостояния) Тогда
				СпособыУстранения = НСтр("ru='Проверьте корректность заполнения полей авторизации'");
			Иначе
				
				РезультатПроверки = СтрШаблон(НСтр("ru='При вызове сервиса АТС произошла ошибка:%1%2'"),
					Символы.ПС, ДанныеПоАбонентамОАТС.ТекстОшибки);
				СпособыУстранения = НСтр("ru='Проверьте корректность заполнения полей авторизации'");
			КонецЕсли;
		Иначе
			Если ДанныеПоАбонентамОАТС.Свойство("СписокПользователей")
				И ТипЗнч(ДанныеПоАбонентамОАТС.СписокПользователей) = Тип("Массив") Тогда
				ДанныеПроверки = ДанныеПоАбонентамОАТС.СписокПользователей;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();

		ЗаписьЖурналаРегистрации(
			ТелефонияСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ПричинаТекст = "";
		Если ТипЗнч( ИнформацияОбОшибке.Причина ) = Тип( "ИнформацияОбОшибке" ) Тогда
			ПричинаТекст = СтрШаблон("%1Причина: %2", Символы.ПС, ИнформацияОбОшибке.Причина.Описание);
		КонецЕсли;
		
		СтатусТекущейПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
		ЗаголовокПроверки = НСтр("ru='Загрузка списка пользователей АТС не выполнена'");
		
		РезультатПроверки = СтрШаблон(
			НСтр("ru='При попытке загрузки списка пользователей АТС произошла ошибка.
				|Текст ошибки: %1%2'"), ИнформацияОбОшибке.Описание, ПричинаТекст);
			
		СпособыУстранения = СтрШаблон(
			НСтр("ru='Проверьте корректность заполнения полей авторизации и перезапустите диагностику.
			|При наличии проблем обратитесь в службу технической поддержки.'"));
		
	КонецПопытки;
	
	ДобавитьРезультатПроверкиВСписок(
		РезультатыВсехПроверок,
		ТипГруппыПроверок,
		ТипПроверки,
		"Элемент",
		СтатусТекущейПроверки,
		ЗаголовокПроверки,
		РезультатПроверки,
		СпособыУстранения,,
		ДанныеПроверки);
		
КонецПроцедуры

// Выполняет проверку подключения к АТС Ростелеком.
//
// Параметры:
//  РезультатыВсехПроверок - Массив - результаты проверок по всем настройкам облачной телефонии.
//  ТипГруппыПроверок - Перечисление - наименование группы проверок к оторому будет отнесена проверка в структуре РезультатыВсехПроверок
//
Процедура ПроверкаПодключенияРостелеком (РезультатыВсехПроверок, ТипГруппыПроверок) Экспорт
	
	ТипПроверки = Перечисления.ТипыПроверокТелефонии.ПроверкаПодключенияАТС;
	УровеньПроверки = "Элемент";
	СтатусТекущейПроверки = Перечисления.СтатусПроверкиТелефонии.Успешно;
	ЗаголовокСообщения = НСтр("ru='Проверка подключения к АТС выполнена успешно.'");
	ТекстСообщения = Неопределено;
	СпособыУстранения = Неопределено;
	ДанныеПроверки = Неопределено;
	
	HTTPОтвет = Неопределено;
	АТС = Константы.ИспользуемаяАТС.Получить();
	ДанныеЗвонка = ТелефонияРостелеком.ПолучитьИнформациюОЗвонке();
	
	Если ЗначениеЗаполнено(ДанныеЗвонка.ЗаголовокОшибки) Тогда
		СтатусТекущейПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
		ЗаголовокСообщения = ДанныеЗвонка.ЗаголовокОшибки;
		ТекстСообщения = Неопределено;
		Если Не ЗначениеЗаполнено(ДанныеЗвонка.КодСостояния) Тогда
			СпособыУстранения = НСтр("ru='Проверьте корректность заполнения полей авторизации'");
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru='При вызове сервиса АТС произошла ошибка:%1%2'"), Символы.ПС, ДанныеЗвонка.ТекстОшибки);
			СпособыУстранения = НСтр("ru='Проверьте корректность заполнения полей авторизации'");
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьРезультатПроверкиВСписок(
		РезультатыВсехПроверок,
		ТипГруппыПроверок,
		ТипПроверки,
		УровеньПроверки,
		СтатусТекущейПроверки,
		ЗаголовокСообщения,
		ТекстСообщения,
		СпособыУстранения,,
		ДанныеПроверки);
		
КонецПроцедуры

// Выполняет сравнение списков пользователей АТС и УНФ для текущего оператора телефонии.
//
// Параметры:
//  РезультатыВсехПроверок - Массив - результаты проверок по всем настройкам облачной телефонии.
//
Процедура ПроверкаАбонентовОАТС(РезультатыВсехПроверок) Экспорт
	
	УровеньПроверки = "Группа";
	ТипГруппыПроверок = Перечисления.ТипыПроверокТелефонии.ПроверкаАбонентовАТС;
	
	// Проверка загруженного списка пользователей АТС на пустоту
	ТипПроверки = Перечисления.ТипыПроверокТелефонии.ПроверкаСпискаПользователейАТС;
	ЗаголовокСообщения = НСтр("ru='Список абонентов на стороне АТС заполнен'");
	ТекстСообщения = НСтр("ru='Список абонентов АТС заполнен.'");
	СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Успешно;
	
	РезультатыТекущейГруппыПроверок = Новый Массив;
	РезультатПроверкиПодключенияАТС = ПолучитьРезультатПроверки(РезультатыВсехПроверок,
		Перечисления.ТипыПроверокТелефонии.ПроверкаПодключенияАТС, "Группа");
	НаборЗаписей = РегистрыСведений.НастройкиПользователейТелефонии.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	СтатусПроверки = РезультатПроверкиПодключенияАТС.СтатусПроверки;
	Если СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Ошибка") Тогда
		ОшибкаПроверкиПодключения = ПолучитьОшибкуГруппы(РезультатыВсехПроверок,
			Перечисления.ТипыПроверокТелефонии.ПроверкаПодключенияАТС);
		ЗаголовокСообщения = ОшибкаПроверкиПодключения.ЗаголовокПроверки;
		ТекстСообщения = ОшибкаПроверкиПодключения.ТекстПроверки;
		СпособыУстранения = ОшибкаПроверкиПодключения.СпособыУстранения;
	ИначеЕсли СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Успешно") Тогда
		РезультатПроверкиЗагрузкиСписка = ПолучитьРезультатПроверки(РезультатыВсехПроверок,
			Перечисления.ТипыПроверокТелефонии.ПроверкаЗагрузкиАбонентовАТС, "Элемент");
		Если ТипЗнч(РезультатПроверкиЗагрузкиСписка.ДанныеПроверки) = Тип("Массив") Тогда
			Если РезультатПроверкиЗагрузкиСписка.ДанныеПроверки.Количество() = 0 Тогда
				ЗаголовокСообщения = НСтр("ru='Список абонентов на стороне АТС не заполнен'");
				ТекстСообщения = НСтр("ru='Список абонентов АТС не заполнен.'");
				СпособыУстранения = НСтр("ru='Добавьте SIP-пользователей на стороне АТС.'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьРезультатПроверкиВСписок(
		РезультатыТекущейГруппыПроверок,
		ТипГруппыПроверок,
		ТипПроверки,
		"Элемент",
		СтатусПроверки,
		ЗаголовокСообщения,
		ТекстСообщения,
		СпособыУстранения);
	
	
	// Проверка загруженного списка пользователей АТС с списком пользователей телефонии УНФ
	Если СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Успешно") Тогда
		ТипПроверки = Перечисления.ТипыПроверокТелефонии.ПроверкаСпискаПользователейУНФ;
		
	
		Если НаборЗаписей.Количество() > 0 Тогда
			СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Успешно;
			ЗаголовокСообщения = НСтр("ru='Список пользователей телефонии 1С:УНФ заполнен'");
			ТекстСообщения = ЗаголовокСообщения;
			СпособыУстранения = Неопределено;
		Иначе
			СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Предупреждение;
			ЗаголовокСообщения = НСтр("ru='Список пользователей телефонии не заполнен в 1С:УНФ'");
			ТекстСообщения = НСтр("ru='Список пользователей телефонии 1С:УНФ не заполнен.'");
			СпособыУстранения = НСтр("ru='Добавьте пользователей в настройках интеграции в разделе ''Пользователи телефонии''.'");
		КонецЕсли;
		
		ДобавитьРезультатПроверкиВСписок(
			РезультатыТекущейГруппыПроверок,
			ТипГруппыПроверок,
			ТипПроверки,
			"Элемент",
			СтатусПроверки,
			ЗаголовокСообщения,
			ТекстСообщения,
			СпособыУстранения);
			
	КонецЕсли;
	
	// Сравнение списков пользователей телефонии АТС и УНФ
	Если СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Успешно") Тогда
		ТипПроверки = Перечисления.ТипыПроверокТелефонии.СравнениеСписковПользователейТелефонии;
		
		ПропущенныеНомера = Новый Массив;
		ПропущенныеНомераТекст = "";
		Разделитель = Символы.Таб;
		ПользовательНайденВСпискеУНФ = Ложь;
		Для каждого ПользовательАТС Из РезультатПроверкиЗагрузкиСписка.ДанныеПроверки Цикл
			Для каждого ПользовательУНФ Из НаборЗаписей Цикл
				Если ПользовательУНФ.ВнутреннийНомер = ПользовательАТС.ВнутреннийНомер Тогда
					ПользовательНайденВСпискеУНФ = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ПользовательНайденВСпискеУНФ = Ложь Тогда
				ПропущенныеНомераТекст = ПропущенныеНомераТекст + СтрШаблон("%1%2%3", Разделитель, НСтр("ru='внутр. номер - '"),
					ПользовательАТС.ВнутреннийНомер);
				Разделитель = Символы.ПС + Символы.Таб;
			Иначе
				ПользовательНайденВСпискеУНФ = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		НезарегистрированныеНомера = Новый Массив;
		НезарегистрированныеНомераТекст = "";
		Разделитель = Символы.Таб;
		ПользовательНайденВСпискеАТС = Ложь;
		Для каждого ПользовательУНФ Из НаборЗаписей Цикл
			Для каждого ПользовательАТС Из РезультатПроверкиЗагрузкиСписка.ДанныеПроверки Цикл
				Если ПользовательУНФ.ВнутреннийНомер = ПользовательАТС.ВнутреннийНомер Тогда
					ПользовательНайденВСпискеАТС = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ПользовательНайденВСпискеАТС = Ложь Тогда
				НезарегистрированныеНомераТекст = НезарегистрированныеНомераТекст
					+ СтрШаблон("%1%2%3", Разделитель,НСтр("ru='внутр. номер - '"), ПользовательУНФ.ВнутреннийНомер);
				Разделитель = Символы.ПС + Символы.Таб;
			Иначе
				ПользовательНайденВСпискеАТС = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрДлина(ПропущенныеНомераТекст) > 0 ИЛИ СтрДлина(НезарегистрированныеНомераТекст) > 0 <> "" Тогда
			СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Предупреждение;
			
			Если СтрДлина(ПропущенныеНомераТекст) > 0 Тогда
				ЗаголовокСообщения = НСтр("ru='Не все абоненты АТС добавлены в список пользователей телефонии 1С:УНФ'");
				ТекстСообщения = СтрШаблон(
					НСтр("ru='Следующие абоненты АТС не добавлены в список пользователей телефонии 1С:УНФ:%1%2'"),
					Символы.ПС,
					ПропущенныеНомераТекст);
					
				СпособыУстранения = НСтр("ru='Добавьте абонентов АТС в список пользователей телефонии УНФ.'");
				ДобавитьРезультатПроверкиВСписок(
					РезультатыТекущейГруппыПроверок,
					ТипГруппыПроверок,
					ТипПроверки,
					"Элемент",
					СтатусПроверки,
					ЗаголовокСообщения,
					ТекстСообщения,
					СпособыУстранения);
			КонецЕсли;
				
			Если СтрДлина(НезарегистрированныеНомераТекст) > 0 Тогда
				ЗаголовокСообщения = НСтр("ru='Обнаружены незарегистрированные в АТС пользователи телефонии 1С:УНФ'");
				ТекстСообщения = СтрШаблон(
					НСтр("ru='Следующие пользователи телефонии УНФ не зарегистрированы на стороне АТС:%1%2'"),
					Символы.ПС,
					НезарегистрированныеНомераТекст);
				СпособыУстранения = НСтр("ru='Удалите из списка в УНФ не зарегистрированных в АТС пользователей телефонии.'");
				ДобавитьРезультатПроверкиВСписок(
					РезультатыТекущейГруппыПроверок,
					ТипГруппыПроверок,
					ТипПроверки,
					"Элемент",
					СтатусПроверки,
					ЗаголовокСообщения,
					ТекстСообщения,
					СпособыУстранения);
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавление заголовка текущей группы проверок в общий список проверок
	ОбщийСтатусГруппыПроверок = ПолучитьОбщийСтатусДляГруппыПроверок(РезультатыТекущейГруппыПроверок);
	
	ДобавитьРезультатПроверкиВСписок(
		РезультатыВсехПроверок,
		ТипГруппыПроверок,
		ТипГруппыПроверок,
		"Группа",
		ОбщийСтатусГруппыПроверок,
		НСтр("ru='Сравнение списков абонентов АТС'"));
		
	// Добавление всех результатов текущей группы проверок в общий список проверок
	ДополнитьРезультатыПроверок(РезультатыВсехПроверок, РезультатыТекущейГруппыПроверок);
	
КонецПроцедуры

// Выполняет проверку регистрации системы взаимодействия.
//
// Параметры:
//  УникальныйИдентификаторПроверки - Строка - идентификатор проверки используемый в дальнейшем при передачи результатов на форму запуска.
//  РезультатыВсехПроверок - Массив - результаты проверок по всем настройкам облачной телефонии.
//
Процедура ПроверкаСистемыВзаимодействия(УникальныйИдентификаторПроверки, РезультатыВсехПроверок) Экспорт
	
	ПроверкаВыполнена = Истина;
	ТипГруппыПроверок = Перечисления.ТипыПроверокТелефонии.ПроверкаСистемыВзаимодействия;
	СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Успешно;
	
	
	ТипПроверки = Перечисления.ТипыПроверокТелефонии.ПроверкаРегистрацииСистемыВзаимодействия;
	Ключ = "ТелефонияЖурналЗвонков";
	РезультатыТекущейГруппыПроверок = Новый Массив;
	
	Попытка
		
		Если СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
			ЗаголовокСообщения = НСтр("ru='Информационная база зарегистрирована'");
			ТекстСообщения = "";
		Иначе
			СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
			ЗаголовокСообщения = НСтр("ru='Информационная база не зарегистрирована'");
			ТекстСообщения = НСтр("ru='Система взаимодействия не активирована. Для автоматической обработки звонков (открытие карточки клиента и другие действия) система взаимодействия должна быть включена.'");
			СпособыУстранения = НСтр("ru='Необходимо включить настройку ''Автоматическая обработка звонков'' и зарегистрировать систему взаимодействия.'");
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			ТелефонияСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		
		СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
		ЗаголовокСообщения = НСтр("ru='Проверка регистрации информационной базы'");
		
		ПричинаТекст = "";
		Если ТипЗнч( ИнформацияОбОшибке.Причина ) = Тип( "ИнформацияОбОшибке" ) Тогда
			ПричинаТекст = СтрШаблон("%1Причина: %2", Символы.ПС, ИнформацияОбОшибке.Причина.Описание);
		КонецЕсли;
		ТекстСообщения = СтрШаблон(НСтр("ru='При проверке регистрации информационной базы произошла ошибка.
			|Текст ошибки: %1%2'"), ИнформацияОбОшибке.Описание, ПричинаТекст);
		
		СпособыУстранения = НСтр("ru='Обратитесь в службу технической поддержки'");
		
	КонецПопытки;
	
	ДобавитьРезультатПроверкиВСписок(
	РезультатыТекущейГруппыПроверок,
	ТипГруппыПроверок,
	ТипПроверки,
	"Элемент",
	СтатусПроверки,
	ЗаголовокСообщения,
	ТекстСообщения,
	СпособыУстранения);
	
	Если СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Успешно") Тогда
		
		ТипПроверки = Перечисления.ТипыПроверокТелефонии.ПроверкаПоискСистемыВзаимодействияПоКлючу;
		Обсуждение = Неопределено;
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Ключ);
			ЗаголовокСообщения = НСтр("ru='Обсуждение системы взаимодействия найдено'");
		Исключение
			ЗаголовокСообщения = НСтр("ru='Обсуждение системы взаимодействия по ключу не найдено'");
			ТекстСообщения = НСтр("ru='.'");
			СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
	
		ДобавитьРезультатПроверкиВСписок(
		РезультатыТекущейГруппыПроверок,
		ТипГруппыПроверок,
		ТипПроверки,
		"Элемент",
		СтатусПроверки,
		ЗаголовокСообщения,
		ТекстСообщения);
		
	КонецЕсли;
	
	Если СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Успешно") Тогда
		
		ТипПроверки = Перечисления.ТипыПроверокТелефонии.ПроверкаОтправкиСообщенияВСистемуВзаимодействия;
		ЗаголовокСообщения = НСтр("ru='Проверка отправки сообщения через систему взаимодействия'");
		ТекстСообщения = НСтр("ru='Возможна задержка в получении сообщения системы взаимодействия'");
		СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
		
		Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
			ШаблонСообщения = "ТипЗвонка=""[ТипЗвонка]""";
			ПараметрыСообщения = Новый Структура("ТипЗвонка", "Диагностика");
			ПараметрыСообщения.Вставить("УникальныйИдентификаторПроверки", УникальныйИдентификаторПроверки);
			
			ПараметрыСообщения = Новый Структура;
			ПараметрыСообщения.Вставить("ТипЗвонка", "Диагностика");
			ПараметрыСообщения.Вставить("УникальныйИдентификаторПроверки", УникальныйИдентификаторПроверки);
			ШаблонСообщения = "ТипЗвонка=""[ТипЗвонка]"";УникальныйИдентификаторПроверки=""[УникальныйИдентификаторПроверки]"";";
			ДанныеСообщения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСообщения, ПараметрыСообщения);
			ТелефонияСервер.ДобавитьСообщениеВСистемуВзаимодействия(ДанныеЗвонка, ДанныеСообщения);
		КонецЕсли;
		
		ДобавитьРезультатПроверкиВСписок(
		РезультатыТекущейГруппыПроверок,
		ТипГруппыПроверок,
		ТипПроверки,
		"Элемент",
		СтатусПроверки,
		ЗаголовокСообщения,
		ТекстСообщения);
		
	КонецЕсли;
	
	
	// Добавление заголовка текущей группы проверок в общий список проверок
	ОбщийСтатусГруппыПроверок = ПолучитьОбщийСтатусДляГруппыПроверок(РезультатыТекущейГруппыПроверок);
	ДобавитьРезультатПроверкиВСписок(
	РезультатыВсехПроверок,
	ТипГруппыПроверок,
	ТипГруппыПроверок,
	"Группа",
	ОбщийСтатусГруппыПроверок,
	НСтр("ru='Проверка системы взаимодействия'"));
	
	
	// Добавление всех результатов текущей группы проверок в общий список проверок
	ДополнитьРезультатыПроверок(РезультатыВсехПроверок, РезультатыТекущейГруппыПроверок);
	
КонецПроцедуры

// Возвращает общий статус для группы проверок. Если найдена хотя бы одна проверка с статусом ошибка, общий статус 
//
// Параметры:
//  УникальныйИдентификаторПроверки - Строка - идентификатор проверки используемый в дальнейшем при передачи результатов на форму запуска.
//  РезультатыТекущейГруппыПроверок - Структура - результаты проверок по всем настройкам облачной телефонии.
//
Функция ПолучитьОбщийСтатусДляГруппыПроверок(РезультатыТекущейГруппыПроверок) Экспорт
	
	ОбщийСтатус = Перечисления.СтатусПроверкиТелефонии.Успешно;
	
	Для каждого РезультатПроверки Из РезультатыТекущейГруппыПроверок Цикл
		
		Если РезультатПроверки.СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка Тогда
			Возврат РезультатПроверки.СтатусПроверки;
		ИначеЕсли РезультатПроверки.СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Предупреждение Тогда
			ОбщийСтатус = РезультатПроверки.СтатусПроверки;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ОбщийСтатус;
	
КонецФункции

// Создает xml файл с описанием значений всех настроек телефонии и статусами проверок.
//
// Параметры:
//  РезультатыВсехПроверок - Массив - результаты проверок по всем настройкам облачной телефонии.
//
// Возвращаемое значение:
//  ДанныеФайла - структура содержит имя файла и ссылку на размещение файла во временном хранилище.
//
Функция СохранитьОтчетПоДиагностике (РезультатыПроверок) Экспорт
	
	// Сохранение отчета по всем настройкам облачной телефонии
	ИмяФайлаНТ = КаталогВременныхФайлов() + "НастройкиТелефонии.xml";
	
	АТС = Константы.ИспользуемаяАТС.Получить();
	НастройкиТелефонии = ТелефонияСервер.ПолучитьНастройкиТелефонии();
	
	НаборЗаписей = РегистрыСведений.НастройкиПользователейТелефонии.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайлаНТ);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ОтчетПоДиагностикеТелефонии"); // Корневой элемент
	ЗаписьXML.ЗаписатьАтрибут("Дата", Строка(ТекущаяДата()));
	
		ЗаписьXML.ЗаписатьНачалоЭлемента("ВыбраннаяАТС");
			ЗаписьXML.ЗаписатьТекст(Строка(АТС));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("НастройкиТелефонии"); // Элемент Настройки телефонии начало
		
			ЗаписьXML.ЗаписатьНачалоЭлемента("НастройкиИнтеграции");
				ЗаписьXML.ЗаписатьНачалоЭлемента("АдресОблачнойАТС");
					ЗаписьXML.ЗаписатьТекст(НастройкиТелефонии.АдресОблачнойАТС);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьНачалоЭлемента("АдресПубликацииУНФ");
					ЗаписьXML.ЗаписатьТекст(ТелефонияСервер.АдресОбратногоВызоваОблачнаяТелефония(АТС));
				ЗаписьXML.ЗаписатьКонецЭлемента();
				Если АТС = ПредопределенноеЗначение("Перечисление.ДоступныеАТС.Билайн") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("ТокенАвторизации");
						ЗаписьXML.ЗаписатьТекст(НастройкиТелефонии.КлючДляАвторизацииВАТСБилайн);
					ЗаписьXML.ЗаписатьКонецЭлемента();
				ИначеЕсли АТС = ПредопределенноеЗначение("Перечисление.ДоступныеАТС.ДомRu") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("КлючДляАвторизацииВОблачнойАТС");
						ЗаписьXML.ЗаписатьТекст(НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
					ЗаписьXML.ЗаписатьКонецЭлемента();
					ЗаписьXML.ЗаписатьНачалоЭлемента("КлючДляАвторизацииВУНФ");
						ЗаписьXML.ЗаписатьТекст(НастройкиТелефонии.КлючДляАвторизацииВУНФ);
					ЗаписьXML.ЗаписатьКонецЭлемента();
				ИначеЕсли АТС = ПредопределенноеЗначение("Перечисление.ДоступныеАТС.MangoOffice") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("УНикальныйКодАТС");
						ЗаписьXML.ЗаписатьТекст(НастройкиТелефонии.vpbx_api_key);
					ЗаписьXML.ЗаписатьКонецЭлемента();
					ЗаписьXML.ЗаписатьНачалоЭлемента("КлючДляСОзданияПодписи");
						ЗаписьXML.ЗаписатьТекст(НастройкиТелефонии.vpbx_api_salt);
					ЗаписьXML.ЗаписатьКонецЭлемента();
				ИначеЕсли АТС = ПредопределенноеЗначение("Перечисление.ДоступныеАТС.Ростелеком") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("УникальныйКодИдентификации");
						ЗаписьXML.ЗаписатьТекст(НастройкиТелефонии.УникальныйКодИдентификации);
					ЗаписьXML.ЗаписатьКонецЭлемента();
					ЗаписьXML.ЗаписатьНачалоЭлемента("УникальныйКлючДляПодписи");
						ЗаписьXML.ЗаписатьТекст(НастройкиТелефонии.УникальныйКлючДляПодписи);
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Пользователи"); // Элемент Пользователи начало
				Для каждого Запись Из НаборЗаписей Цикл
					ЗаписьXML.ЗаписатьНачалоЭлемента("Пользователь");
					
						ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
						ЗаписьXML.ЗаписатьТекст(Запись.Пользователь.Наименование);
						ЗаписьXML.ЗаписатьКонецЭлемента();
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("ВнутренниНомер");
						ЗаписьXML.ЗаписатьТекст(Запись.ВнутреннийНомер);
						ЗаписьXML.ЗаписатьКонецЭлемента();
						
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Элемент Пользователи завершение
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("ОбработкаЗвонков"); // Элемент Обработка звонков начало
			
				ЗаписьXML.ЗаписатьНачалоЭлемента("АвтоматическаяОбработкаЗвонков");
				ЗаписьXML.ЗаписатьТекст(Строка(СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована()));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			
				ЗаписьXML.ЗаписатьНачалоЭлемента("ДействияПриВходящемЗвонке");
				ЗаписьXML.ЗаписатьТекст("");
				
					ЗаписьXML.ЗаписатьНачалоЭлемента("ОтИзвестногоАбонента");
					ЗаписьXML.ЗаписатьТекст(Строка(НастройкиТелефонии.ДействиеТекущегоЗвонкаНайденногоАбонента));
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("ОтНеизвестногоАбонента");
					ЗаписьXML.ЗаписатьТекст(Строка(НастройкиТелефонии.ДействиеТекущегоЗвонкаНеизвестногоАбонента));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("ДействияПриИсходящемЗвонке");
				ЗаписьXML.ЗаписатьТекст(Строка(НастройкиТелефонии.ДействиеИсходящегоЗвонка));
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("ОтветственныйЗаПропущенныйЗвонок");
					ЗаписьXML.ЗаписатьНачалоЭлемента("ДействиеПропущенногоЗвонка");
					ЗаписьXML.ЗаписатьТекст(Строка(НастройкиТелефонии.ДействиеПропущенногоЗвонка));
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("СлужебныйПользовательДляПропущенногоЗвонка");
					ЗаписьXML.ЗаписатьТекст(Строка(НастройкиТелефонии.СлужебныйПользовательДляПропущенногоЗвонка));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Элемент Обработка звонков завершение
			
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Элемент Настройки телефонии завершение
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("РезультатыДиагностики"); // Элемент РезультатыДиагностики начало
		ТекущаяГруппа = "";
		Для каждого Проверка Из РезультатыПроверок Цикл
			Если Проверка.УровеньПроверки = "Группа" Тогда
				Если ТекущаяГруппа <> "" Тогда
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
				ТекущаяГруппа = Строка(Проверка.ТипГруппыПроверок);
				ЗаписьXML.ЗаписатьНачалоЭлемента("ГруппаПроверок"); // Элемент Группа проверок
				ЗаписьXML.ЗаписатьАтрибут("Наименование", СтрЗаменить(Строка(Проверка.ТипГруппыПроверок), " ", "_"));
			Иначе
				ЗаписьXML.ЗаписатьНачалоЭлемента("Проверка"); // Элемент Проверка начало
				
					ЗаписьXML.ЗаписатьАтрибут("Наименование", СтрЗаменить(Строка(Проверка.ТипПроверки), " ", "_"));
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("СтатусПроверки");
					ЗаписьXML.ЗаписатьТекст(Строка(Проверка.СтатусПроверки));
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("Заголовок");
					ЗаписьXML.ЗаписатьТекст(Проверка.ЗаголовокСообщения);
					ЗаписьXML.ЗаписатьКонецЭлемента();
						
					Если Проверка.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Успешно") Тогда
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("ТекстОшибки");
						ЗаписьXML.ЗаписатьТекст(Проверка.ТекстСообщения);
						ЗаписьXML.ЗаписатьКонецЭлемента();
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("СпособыУстранения");
						ЗаписьXML.ЗаписатьТекст(Проверка.СпособыУстранения);
						ЗаписьXML.ЗаписатьКонецЭлемента();
						
					КонецЕсли;
					
				ЗаписьXML.ЗаписатьКонецЭлемента(); // Элемент Проверка завершение
				
			КонецЕсли;
		
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Элемент Группа проверок (последняя) завершение
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Элемент РезультатыДиагностики завершение
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Корневой элемент завершение
	ЗаписьXML.Закрыть();
	
	// Выгрузка Журнала регистрации с отбором по событиям телефонии
	События = Новый Массив;
	События.Добавить(НСтр("ru = 'Телефония.ЗагрузкаСпискаАбонентовВАТСБилайн'"));
	События.Добавить(НСтр("ru = 'Телефония.ЗапросНовойПодпискиНаСобытия'"));
	События.Добавить(НСтр("ru = 'Телефония.ЗапросПодпискиНаСобытия'"));
	События.Добавить(НСтр("ru = 'Телефония.ИнициализацияИсходящегоВызова'"));
	События.Добавить(НСтр("ru = 'Телефония.ЗапросНовойПодпискиНаСобытия'"));
	События.Добавить(НСтр("ru = 'Телефония.ИзменениеДоступаСлужебногоПользователя'"));
	События.Добавить(НСтр("ru = 'Телефония.ОбновлениеПодпискиНаСобытия'"));
	События.Добавить(НСтр("ru = 'Телефония.ОбновлениеСтатусаПодключения'"));
	События.Добавить(НСтр("ru = 'Телефония.ПроверкаНастроекПодключения'"));
	События.Добавить(НСтр("ru = 'Телефония.СозданиеСлужебногоПользователя'"));
	
	Отбор = Новый Структура("ДатаНачала, ДатаОкончания, Событие");
	Отбор.ДатаНачала = НачалоДня(ТекущаяДата()-86400);
	Отбор.ДатаОкончания = КонецДня(ТекущаяДата());
	Отбор.Вставить("Событие", События);
	
	СобытияЖурнала = Новый ТаблицаЗначений;
	ИмяФайлаЖР = КаталогВременныхФайлов() + "ЖурналРегистрации.xml";
	ВыгрузитьЖурналРегистрации(ИмяФайлаЖР, Отбор);
	
	ВременныйФайлАрхив = ПолучитьИмяВременногоФайла("zip");
	ИмяФайлаАрхива = СтрШаблон("%1.zip",СтрШаблон("ДиагностикаТелефонии_%1", СтрЗаменить(СтрЗаменить(СтрЗаменить(ТекущаяДата(),".",""),":","")," ","")));
	
	Архив = Новый ЗаписьZipФайла(ВременныйФайлАрхив);
	Архив.Добавить(ИмяФайлаНТ, РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Архив.Добавить(ИмяФайлаЖР, РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Архив.Записать();
	
	ДвоичныеДанныеЗаполненногоФайла = Новый ДвоичныеДанные(ВременныйФайлАрхив);
	ДанныеФайла = Новый Структура();
	ДанныеФайла.Вставить("ИмяФайла", ИмяФайлаАрхива);
	ДанныеФайла.Вставить("СсылкаНаДвоичныеДанныеФайла", ПоместитьВоВременноеХранилище(ДвоичныеДанныеЗаполненногоФайла, Новый УникальныйИдентификатор));
	
	УдалитьФайлы(ИмяФайлаНТ);
	УдалитьФайлы(ИмяФайлаНТ);
	УдалитьФайлы(ВременныйФайлАрхив);
	
	Возврат ДанныеФайла;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПроверкаПолейАвторизацииОАТС(ТипГруппыПроверок)
	
	АТС = Константы.ИспользуемаяАТС.Получить();
	Возврат ТелефонияСервер.МодульИнтеграции(АТС).ПроверкаПолейАвторизацииОАТС(ТипГруппыПроверок);
	
КонецФункции

Процедура ДобавитьРезультатПроверкиВСписок(
	РезультатыПроверок,
	ТипГруппыПроверок,
	ТипПроверки,
	УровеньПроверки,
	СтатусПроверки,
	ЗаголовокПроверки = Неопределено,
	ТекстПроверки = Неопределено,
	СпособыУстранения = Неопределено,
	Инструкция = Неопределено,
	ДанныеПроверки = Неопределено) Экспорт
	
	Если УровеньПроверки = "Группа" Тогда
		
		РезультатПроверки = СоздатьРезультатПроверки(
			ТипГруппыПроверок,
			ТипПроверки,
			УровеньПроверки,
			СтатусПроверки,
			ЗаголовокПроверки,,
			ТекстПроверки,
			СпособыУстранения,
			Инструкция,
			ДанныеПроверки);
			
	ИначеЕсли УровеньПроверки = "Элемент" Тогда
			
		РезультатПроверки = СоздатьРезультатПроверки(
			ТипГруппыПроверок,
			ТипПроверки,
			УровеньПроверки,
			СтатусПроверки,,
			ЗаголовокПроверки,
			ТекстПроверки,
			СпособыУстранения,
			Инструкция,
			ДанныеПроверки);
			
	КонецЕсли;
	РезультатыПроверок.Добавить(РезультатПроверки);
	
КонецПроцедуры

Функция СоздатьРезультатПроверки(
	ТипГруппыПроверок,
	ТипПроверки,
	УровеньПроверки,
	СтатусПроверки,
	ЗаголовокГруппыПроверок = Неопределено,
	ЗаголовокПроверки = Неопределено,
	ТекстПроверки = Неопределено,
	СпособыУстранения = Неопределено,
	Инструкция = Неопределено,
	ДанныеПроверки = Неопределено) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ТипГруппыПроверок", ТипГруппыПроверок);
	РезультатПроверки.Вставить("ТипПроверки", ТипПроверки);
	РезультатПроверки.Вставить("УровеньПроверки", УровеньПроверки);
	РезультатПроверки.Вставить("СтатусПроверки", СтатусПроверки);
	РезультатПроверки.Вставить("ЗаголовокГруппыПроверок", ЗаголовокГруппыПроверок);
	РезультатПроверки.Вставить("ЗаголовокПроверки", ЗаголовокПроверки);
	РезультатПроверки.Вставить("ТекстПроверки", ТекстПроверки);
	РезультатПроверки.Вставить("СпособыУстранения", СпособыУстранения);
	РезультатПроверки.Вставить("Инструкция", Инструкция);
	РезультатПроверки.Вставить("ДанныеПроверки", ДанныеПроверки);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьОбязательноеПоле(РезультатыПроверок, ТипГруппыПроверок, НаименованиеПоля, ЗначениеПоля) Экспорт
	
	ТипПроверки = Перечисления.ТипыПроверокТелефонии.ПроверкаОбязательныхПолей;
	СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Успешно;
	ЗаголовокСообщения = СтрШаблон(НСтр("ru='Поле ''%1'' заполнено'"), НаименованиеПоля);
	ТекстСообщения = Неопределено;
	СпособыУстранения = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
		СтатусПроверки = Перечисления.СтатусПроверкиТелефонии.Ошибка;
		ЗаголовокСообщения = СтрШаблон(НСтр("ru='Поле ''%1'' не заполнено'"), НаименованиеПоля);
		ТекстСообщения = СтрШаблон(НСтр("ru='Поле ''%1'' не заполнено'"), НаименованиеПоля);
		СпособыУстранения  = СтрШаблон(НСтр("ru='Заполните поле ''%1''. Значение поля можно найти в личном кабинете АТС в настройках интеграции CRM.'"), НаименованиеПоля);
	КонецЕсли;
		
	ТелефонияДиагностика.ДобавитьРезультатПроверкиВСписок(
		РезультатыПроверок,
		ТипГруппыПроверок,
		ТипПроверки,
		"Элемент",
		СтатусПроверки,
		ЗаголовокСообщения,
		ТекстСообщения,
		СпособыУстранения);
		
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПолучитьРезультатПроверки(РезультатыВсехПроверок, ТипПроверки, УровеньПроверки)
	
	Для каждого Проверка Из РезультатыВсехПроверок Цикл
		
		Если Проверка.ТипПроверки = ТипПроверки
			И Проверка.УровеньПроверки = УровеньПроверки Тогда
			Возврат Проверка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьОшибкуГруппы(РезультатыВсехПроверок, ТипГруппыПроверок)
	
	Для каждого Проверка Из РезультатыВсехПроверок Цикл
		
		Если Проверка.ТипГруппыПроверок = ТипГруппыПроверок И Проверка.УровеньПроверки = "Элемент"
			И Проверка.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиТелефонии.Ошибка") Тогда
			Возврат Проверка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПроверитьАдресНаНаличиеНедопустимыхСимволов(АдресПринимающегоСервиса)
	
	НайденныеНедопустимыеСимволы = "";
	НедопустимыеСимволы = "!#&',;<>?[]`{}| ";
	
	Для Индекс = 1 По СтрДлина(НедопустимыеСимволы) Цикл
		Символ = Сред(НедопустимыеСимволы, Индекс, 1);
		Если СтрНайти(АдресПринимающегоСервиса, Символ) > 0 Тогда
			НайденныеНедопустимыеСимволы = СтрШаблон(НСтр("ru='%1 ""%2"" '"), НайденныеНедопустимыеСимволы, Символ);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат НайденныеНедопустимыеСимволы;

КонецФункции

#КонецОбласти