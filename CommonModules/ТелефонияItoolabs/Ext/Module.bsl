
#Область СлужебныйПрограммныйИнтерфейс

//@skip-warning
Процедура ПриОпределенииНастроекИнтеграции(НастройкиИнтеграции) Экспорт
	
	НастройкиИнтеграции.Проверки.Вставить("ПроверкаОбязательныхПолей", Истина);
	НастройкиИнтеграции.Проверки.Вставить("ПроверкаСлужебногоПользователя", Истина);
	НастройкиИнтеграции.Проверки.Вставить("ПроверкаПубликуемогоСервиса", Истина);
	НастройкиИнтеграции.Проверки.Вставить("ПроверкаПодключенияАТС", Истина);
	НастройкиИнтеграции.Проверки.Вставить("ПроверкаСистемыВзаимодействия", Истина);
	НастройкиИнтеграции.Проверки.Вставить("ПроверкаАбонентовАТС", Истина);
	
КонецПроцедуры

Функция КорневойАдрес() Экспорт
	
	Возврат ТелефонияСервер.ПолучитьНастройкиТелефонии().АдресОблачнойАТС;
	
КонецФункции

Функция ШаблонURLHTTPСервиса() Экспорт
	
	Возврат "itoolabs";
	
КонецФункции

Функция ЗапросИсходящегоВызова(НомерКонтакта, НастройкиТелефонии) Экспорт
	
	ПараметрыОтправки = ОтправкаЗапросов.НовыйПараметрыОтправки();
	ПараметрыОтправки.Сервер = КорневойАдрес();
	ПараметрыОтправки.ПараметрыТела.Вставить("cmd",   "makeCall");
	ПараметрыОтправки.ПараметрыТела.Вставить("phone", НомерКонтакта);
	ПараметрыОтправки.ПараметрыТела.Вставить("user",  НастройкиТелефонии.НастройкиТекущегоПользователя.ВнутреннийНомер);
	ПараметрыОтправки.ПараметрыТела.Вставить("token", НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
	Возврат ПараметрыОтправки;
	
КонецФункции

Процедура ОбработатьОтветЗапросаИсходящегоВызова(HttpОтвет, НастройкиТелефонии, Результат) Экспорт
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Возврат;
	КонецЕсли;
	
	Результат.ЗаголовокОшибки = РасшифровкаОшибки(HTTPОтвет.КодСостояния);
	Результат.ТекстОшибки = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	
КонецПроцедуры

// Возвращает структуру параметров отправки используемых для вызова сервиса.
//
// Параметры:
//  НастройкиТелефонии - Структура - значения настроек облачной телефонии.
//
// Возвращаемое значение:
//  Структура - параметры отправки используемых для вызова сервиса.
//
Функция ЗапросСпискаПользователей(НастройкиТелефонии) Экспорт
	
	ПараметрыОтправки = ОтправкаЗапросов.НовыйПараметрыОтправки();
	ПараметрыОтправки.Сервер = КорневойАдрес();
	ПараметрыОтправки.ПараметрыТела.Вставить("cmd",   "accounts");
	ПараметрыОтправки.ПараметрыТела.Вставить("token", НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
	
	Возврат ПараметрыОтправки;
	
КонецФункции

// Выполняет проверку результата вызова сервиса получения списка абонентов АТС.
//
// Параметры:
//  HttpОтвет - Структура - данные ответа выполненного сервиса получения списка абонентов АТС.
//  НастройкиТелефонии - Структура - значения настроек облачной телефонии.
//  Результат - Структура - данные с результатами обработки ответа сервиса, включая список абонентов АТС
//
Процедура ОбработатьОтветЗапросаСпискаПользователей(HttpОтвет, НастройкиТелефонии, Результат) Экспорт
	
	ТелоОтвета = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	Результат.КодСостояния = HTTPОтвет.КодСостояния;
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		Результат.ЗаголовокОшибки = НСтр("ru='Ошибка при инициализации вызова.'");
		Результат.ТекстОшибки = ТелоОтвета;
	Иначе
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
		ПараметрыОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		СписокПользователей = Новый Массив;
		Если ТипЗнч(ПараметрыОтвета) = Тип("Массив") Тогда
			Для каждого Пользователь Из ПараметрыОтвета Цикл
				Если Пользователь.Свойство("name")
					И Пользователь.Свойство("ext") Тогда
					
					ПользовательАТС = Новый Структура("ИмяПользователя, ВнутреннийНомер");
					ПользовательАТС.ИмяПользователя = Пользователь.name;
					ПользовательАТС.ВнутреннийНомер = Пользователь.ext;
					СписокПользователей.Добавить(ПользовательАТС);
				КонецЕсли;
			
			КонецЦикла;
		КонецЕсли;
		
		Результат.СписокПользователей = СписокПользователей;
	КонецЕсли;
	
КонецПроцедуры

Функция КорректнаяПодписьЗапроса(ПодписьЗапроса, ПараметрыЗапроса = Неопределено) Экспорт
	
	НастройкиТелефонии = ТелефонияСервер.ПолучитьНастройкиТелефонии();
	КлючДляАвторизации = НастройкиТелефонии.КлючДляАвторизацииВУНФ;
	Возврат ПодписьЗапроса = КлючДляАвторизации;
	
КонецФункции

Функция НастройкиИнтеграцииЗаполнены(АТС, НастройкиТелефонии) Экспорт
	
	Возврат ЗначениеЗаполнено(НастройкиТелефонии.АдресОблачнойАТС)
		И ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС)
		И ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииВУНФ);
	
КонецФункции

Функция СсылкаНаЗаписьРазговора(ДанныеЗвонка, Ошибка) Экспорт
	
	Возврат ДанныеЗвонка.ЗаписьРазговора.Ссылка;
	
КонецФункции

// Выполняет проверку подключения к ВАТС.
//
Процедура ПроверкаПодключения() Экспорт
	
	Возврат;
	
КонецПроцедуры

#Область ПроцедурыИФункцииДиагностикиПодключения

Функция ПроверкаПолейАвторизацииОАТС(ТипГруппыПроверок) Экспорт
	
	НастройкиТелефонии = ТелефонияСервер.ПолучитьНастройкиТелефонии();
	
	РезультатыТекущейПроверки = Новый Массив;
	ТелефонияДиагностика.ПроверитьОбязательноеПоле(
		РезультатыТекущейПроверки,
		ТипГруппыПроверок,
		НСтр("ru='Ключ для авторизации в облачной АТС'"),
		НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
	
	ТелефонияДиагностика.ПроверитьОбязательноеПоле(
		РезультатыТекущейПроверки,
		ТипГруппыПроверок,
		НСтр("ru='Ключ для авторизации в 1С:УНФ'"),
		НастройкиТелефонии.КлючДляАвторизацииВУНФ);
		
	Возврат РезультатыТекущейПроверки;
	
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Будет удалена в следующей версии программы.
//
Процедура ПриСозданииИсходящегоВызова(НомерАбонента, ДанныеПользователяАТС, НастройкиТелефонии, ПараметрыОтправки, Ошибка) Экспорт
	
	ПараметрыОтправки.ПараметрыТела.Вставить("cmd",   "makeCall");
	ПараметрыОтправки.ПараметрыТела.Вставить("phone", НомерАбонента);
	ПараметрыОтправки.ПараметрыТела.Вставить("user",  ДанныеПользователяАТС.ВнутреннийНомер);
	ПараметрыОтправки.ПараметрыТела.Вставить("token", НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
	
КонецПроцедуры

// Устарела. Будет удалена в следующей версии программы.
//
Процедура ПриОбработкеОтветаНаСозданиеИсходящегоВызова(HTTPОтвет, ЗаголовокОшибки, ТекстОшибки) Экспорт
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокОшибки = РасшифровкаОшибки(HTTPОтвет.КодСостояния);
	ТекстОшибки = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РасшифровкаОшибки(Код)
	
	Если Код = 400 Тогда
		Возврат НСтр("ru='Переданы некорректные параметры'");
	ИначеЕсли Код = 401 Тогда
		Возврат НСтр("ru='Передан неверный ключ (token)'");
	Иначе
		Возврат НСтр("ru='Неизвестная ошибка'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти
