#Область ПрограммныйИнтерфейс
Процедура КэшЗаписать( Ключ, Значение, ДатаАктуальности = Неопределено ) Экспорт
	
	МаксимальнаяДлинаКлюча = ИнтеграцияКэшКлиентСервер.МаксимальнаяДлинаКлючаПолучить();

	КлючДлина = СтрДлина( Ключ );
	Если КлючДлина > МаксимальнаяДлинаКлюча Тогда
		ВызватьИсключение "ИнтеграцияКэшСервер.КэшЗаписать: Ошибка: Длина ключа больше максимальной, "
		 + КлючДлина + " > " + МаксимальнаяДлинаКлюча + ": " + Ключ;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено( ДатаАктуальности ) Тогда
		ДатаАктуальности = ДатаАктуальностиКэшаПоУмолчанию();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим( Истина );
	
	РегистрыСведенийИнтеграцияКэшЗначенийЗапись = РегистрыСведений.ИнтеграцияКэшЗначений.СоздатьМенеджерЗаписи();
	
	РегистрыСведенийИнтеграцияКэшЗначенийЗапись.Ключ = Ключ;
	РегистрыСведенийИнтеграцияКэшЗначенийЗапись.Значение = Новый ХранилищеЗначения( Значение, Новый СжатиеДанных( 9 ) );
	РегистрыСведенийИнтеграцияКэшЗначенийЗапись.ДатаОбновления = ТекущаяДатаСеанса();
	РегистрыСведенийИнтеграцияКэшЗначенийЗапись.ДатаАктуальности = ДатаАктуальности;
	
	РегистрыСведенийИнтеграцияКэшЗначенийЗапись.Записать( Истина );
	
	УстановитьПривилегированныйРежим( Ложь );
	
КонецПроцедуры

Функция КэшПолучить( Ключ ) Экспорт
	
	МаксимальнаяДлинаКлюча = ИнтеграцияКэшКлиентСервер.МаксимальнаяДлинаКлючаПолучить();

	КлючДлина = СтрДлина( Ключ );
	Если КлючДлина > МаксимальнаяДлинаКлюча Тогда
		ВызватьИсключение "ИнтеграцияКэшСервер.КэшПолучить: Ошибка: Длина ключа больше максимальной, "
		 + КлючДлина + " > " + МаксимальнаяДлинаКлюча + ": " + Ключ;
	КонецЕсли;
	
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим( Истина );
	ЗапросТекст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИнтеграцияКэшЗначений.Значение КАК Значение,
	|	ИнтеграцияКэшЗначений.ДатаОбновления КАК ДатаОбновления
	|ИЗ
	|	РегистрСведений.ИнтеграцияКэшЗначений КАК ИнтеграцияКэшЗначений
	|ГДЕ
	|	ИнтеграцияКэшЗначений.Ключ = &Ключ
	|	И ИнтеграцияКэшЗначений.ДатаАктуальности >= &ДатаАктуальностиКэша";
	
	ЗапросОбъект = Новый Запрос( ЗапросТекст );
	
	ЗапросОбъект.УстановитьПараметр( "Ключ", Ключ );
	
	ДатаАктуальностиКэша = ТекущаяДатаСеанса();
	ЗапросОбъект.УстановитьПараметр( "ДатаАктуальностиКэша", ДатаАктуальностиКэша );
	
	ЗапросВыборка = ЗапросОбъект.Выполнить().Выбрать();
	Если ЗапросВыборка.Следующий() = Истина Тогда
		Результат = ЗапросВыборка.Значение.Получить();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим( Ложь );
	
	Возврат Результат;
КонецФункции

Функция ДатаАктуальностиКэшаПоУмолчанию() Экспорт
	Возврат ДобавитьМесяц( ТекущаяДатаСеанса(), 1 );
КонецФункции

Процедура КэшУдалитьНеактуальныеЗначения() Экспорт

	УстановитьПривилегированныйРежим( Истина );

	ЗапросТекст = 
	"ВЫБРАТЬ
	|	ИнтеграцияКэшЗначений.Ключ КАК Ключ
	|ИЗ
	|	РегистрСведений.ИнтеграцияКэшЗначений КАК ИнтеграцияКэшЗначений
	|ГДЕ
	|	ИнтеграцияКэшЗначений.ДатаАктуальности < &ДатаАктуальностиКэша";
	
	ЗапросОбъект = Новый Запрос( ЗапросТекст );
	
	ДатаАктуальностиКэша = ТекущаяДатаСеанса();
	ЗапросОбъект.УстановитьПараметр( "ДатаАктуальностиКэша", ДатаАктуальностиКэша );
	
	ЗапросРезультат = ЗапросОбъект.Выполнить();
	Если ЗапросРезультат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
	
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить( "РегистрСведений.ИнтеграцияКэшЗначений" );
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировкиДанных.ИсточникДанных = ЗапросРезультат;
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных( "Ключ", "Ключ" );
		БлокировкаДанных.Заблокировать();
		
		ЗапросВыборка = ЗапросРезультат.Выбрать();
		НаборЗаписей = РегистрыСведений.ИнтеграцияКэшЗначений.СоздатьНаборЗаписей();
		Пока ЗапросВыборка.Следующий() Цикл
			НаборЗаписей.Отбор.Ключ.Установить( ЗапросВыборка.Ключ, Истина );
			НаборЗаписей.Записать( Истина );
		КонецЦикла;

		ЗафиксироватьТранзакцию();
		
	Исключение
	
		ОтменитьТранзакцию();

		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЛогКомментарий = "КэшУдалитьНеактуальныеЗначения: Ошибка: " + ПодробноеПредставлениеОшибки;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, , Истина );
	КонецПопытки;
	УстановитьПривилегированныйРежим( Ложь );
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
