#Область ПрограммныйИнтерфейс

// Возвращает фиксированное соответствие задач календаря отчетности
// именам объектов регламентированной отчетности
//
// Возвращает:
//		ФиксированноеСоответствие
//			Ключ: СправочникСсылка.ЗадачиКалендаряОтчетности
//			Значение: Строка
//
Функция ПолучитьСоответствиеЗадачОтчетностиИменамОтчетов(ДатаОкончанияДокументов = '00010101') Экспорт
	
	СоответствиеОтчетов = Новый Соответствие;
	СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоУСН"), "РегламентированныйОтчетУСН");
	СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоЕНВД"), "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход");
	СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.СреднесписочнаяЧисленность"), "РегламентированныйОтчетСведенияОСреднесписочнойЧисленностиРаботников");
	СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.ОтчетностьВПФР"), "РегламентированныйОтчетРСВ1");
	Если ДатаОкончанияДокументов > '20230101' Тогда		
		СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.Форма4ФСС"), "РегламентированныйОтчетЕФС1ОСС");	
	Иначе	
		СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.Форма4ФСС"), "РегламентированныйОтчет4ФСС");   
	КонецЕсли;		
	СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.Форма1Предприниматель"), "РегламентированныйОтчетСтатистикаФорма1Предприниматель");
	Если ДатаОкончанияДокументов > '20210101' Тогда
		СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.Форма6НДФЛ"), "РегламентированныйОтчет6_НДФЛ");
	Иначе
		СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.Форма6НДФЛ"), "РегламентированныйОтчет6НДФЛ");
	КонецЕсли; 
	СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.Декларация8"), "РегламентированныйОтчетАлкоПриложение26");
	СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.Декларация12"), "РегламентированныйОтчетАлкоПриложение12");
	СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.РасчетПоСтраховымВзносам"), "РегламентированныйОтчетРасчетПоСтраховымВзносам"); 
	СоответствиеОтчетов.Вставить(ПредопределенноеЗначение("Справочник.ЗадачиКалендаряПодготовкиОтчетности.ПерсСведенияОФизлицах"), "РегламентированныйОтчетПерсонифицированныеСведенияОФизическихЛицах");
	
	Возврат Новый ФиксированноеСоответствие(СоответствиеОтчетов);
	
КонецФункции

// Формирует назначения платежей по УСН
//
Функция ПолучитьТекстНазначенияПлатежаНалогаПоДате(Дата, ВидВзаиморасчетов, РегНомерПФР="", РегНомерФСС="") Экспорт
	
	Если ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.АвансовыйПлатежПриУСН")
		ИЛИ ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ЕдиныйНалогПриУСН")
		ИЛИ ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.АвансовыйПлатежПриУСНРасходы")
		ИЛИ ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ЕдиныйНалогПриУСНРасходы") Тогда
		
		
		ПериодПлатежа = "";
		
		Если Месяц(Дата) = 12 Тогда
			ПериодПлатежа = Формат(Год(Дата),"ЧГ=") + " год";
		ИначеЕсли Месяц(Дата) = 3 Тогда
			ПериодПлатежа = "3 месяца " + Формат(Год(Дата), "ЧГ=") + " года";
		ИначеЕсли Месяц(Дата) = 6 Тогда
			ПериодПлатежа = "I полугодие " + Формат(Год(Дата), "ЧГ=") + " года";
		Иначе
			ПериодПлатежа = "9 месяцев " + Формат(Год(Дата), "ЧГ=") + " года";
		КонецЕсли;
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Уплата единого налога за %1. Без НДС.",
		ПериодПлатежа);
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.АУСН") Тогда
		
		ПериодПлатежа = Нрег(Формат(Дата,"ДФ='ММММ гггг'")) + " г";
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Налог при Автоматизированной упрощенной системе налогообложения %1",
		ПериодПлатежа);
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ЕНВД") Тогда
		
		ПериодПлатежа = Формат(Дата,"ДФ='q ""квартал"" yyyy ""г.""'");
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Уплата ЕНВД за %1 Без НДС.",
			ПериодПлатежа);
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ТорговыйСбор") Тогда
		
		ПериодПлатежа = Формат(Дата,"ДФ='q ""квартал"" yyyy ""г.""'");
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Уплата торгового сбора за %1 Без НДС.",
			ПериодПлатежа);
		
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРНакопительная") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Рег. номер в ПФР: %1. Страховые взносы в виде фиксированного платежа на накопительную часть трудовой пенсии за %2. НДС не облагается.",
			РегНомерПФР,
			Формат(Год(Дата),"ЧГ=") + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРСтраховая") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Рег. номер в ПФР: %1. Страховые взносы в виде фиксированного платежа на страховую часть трудовой пенсии за %2. НДС не облагается.",
			РегНомерПФР,
			Формат(Год(Дата),"ЧГ=") + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРСвыше300тр") Тогда
		
		Возврат НСтр("ru = 'Страховые взносы, исчисленные с суммы дохода'");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ТФОМС") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Страховые взносы на ОМС - ТФОМС за %2. Регистрационный номер в ПФР: %1. НДС не облагается.",
			РегНомерПФР,
			Формат(Год(Дата),"ЧГ=") + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ФФОМС") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Страховые взносы на ОМС - ФФОМС за %2. Регистрационный номер в ПФР: %1. НДС не облагается.",
			РегНомерПФР,
			Формат(Год(Дата),"ЧГ=") + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРНакопительнаяСотрудники") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Рег. номер в ПФР: %1. Страховые взносы на ОПС на накопительную часть трудовой пенсии за %2. НДС не облагается.",
			РегНомерПФР,
			Нрег(Формат(Дата,"ДФ='ММММ гггг'")) + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРСтраховаяСотрудники") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Рег. номер в ПФР: %1. Страховые взносы на ОПС на страховую часть трудовой пенсии за %2. НДС не облагается.",
			РегНомерПФР,
			Нрег(Формат(Дата,"ДФ='ММММ гггг'")) + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.НДФЛСотрудники") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Уплата НДФЛ на сотрудников за %2. НДС не облагается.",
			РегНомерПФР,
			Нрег(Формат(Дата,"ДФ='ММММ гггг'")) + " г");
			
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.НДФЛДоходыСвышеПредельнойВеличины") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Уплата НДФЛ на сотрудников с доходов свыше предельной величины за %2. НДС не облагается.",
		РегНомерПФР,
		Нрег(Формат(Дата,"ДФ='ММММ гггг'")) + " г");
		
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ФОМССотрудники") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Страховые взносы на ОМС - ФФОМС за %2. Рег. номер в ПФР: %1. НДС не облагается.",
			РегНомерПФР,
			Нрег(Формат(Дата,"ДФ='ММММ гггг'")) + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ФСССотрудники") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Рег. номер в ФСС: %1. Страховые взносы в связи с временной нетрудоспособностью и материнством за %2. НДС не облагается.",
			РегНомерФСС,
			Нрег(Формат(Дата,"ДФ='ММММ гггг'")) + " г");
		
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ФССТравматизмСотрудники") Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Рег.номер в ФСС:%1. Страховые взносы в связи на ОСС от несчастных сл. на производстве и проф. заболеваний за %2. Без НДС.",
			РегНомерФСС,
			Нрег(Формат(Дата,"ДФ='ММММ гггг'")) + " г");
	ИначеЕсли ВидВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыНалогов.ЕдиныйНалоговыйПлатеж") Тогда
		
		Возврат ВидВзаиморасчетов.НазначениеПлатежа; 
		
	КонецЕсли;
	
КонецФункции

Процедура УстановитьЗаголовокФормыЗадачи(ЭтаФорма, Организация) Экспорт
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + ", "+ Организация;
	КонецЕсли;
КонецПроцедуры

// Возвращает дату начала действия формы книги учета доходов по патенту и УСН по приказу ФНС России
// от 07.11.2023 № ЕА-7-3/816
//
// Возвращаемое значение:
//   Дата - дата начала применения
//
Функция ДатаНачалаДействияПриказаФНС816() Экспорт
	
	Возврат '20240101';
	
КонецФункции

// Возвращает массив операций денежных документов, допускающих настройку налогового учета
//  в табличной части РасшифровкаПлатежа
// 
// Возвращаемое значение:
//   - Массив - виды операций денежных документов
//
Функция ВидыОперацийНалоговыйУчетВРасшифровкеПлатежа() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПокупателя"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Покупателю"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю"));
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Патентная система налогообложения

// Возвращает налоговую ставку по патентной системе налогообложения
//
Функция НалоговаяСтавкаПоПатентнойСистеме(Знач Период = Неопределено) Экспорт 
	
	Возврат 6/100;
	
КонецФункции

// Рассчитывает потенциально возможный доход по патенту
//
// Параметры:
//  ПотенциальноВозможныйГодовойДоход - Число - потенциально возможный к получению годовой доход
//  ДатаНачала - Дата - дата начала действия патента
//  ДатаОкончания - Дата - дата окончания действия патента
//
Функция РассчитатьПотенциальноВозможныйДоход(ПотенциальноВозможныйГодовойДоход, ДатаНачала, ДатаОкончания) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания)
		Или Год(ДатаНачала) <> Год(ДатаОкончания) Тогда
		Возврат ПотенциальноВозможныйГодовойДоход;
	КонецЕсли;
	
	Если РассчитыватьСтоимостьПатентаПоКалендарнымДням(ДатаНачала, ДатаОкончания) Тогда
		
		КоличествоДнейСрока = КоличествоДней(ДатаНачала, ДатаОкончания);
		КоличествоДнейВГоду = КоличествоДней(НачалоГода(ДатаОкончания), КонецГода(ДатаОкончания));
		
		ПотенциальноВозможныйДоход = ПотенциальноВозможныйГодовойДоход * КоличествоДнейСрока / КоличествоДнейВГоду;
		
	Иначе
		
		ДействуетСНачалаМесяца = НачалоДня(ДатаНачала) = НачалоМесяца(ДатаНачала);
		КоличествоМесяцевСрока = Месяц(ДатаОкончания) - Месяц(ДатаНачала) + ?(ДействуетСНачалаМесяца, 1, 0);
		
		ПотенциальноВозможныйДоход = ПотенциальноВозможныйГодовойДоход * КоличествоМесяцевСрока / 12;
		
	КонецЕсли;
	
	Возврат Окр(ПотенциальноВозможныйДоход, 2, РежимОкругления.Окр15как20);
	
КонецФункции

Функция РассчитыватьСтоимостьПатентаПоКалендарнымДням(ДатаНачала, ДатаОкончания)
	
	// П. 62 ст. 2 Федерального закона от 29.09.2019 N 325-ФЗ изменил расчет налога по патенту (п. 1 ст. 346.51 НК РФ).
	// Ранее налог рассчитывался пропорционально количеству месяцев срока действия,
	// после вступления в силу новой редакции НК налог рассчитывается по календарным дням срока действия патента.
	// Изменения вступили в силу с 29 октября 2019 года.
	ДатаНачалаРасчетаПоКалендарнымДням = '20191029';
	
	Если ДатаНачала >= ДатаНачалаРасчетаПоКалендарнымДням Тогда
		
		Возврат Истина;
		
	ИначеЕсли ПатентПрекращенДосрочно(ДатаНачала, ДатаОкончания) Тогда
		
		// В случае прекращения предпринимательской деятельности до истечения срока патента налог пересчитывается
		// исходя из фактического периода времени осуществления предпринимательской деятельности в календарных днях.
		Возврат Истина;
		
	Иначе
		
		// Патент выдан на срок, кратный месяцу, и рассчитывается по количеству месяцев срока.
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ПатентПрекращенДосрочно(ДатаНачала, ДатаОкончания)
	
	ОдинДень = 86400; // Секунд в сутках (24*60*60)
	
	ДействуетСНачалаМесяца = НачалоДня(ДатаНачала) = НачалоМесяца(ДатаНачала);
	КоличествоМесяцевСрока = Месяц(ДатаОкончания) - Месяц(ДатаНачала) + ?(ДействуетСНачалаМесяца, 1, 0);
	
	РасчетнаяДатаОкончания = ДобавитьМесяц(ДатаНачала, КоличествоМесяцевСрока) - ОдинДень;
	
	Возврат НачалоДня(ДатаОкончания) <> НачалоДня(РасчетнаяДатаОкончания);
	
КонецФункции


// Возвращает количество календарных дней в периоде, включая граничные дни.
//
// Параметры:
//  НачалоПериода - Дата - начало периода.
//  КонецПериода  - Дата - конец периода.
//
// Возвращаемое значение:
//   Число - количество дней в периоде.
//
Функция КоличествоДней(НачалоПериода, КонецПериода) Экспорт
	
	ОдинДень = 24 * 60 * 60; // Секунд в сутках
	
	Возврат (НачалоДня(КонецПериода) - НачалоДня(НачалоПериода)) / ОдинДень + 1;
	
КонецФункции

// Возвращает представление периода.
// 
// Параметры:
//   ВидПериода    - ПеречислениеСсылка.ДоступныеПериодыОтчета - Вид периода.
//   НачалоПериода - Дата - Дата начала периода.
//   КонецПериода  - Дата - Дата окончания периода.
// 
// Возвращаемое значение:
//   Строка - Текстовое представление периода.
// 
Функция ПолучитьПредставлениеПериодаОтчета(ВидПериода, Знач НачалоПериода, Знач КонецПериода) Экспорт
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда	
		Если Не ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
			Возврат "";
		Иначе
			Возврат Формат(НачалоПериода, "ДФ=dd.MM.yy") + " - " + Формат(КонецПериода, "ДФ=dd.MM.yy");
		КонецЕсли;
	Иначе
		РасчетныйВидПериода = ПолучитьВидПериода(НачалоПериода, КонецПериода);
		Если РасчетныйВидПериода <> ВидПериода И ЗначениеЗаполнено(НачалоПериода) Тогда
			ВидПериода = РасчетныйВидПериода;
		КонецЕсли;
		
		Список = ПолучитьСписокПериодов(НачалоПериода, ВидПериода);
		
		ЭлементСписка = Список.НайтиПоЗначению(НачалоПериода);
		Если ЭлементСписка <> Неопределено тогда
			Возврат ЭлементСписка.Представление;
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Возвращает список периодов, список определяется по переданной дате и виду периода.
// 
// Параметры:
//   НачалоПериода - Дата - Дата начала периода.
//   ВидПериода    - ПеречислениеСсылка.ДоступныеПериодыОтчета - Вид периода.
// 
// Возвращаемое значение:
//   СписокЗначений - Список возможных периодов.
// 
Функция ПолучитьСписокПериодов(Знач НачалоПериода, Знач ВидПериода) Экспорт
	
	СписокПериодов = Новый СписокЗначений;
	Если НачалоПериода = '00010101' Тогда
		Возврат Новый СписокЗначений;
	Иначе
		ЗначениеНачалоПериода = НачалоПериода;
	КонецЕсли;
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		ТекущийГод = Год(ЗначениеНачалоПериода);
		СписокПериодов.Добавить(Дата(ТекущийГод - 7, 1, 1), НСтр("ru = 'Предыдущие года'"));
		Для Сч = ТекущийГод - 3 По ТекущийГод + 3 Цикл
			СписокПериодов.Добавить(Дата(Сч, 1, 1), Формат(Сч, "ЧГ=0"));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод + 7, 1, 1), НСтр("ru = 'Последующие года'"));
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие") Тогда
		ТекущийГод = Год(ЗначениеНачалоПериода);
		СписокПериодов.Добавить(Дата(ТекущийГод - 2, 1, 1), Формат(ТекущийГод - 2, "ЧГ=0") + "...");
		Для Сч = ТекущийГод - 1 По ТекущийГод + 1 Цикл
			СписокПериодов.Добавить(Дата(Сч, 1, 1), СтрШаблон(НСтр("ru = 'I полугодие %1'"), Формат(Сч, "ЧГ=0")));
			СписокПериодов.Добавить(Дата(Сч, 7, 1), СтрШаблон(НСтр("ru = 'II полугодие %1'"), Формат(Сч, "ЧГ=0")));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод + 2, 1, 1), Формат(ТекущийГод + 2, "ЧГ=0") + "...");
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		ТекущийГод = Год(ЗначениеНачалоПериода);
		СписокПериодов.Добавить(Дата(ТекущийГод - 2, 1, 1), Формат(ТекущийГод - 2, "ЧГ=0") + "...");
		Для Сч = ТекущийГод - 1 По ТекущийГод Цикл
			СписокПериодов.Добавить(Дата(Сч, 1, 1),	 СтрШаблон(НСтр("ru = '1 квартал %1'"), Формат(Сч, "ЧГ=0")));
			СписокПериодов.Добавить(Дата(Сч, 4, 1),	 СтрШаблон(НСтр("ru = '2 квартал %1'"), Формат(Сч, "ЧГ=0")));
			СписокПериодов.Добавить(Дата(Сч, 7, 1),	 СтрШаблон(НСтр("ru = '3 квартал %1'"), Формат(Сч, "ЧГ=0")));
			СписокПериодов.Добавить(Дата(Сч, 10, 1), СтрШаблон(НСтр("ru = '4 квартал %1'"), Формат(Сч, "ЧГ=0")));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод + 1, 1, 1), Формат(ТекущийГод + 1, "ЧГ=0") + "...");
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		ТекущийГод = Год(ЗначениеНачалоПериода);
		СписокПериодов.Добавить(Дата(ТекущийГод - 1, 1, 1), Формат(ТекущийГод - 1, "ЧГ=0") + "...");

		Для Сч = 1 По 12 Цикл
			СписокПериодов.Добавить(Дата(ТекущийГод, Сч, 1), Формат(Дата(ТекущийГод, Сч, 1), "ДФ='MMMM yyyy'"));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод + 1, 1, 1), Формат(ТекущийГод + 1, "ЧГ=0") + "...");

	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада") Тогда
		ТекущийГод   = Год(ЗначениеНачалоПериода);
		ТекущийМесяц = Месяц(ЗначениеНачалоПериода);
		
		СчМесяц = ?(ТекущийМесяц - 4 < 1, 12 + ТекущийМесяц - 4, ТекущийМесяц - 4);
		СчГод   = ?(ТекущийМесяц - 4 < 1, ТекущийГод - 1       , ТекущийГод);
		Сч = 6;
		
		Период = Дата(?(СчМесяц <> 1, СчГод, СчГод - 1), ?(СчМесяц > 1, СчМесяц - 1, 12), 1);
		СписокПериодов.Добавить(Период, Формат(Период, "ДФ='MMMM yyyy'") + "...");
		Пока Сч >0 Цикл
			СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 1),  СтрШаблон(НСтр("ru = 'I дек. %1'"), Нрег(Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'"))));
			СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 11), СтрШаблон(НСтр("ru = 'II дек. %1'"), Нрег(Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'"))));
			СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 21), СтрШаблон(НСтр("ru = 'III дек. %1'"), Нрег(Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'"))));
			СчМесяц = СчМесяц + 1;
			Если СчМесяц > 12 Тогда
				СчГод = СчГод + 1;
				СчМесяц = 1;
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 1), Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'") + "...");
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя") Тогда
		НачалоНедели = НачалоНедели(ЗначениеНачалоПериода) - 21 * 86400;
		
		СписокПериодов.Добавить(НачалоНедели - 7 * 86400, НСтр("ru = 'Пред. недели ...'"));
		Для Сч = 0 По 6 Цикл
			НачНедели = НачалоНедели + 7 * Сч * 86400;  
			КонНедели = КонецНедели(НачНедели);
			СписокПериодов.Добавить(НачНедели, Формат(НачНедели, "ДФ=dd.MM") + " - " + Формат(КонНедели, "ДФ=dd.MM"));
		КонецЦикла;
		СписокПериодов.Добавить(НачалоНедели + 7 * 86400, НСтр("ru = 'След. недели ...'"));
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
		КонецНедели   = КонецНедели(ЗначениеНачалоПериода);
		ДатаДняНедели = НачалоНедели(ЗначениеНачалоПериода);
		
		СписокПериодов.Добавить(ДатаДняНедели - 86400, НСтр("ru = 'Предыдущая неделя'"));
		
		Пока ДатаДняНедели < КонецНедели Цикл
			ДеньНед = ДеньНедели(ДатаДняНедели);
			
			СписокПериодов.Добавить(ДатаДняНедели, Формат(ДатаДняНедели, "ДФ='dd MMMM yyyy (ddd)'"));
			
			ДатаДняНедели = ДатаДняНедели + 86400;
		КонецЦикла;
		
		СписокПериодов.Добавить(КонецНедели + 1, НСтр("ru = 'Следующая неделя'"));
	КонецЕсли;
		
	Возврат СписокПериодов;
	
КонецФункции   

// Возвращает вид периода по переданным датам начала и окончания этого периода.
// 
// Параметры:
// 	НачалоПериода - Дата - Дата начала периода.
//  КонецПериода  - Дата - Дата окончания периода.
//	МинимальныйВидПериода - ПеречислениеСсылка.ДоступныеПериодыОтчета - Наименьший доступный вид периода.
// 
// Возвращаемое значение:
//   ПеречислениеСсылка.ДоступныеПериодыОтчета - Вид периода.
// 
Функция ПолучитьВидПериода(Знач НачалоПериода, Знач КонецПериода, Знач МинимальныйВидПериода = Неопределено) Экспорт
	
	ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод");
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		Начало = НачалоДня(НачалоПериода);
		Конец  = КонецДня(КонецПериода);
		Если Начало = НачалоДня(НачалоПериода) И Конец = КонецДня(НачалоПериода) Тогда
			ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День");
		ИначеЕсли Начало = НачалоНедели(НачалоПериода) И Конец = КонецНедели(НачалоПериода) Тогда
			ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя");
		ИначеЕсли Начало = НачалоМесяца(НачалоПериода) И Конец = КонецМесяца(НачалоПериода) Тогда
			ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
		ИначеЕсли Начало = НачалоКвартала(НачалоПериода) И Конец = КонецКвартала(НачалоПериода) Тогда
			ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал");
		ИначеЕсли Начало = НачалоГода(НачалоПериода) И Конец = КонецГода(НачалоПериода) Тогда
			ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год");
		ИначеЕсли Начало = Дата(Год(НачалоПериода), 1, 1) И Конец = Дата(Год(НачалоПериода), 6, 30, 23, 59, 59)
			ИЛИ Начало = Дата(Год(НачалоПериода), 7, 1) И Конец = Дата(Год(НачалоПериода), 12, 31, 23, 59, 59) Тогда
			ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие");
		ИначеЕсли Начало = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 1) 
			И Конец = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 10, 23, 59, 59)
			ИЛИ Начало = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 11) 
			И Конец = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 20, 23, 59, 59)
			ИЛИ Начало = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 1) 
			И Конец = КонецМесяца(НачалоПериода)	Тогда
			ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МинимальныйВидПериода) Тогда
		СписокДоступныхПериодов = ПолучитьСписокДоступныхПериодов();
		
		ПозицияВидПериода            = СписокДоступныхПериодов.Индекс(СписокДоступныхПериодов.НайтиПоЗначению(ВидПериода));
		ПозицияМинимальныйВидПериода = СписокДоступныхПериодов.Индекс(СписокДоступныхПериодов.НайтиПоЗначению(МинимальныйВидПериода));
		
		Если ПозицияВидПериода < ПозицияМинимальныйВидПериода Тогда
			ВидПериода = МинимальныйВидПериода;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидПериода;
	
КонецФункции 

Функция ПолучитьСписокДоступныхПериодов()
	
	СписокДоступныхПериодов = Новый СписокЗначений;
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод"));
	
	Возврат СписокДоступныхПериодов;
	
КонецФункции

#КонецОбласти

