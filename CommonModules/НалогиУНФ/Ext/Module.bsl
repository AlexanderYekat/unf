#Область ПрограммныйИнтерфейс

Функция НастройкиНУДляФормыДокумента(пФорма, пСтруктураДопДанныхДляВозврата = Неопределено) Экспорт
	
	Если пСтруктураДопДанныхДляВозврата = Неопределено Тогда
		пСтруктураДопДанныхДляВозврата = Новый Структура;
	КонецЕсли;
	
	Элементы = пФорма.Элементы;
	Объект = пФорма.Объект;
	
	СтруктураВозврата = Новый Структура();
	
	Если пСтруктураДопДанныхДляВозврата.Свойство("ВозвращатьТипСтруктурнойЕдиницы")
		И пСтруктураДопДанныхДляВозврата.Свойство("СтруктурнаяЕдиница") Тогда
		ТипСтруктурнойЕдиницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(пСтруктураДопДанныхДляВозврата.СтруктурнаяЕдиница, "ТипСтруктурнойЕдиницы");
		СтруктураВозврата.Вставить("ТипСтруктурнойЕдиницы", ТипСтруктурнойЕдиницы);
	КонецЕсли;
	
	ВидимостьГруппыУчетВНУДоИзменения = Элементы.ГруппаУчетВНУ.Видимость;
	НоваяВидимостьГруппыУчетВНУДоИзменения = ВидимостьГруппыУчетВНУДоИзменения;
	
	Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		НоваяВидимостьГруппыУчетВНУДоИзменения = Ложь;
		
		СтруктураВозврата.Вставить("НоваяВидимостьГруппыУчетВНУДоИзменения", НоваяВидимостьГруппыУчетВНУДоИзменения);
		СтруктураВозврата.Вставить("ЭтоЮридическоеЛицо", Истина);
		СтруктураВозврата.Вставить("СистемаНалогообложенияСтруктура", Неопределено);
		Возврат СтруктураВозврата;
	Иначе
		НоваяВидимостьГруппыУчетВНУДоИзменения = Истина;
	КонецЕсли;
	
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.
	ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, Объект.Дата);
	
	Если Не СистемаНалогообложенияСтруктура.ПлательщикУСН Тогда
		НоваяВидимостьГруппыУчетВНУДоИзменения = Ложь;
	Иначе
		НоваяВидимостьГруппыУчетВНУДоИзменения = Истина;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("НоваяВидимостьГруппыУчетВНУДоИзменения", НоваяВидимостьГруппыУчетВНУДоИзменения);
	СтруктураВозврата.Вставить("ЭтоЮридическоеЛицо", Ложь);
	СтруктураВозврата.Вставить("СистемаНалогообложенияСтруктура", СистемаНалогообложенияСтруктура);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция определяет тип налогообложения продажи товара налогом на добавленную стоимость.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой определяется система налогообложения
//	Склад - СправочникСсылка.Склады - Розничный склад, для которой определяется система налогообложения
//	Дата - Дата - Дата определения системы налогообложения
//
// Возвращаемое значение:
// 	ПеречислениеСсылка.ТипыНалогообложенияНДС
Функция НалогообложениеНДС(Организация, Склад = Неопределено, Дата = '00010101') Экспорт

	Запрос = Новый Запрос;

	Если ЗначениеЗаполнено(Дата) Тогда
		Запрос.УстановитьПараметр("Дата", Дата);
	Иначе
		Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС) КАК НалогообложениеНДС
	|ИЗ
	|	РегистрСведений.ПримененияЕНВД.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &Склад) КАК ПримененияЕНВД
	|ГДЕ
	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС)
	|ИЗ
	|	РегистрСведений.ПримененияПатенты.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &Склад) КАК ПримененияПатенты
	|ГДЕ
	|	ПримененияПатенты.РозничнаяТорговляОблагаетсяПатентом
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС)
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&Дата, Организация = &Организация) КАК Налогообложение
	|ГДЕ
	|	(Налогообложение.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)
	|			ИЛИ Налогообложение.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.АУСН)
	|			ИЛИ Налогообложение.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.ОсобыйПорядок))";

	НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;

	Выборка = запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НалогообложениеНДС = Выборка.НалогообложениеНДС;
	КонецЕсли;

	Возврат НалогообложениеНДС;

КонецФункции

// Функция определяет тип налогообложения продажи товара налогом на добавленную стоимость.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой определяется система налогообложения
//	Склад - СправочникСсылка.Склады - Розничный склад, для которой определяется система налогообложения
//	Дата - Дата - Дата определения системы налогообложения
//
// Возвращаемое значение:
// 	ПеречислениеСсылка.СпециальныеНалоговыеРежимы
Функция СпециальныйНалоговыйРежим(Организация, Склад = Неопределено, Дата = '00010101') Экспорт

	Запрос = Новый Запрос;

	Если ЗначениеЗаполнено(Дата) Тогда
		Запрос.УстановитьПараметр("Дата", Дата);
	Иначе
		Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Налогообложение.ПрименяетсяПатент
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.ПСН)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется)
	|	КОНЕЦ КАК НалоговыйРежим
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&Дата, Организация = &Организация) КАК Налогообложение
	|ГДЕ
	|	Налогообложение.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.ОсобыйПорядок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.ПСН)
	|ИЗ
	|	РегистрСведений.ПримененияПатенты.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &Склад) КАК ПримененияПатенты
	|ГДЕ
	|	ПримененияПатенты.РозничнаяТорговляОблагаетсяПатентом";

	НалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.НеПрименяется;

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НалоговыйРежим = Выборка.НалоговыйРежим;
	КонецЕсли;

	Возврат НалоговыйРежим;

КонецФункции

// Определяет патент по складу
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Склад - СправочникСсылка.СтруктурныеЕдиницы
//  Дата - Дата
//
// Возвращаемое значение:
// 	СправочникСсылка.Патенты
Функция ПатентПоСкладу(Организация, Склад, Дата) Экспорт

	Патент = Справочники.Патенты.ПустаяСсылка();
    ДатаДействия = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПримененияПатентыСрезПоследних.Патент КАК Патент
	|ИЗ
	|	РегистрСведений.ПримененияПатенты.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &Склад
	|				И РозничнаяТорговляОблагаетсяПатентом) КАК ПримененияПатентыСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Патенты КАК Патенты
	|		ПО ПримененияПатентыСрезПоследних.Патент = Патенты.Ссылка
	|			И (Патенты.ДатаНачала <= КОНЕЦПЕРИОДА(&Дата, ДЕНЬ))
	|			И (Патенты.ДатаОкончания >= НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ))";
	Запрос.УстановитьПараметр("Дата", ДатаДействия);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат Патент;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Патент = Выборка.Патент;
	КонецЕсли;

	Возврат Патент;

КонецФункции

// Функция возвращает текст запроса, который получает данные для функции "ПатентПоУмолчаниюДляДенежныхДокументов".
Функция ТекстЗапросаПоПатентамДляЗаполненияНаОснованииРасходнойНаклданой() Экспорт
	
	ТекстЗапроса =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+
	"ВЫБРАТЬ
	|	Патенты.Ссылка КАК Патент
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|		ПО Патенты.Владелец = РасходнаяНакладная.Организация
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &Ссылка
	|	И РасходнаяНакладная.СпециальныйНалоговыйРежим = ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.ПСН)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПримененияПатентыСрезПервых.Патент КАК Патент
	|ИЗ
	|	РегистрСведений.ПримененияПатенты.СрезПервых(&Дата, ) КАК ПримененияПатентыСрезПервых
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|		ПО ПримененияПатентыСрезПервых.Организация = РасходнаяНакладная.Организация
	|			И ПримененияПатентыСрезПервых.СтруктурнаяЕдиница = РасходнаяНакладная.СтруктурнаяЕдиница
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &Ссылка
	|	И РасходнаяНакладная.СпециальныйНалоговыйРежим = ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.ПСН)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает патент по умолчанию для склада или организации, если для склада патент не задан или склад не выбран.
Функция ПатентПоУмолчаниюДляДенежныхДокументов(пПатентыОрганизации, пПатентыПоСкладам) Экспорт
	
	Патент = Справочники.Патенты.ПустаяСсылка();
	Если пПатентыОрганизации.Количество() = 1 Тогда
		Патент = пПатентыОрганизации[0].Патент;
	ИначеЕсли пПатентыПоСкладам.Количество() = 1 Тогда
		Патент = пПатентыПоСкладам[0].Патент;
	КонецЕсли;
	
	Возврат Патент;
	
КонецФункции

// Функция определяет настройки системы налогообложения организации
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации
//  Дата		 - Дата
// 
// Возвращаемое значение:
//   - Структура:
//		* ЕстьУСН - Булево - в организации используется упрощенная система налогообложения
//		* ЕстьПатент - Булево - организация использует патент
//		* ПатентПоУмолчанию - СправочникСсылка.Патенты
//		* СпецРежим - ПеречислениеСсылка.СпециальныеНалоговыеРежимы
//
Функция ОпределитьНастройкиНалоговогоУчета(Организация, Дата) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьУСН", Ложь);
	Результат.Вставить("ЕстьПатент", Ложь);
	Результат.Вставить("ПатентПоУмолчанию", Справочники.Патенты.ПустаяСсылка());
	Результат.Вставить("СпецРежим", Перечисления.СпециальныеНалоговыеРежимы.НеПрименяется);
	
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
	
		Налогообложение =
			РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Организация, Дата);

		Результат.ЕстьУСН = Налогообложение.ПлательщикУСН;
		Результат.ЕстьПатент = Налогообложение.ПрименяетсяПатент;
		Если Результат.ЕстьПатент Тогда
			Результат.ПатентПоУмолчанию = Справочники.Патенты.ПолучитьПатентПоУмолчанию(Организация, Дата);
		КонецЕсли;
		
		Если Налогообложение.ПрименяетсяПатент
			И Налогообложение.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок Тогда
			
			Результат.СпецРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Функция - Налогообложение по основанию
//
// Параметры:
//  Организация				 - СправочникСсылка.Организации
//  Дата					 - Дата
//  Основание				 - ДокументСсылка	 - документ - основание платежа
//  НастройкиНалоговогоУчета - Структура	 	 - см. НалогиУНФ.ОпределитьНастройкиНалоговогоУчета
// 
// Возвращаемое значение:
//   - Структура
//		* УчитыватьВНУ - Булево - используется упрощенная система налогообложения
//		* ПСН - Булево - используется патентная система налогообложения
//		* Патент - СправочникСсылка.Патенты
//
Функция НалогообложениеПоОснованию(Организация, Дата, Основание, НастройкиНалоговогоУчета = Неопределено) Экспорт
	
	ДокументОснование = Неопределено;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Если Основание.Свойство("Основание") Тогда
			ДокументОснование = Основание.Основание;
		КонецЕсли;
	Иначе
		ДокументОснование = Основание;
	КонецЕсли;
	
	Результат = Новый Структура("УчитыватьВНУ, ПСН, Патент", Ложь, Ложь, Справочники.Патенты.ПустаяСсылка());
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НастройкиНалоговогоУчета = Неопределено Тогда
		НастройкиНУ = НалогиУНФ.ОпределитьНастройкиНалоговогоУчета(Организация, Дата);
	Иначе
		НастройкиНУ = НастройкиНалоговогоУчета;
	КонецЕсли;

	ОснованиеЭтоЗаказПокупателя = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя"));
	ОснованиеЭтоАктВыполненныхРабот = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот"));
	
	ТипыДенежныхДокументов = Новый ОписаниеТипов("ДокументСсылка.РасходСоСчета,
												| ДокументСсылка.ПоступлениеНаСчет,
												| ДокументСсылка.РасходИзКассы,
												| ДокументСсылка.ПоступлениеВКассу");
	ОснованиеЭтоДенежныйДокумент = ТипыДенежныхДокументов.СодержитТип(ТипЗнч(ДокументОснование));
	
	РеквизитыНалогообложения = Новый Структура;
	РеквизитыНалогообложения.Вставить("УчитыватьВНУ");
	РеквизитыНалогообложения.Вставить("СпециальныйНалоговыйРежим");
	РеквизитыНалогообложения.Вставить("Патент");
	
	Если ОснованиеЭтоЗаказПокупателя Тогда
		СписокРеквизитов = "УчитыватьВНУ, СпециальныйНалоговыйРежим, Организация, СостояниеЗаказа";
	ИначеЕсли ОснованиеЭтоАктВыполненныхРабот Тогда
		СписокРеквизитов = "СпециальныйНалоговыйРежим, Патент";
	Иначе
		СписокРеквизитов = "";
		Для Каждого КлючРеквизит Из РеквизитыНалогообложения Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОснование, КлючРеквизит.Ключ) Тогда
				СписокРеквизитов = СписокРеквизитов + ?(ПустаяСтрока(СписокРеквизитов), "", ",") + КлючРеквизит.Ключ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ЗначениеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, СписокРеквизитов, Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ЗначениеРеквизитов, РеквизитыНалогообложения, Ложь);
	Иначе
		ЗначениеРеквизитов = РеквизитыНалогообложения;
	КонецЕсли;
	
	ЗначениеРеквизитов.Вставить("РежимПСН",
		ЗначениеРеквизитов.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН);
		
	Если ОснованиеЭтоАктВыполненныхРабот Тогда
		НалогообложениеОснования = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(
				ДокументОснование.Организация, ДокументОснование.Дата);
		ЗначениеРеквизитов.УчитыватьВНУ = НалогообложениеОснования.ПлательщикУСН
			И ЗначениеРеквизитов.СпециальныйНалоговыйРежим <> Перечисления.СпециальныеНалоговыеРежимы.ПСН;
	КонецЕсли;

	Если ОснованиеЭтоЗаказПокупателя Тогда
		ОснованиеЭтоЗаказНаряд = (ТипЗнч(ЗначениеРеквизитов.СостояниеЗаказа) = Тип("СправочникСсылка.СостоянияЗаказНарядов"));
		Если НЕ ОснованиеЭтоЗаказНаряд Тогда
			ЗначениеРеквизитов.УчитыватьВНУ = НастройкиНУ.ЕстьУСН И НЕ (НастройкиНУ.ЕстьПатент И ЗначениеРеквизитов.РежимПСН);
		КонецЕсли;
	КонецЕсли;
	
	Если ОснованиеЭтоДенежныйДокумент
		И ФормыДокументовДеньгиКлиентСервер.ВидОперацииРасшифровкаСНалоговымУчетом(ДокументОснование.ВидОперации)
		И ДокументОснование.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти
		И ДокументОснование.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ЗначениеРеквизитов.УчитыватьВНУ = ДокументОснование.РасшифровкаПлатежа[0].УчитыватьВНУ;
		ЗначениеРеквизитов.Патент = ДокументОснование.РасшифровкаПлатежа[0].Патент;
	КонецЕсли;
	
	ПатентОснования = Справочники.Патенты.ПустаяСсылка();
	Если ЗначениеЗаполнено(ЗначениеРеквизитов.Патент) Тогда
		ПатентОснования = ЗначениеРеквизитов.Патент;
	КонецЕсли;
	
	Если НастройкиНУ.ЕстьПатент И (ЗначениеРеквизитов.РежимПСН ИЛИ НЕ НастройкиНУ.ЕстьУСН) Тогда
		Результат.УчитыватьВНУ = Ложь;
		Результат.ПСН = Истина;
		Если ЗначениеЗаполнено(ЗначениеРеквизитов.Патент) Тогда
			Результат.Патент = ЗначениеРеквизитов.Патент;
		Иначе
			Результат.Патент = НастройкиНУ.ПатентПоУмолчанию;
		КонецЕсли;
	Иначе
		Результат.УчитыватьВНУ = (НастройкиНУ.ЕстьУСН И ЗначениеРеквизитов.УчитыватьВНУ <> Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура заполняет значение реквизита НДС включен в стоимость в документе
//
// Параметры:
//  Документ - ДокументОбъект	 - Документ, в котором необходимо заполнить реквизит НДС включен в стоимость
//
Процедура ЗаполнитьНДСВключенВСтоимостьВДокументе(Документ) Экспорт
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Документ, "НДСВключатьВСтоимость") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("СебестоимостьБезНДС") Тогда
		
		Если ЗначениеЗаполнено(Документ.Организация) Тогда
			Документ.НДСВключатьВСтоимость = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Организация, "НДСВключатьВСтоимость");
		Иначе
			Документ.НДСВключатьВСтоимость = Истина;
		КонецЕсли;
		
	Иначе
		Документ.НДСВключатьВСтоимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Считывает текст из двоичных данных, используя поток в памяти.
//
// Параметры:
//   ДвоичныеДанные - ДвоичныеДанные - Двоичные данные текста.
//   Кодировка - КодировкаТекста - Кодировка текста.
//
// Возвращаемое значение:
//   Строка - Результат чтения текста из двоичных данных.
//
Функция ДвоичныеДанныеВСтроку(ДвоичныеДанные, Кодировка) Экспорт
	БуферДвоичныхДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ДвоичныеДанные);
	ПотокВПамяти = Новый ПотокВПамяти(БуферДвоичныхДанных);
	ЧтениеТекста = Новый ЧтениеТекста(ПотокВПамяти, Кодировка);
	Возврат ЧтениеТекста.Прочитать();
КонецФункции

// Загружает классификатор из веб-сервиса и возвращает его "Распакованные" данные.
//
// Параметры:
//   Идентификатор - Строка - Идентификатор классификатора в веб-сервисе.
//
// Возвращаемое значение:
//   Структура - Данные классификатора.
//
Функция ПолучитьДанныеКлассификатораИзСервиса(Идентификатор) Экспорт
	МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
	
	Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор);
	РезультатПолученияФайлов = МодульРаботаСКлассификаторами.ПолучитьФайлыКлассификаторов(Идентификаторы);
	
	Если РезультатПолученияФайлов.КодОшибки = "ОбновлениеНеТребуется" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = Неопределено;
	Если Не ЗначениеЗаполнено(РезультатПолученияФайлов.КодОшибки)
		И ТипЗнч(РезультатПолученияФайлов.ДанныеКлассификаторов) = Тип("ТаблицаЗначений") Тогда
		СтрокаТаблицы = РезультатПолученияФайлов.ДанныеКлассификаторов.Найти(Идентификатор, "Идентификатор");
		Если СтрокаТаблицы <> Неопределено Тогда
			Попытка
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтрокаТаблицы.АдресФайла);
				ТекстXML = ДвоичныеДанныеВСтроку(ДвоичныеДанные, КодировкаТекста.UTF8);
				Значение = ОбщегоНазначения.ЗначениеИзСтрокиXML(ТекстXML);
			Исключение
				Значение = Неопределено;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				РезультатПолученияФайлов.КодОшибки = "ОшибкаИзвлеченияЗначенияИзФайла";
				РезультатПолученияФайлов.СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
				РезультатПолученияФайлов.ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		ТекстЖурнала = НСтр("ru = 'При получении классификатора %1 из веб-сервиса возникла ошибка:
			|Код: %2
			|Краткая информация: %3
			|Подробная информация:
			|%4'");
		ТекстЖурнала = СтрШаблон(ТекстЖурнала,
			Идентификатор,
			Строка(РезультатПолученияФайлов.КодОшибки),
			Строка(РезультатПолученияФайлов.СообщениеОбОшибке),
			Строка(РезультатПолученияФайлов.ИнформацияОбОшибке));
	Иначе
		УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		ТекстЖурнала = СтрШаблон(НСтр("ru = 'Файл классификатора %1 получен из веб-сервиса.'"), Идентификатор);
	КонецЕсли;
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Нормативно-правовая информация БЗК'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурнала,
		,
		,
		ТекстЖурнала);
	
	Возврат Значение;
КонецФункции

#КонецОбласти