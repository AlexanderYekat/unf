#Область ПрограммныйИнтерфейс	   

// Возвращает номер версии библиотеки.
//
// Возвращаемое значение:
//  Строка - номер версии библиотеки.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "1.0.0.2";
	
КонецФункции

// см. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	СоответствиеИменПсевдонимам.Вставить(
		Метаданные.РегламентныеЗадания.ПлюсЗапускЗаданийРасширений.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(
		Метаданные.РегламентныеЗадания.ПлюсСинхронизацияСМагазиномРасширений.ИмяМетода);
КонецПроцедуры

// см. ОбщегоНазначенияПереопределяемый.ПриДобавленииСерверныхОповещений
Процедура ПриДобавленииСерверныхОповещений(Оповещения) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если ТаблицаУстановленныхРасширений().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = СерверныеОповещения.НовоеСерверноеОповещение("Плюс.НеобходимаУстановкаМонопольногоРежима");
	Оповещение.ИмяМодуляПолучения = "ПлюсМагазинРасширенийСлужебныйКлиент";
	Оповещение.ПериодПроверки = 60;
	Оповещения.Вставить(Оповещение.Имя, Оповещение);
КонецПроцедуры

#КонецОбласти
	   
#Область СлужебныйПрограммныйИнтерфейс

Функция АдресAPI() Экспорт	
	Возврат "https://plus.1c.ru/api/v1/Extensions";
КонецФункции

Функция НавигационнаяСсылкаИнтерфейса(ИдентификаторСеанса) Экспорт	
	Возврат "https://plus.1c.ru?id=" + ИдентификаторСеанса;	
КонецФункции

Процедура АктуализироватьРасписаниеСинхронизации() Экспорт
	ЧетыреЧаса = 4 * 60 * 60;
	ДесятьМинут = 600;
	Генератор = Новый ГенераторСлучайныхЧисел;
	РасписанияДня = Новый Массив;
	
	Для Индекс = 0 По 5 Цикл
		ПланируемыйЗапуск = Дата("00010101") + ЧетыреЧаса * Индекс + Генератор.СлучайноеЧисло(0, ЧетыреЧаса);
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ВремяНачала = ПланируемыйЗапуск;
		Расписание.ПериодПовтораДней = 1;
		РасписанияДня.Добавить(Расписание);
	КонецЦикла;
	
	ЗапускПослеОбновления = Дата("00010101") + (ТекущаяДатаСеанса() - НачалоДня(ТекущаяДатаСеанса()) + ДесятьМинут);
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ВремяНачала = ЗапускПослеОбновления;
	Расписание.ПериодПовтораДней = 1;
	РасписанияДня.Добавить(Расписание);
			
	Расписание = Новый РасписаниеРегламентногоЗадания();
	Расписание.ДетальныеРасписанияДня = РасписанияДня;
	Расписание.ПериодПовтораДней = 1;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("Ключ", Метаданные.РегламентныеЗадания.ПлюсСинхронизацияСМагазиномРасширений.ИмяМетода);
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 
		Метаданные.РегламентныеЗадания.ПлюсСинхронизацияСМагазиномРасширений.ИнтервалПовтораПриАварийномЗавершении);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 
		Метаданные.РегламентныеЗадания.ПлюсСинхронизацияСМагазиномРасширений.КоличествоПовторовПриАварийномЗавершении);
		
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ПлюсСинхронизацияСМагазиномРасширений);
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Задания.Количество() = 0 Тогда
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ПлюсСинхронизацияСМагазиномРасширений);
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			ПараметрыЗадания.Вставить("ОбластьДанных", 0);
			ПараметрыЗадания.Вставить("ЗапланированныйМоментЗапуска", ТекущаяДатаСеанса() + ДесятьМинут);
		КонецЕсли;
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		ПараметрыЗадания.Вставить(
			"ИмяМетода", Метаданные.РегламентныеЗадания.ПлюсСинхронизацияСМагазиномРасширений.ИмяМетода);
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задания[0].УникальныйИдентификатор, ПараметрыЗадания);
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьЗаданиеРасширения(ИдентификаторРасширения, Команда) Экспорт
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПлюсЗапускЗаданийРасширений);
	
	ИдРасширения = Новый УникальныйИдентификатор(ИдентификаторРасширения);
	Событие = НСтр("ru = '1С:Плюс . Выполнение регламентного задания расширения'");
	
	МетаданныеМодуля = Метаданные.ОбщиеМодули.Найти(Команда);
	Если МетаданныеМодуля = Неопределено Тогда
		Ошибка = СтрШаблон(НСтр("ru = 'Общий модуль %1 не найден'", ОбщегоНазначения.КодОсновногоЯзыка()), Команда);
		ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка, , , Ошибка);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПлюсУстановленныеРасширения.ИдРасширенияВИБ
	|ИЗ
	|	РегистрСведений.ПлюсУстановленныеРасширения КАК ПлюсУстановленныеРасширения
	|ГДЕ
	|	ПлюсУстановленныеРасширения.ИдРасширения = &ИдРасширения");
	Запрос.УстановитьПараметр("ИдРасширения", ИдРасширения);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И 
		МетаданныеМодуля.РасширениеКонфигурации().УникальныйИдентификатор = Выборка.ИдРасширенияВИБ Тогда
		
		МодульКоманды = ОбщегоНазначения.ОбщийМодуль(Команда);
		МодульКоманды.ВыполнитьКоманду();
	Иначе
		Ошибка = СтрШаблон(
			НСтр("ru = 'Общий модуль %1 не принадлежит расширению %2'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			Команда, 
			ИдентификаторРасширения
		);
		ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка, , , Ошибка);
	КонецЕсли;
КонецПроцедуры

Функция СинхронизироватьСписокРасширенийСМагазином(УстановкаРазрешена) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если ОбщегоНазначения.РазделениеВключено()И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		ИдБазы = Строка(Новый УникальныйИдентификатор());
	Иначе
		ИдБазы = Константы.ИдентификаторИнформационнойБазы.Получить();
	КонецЕсли;
		
	ТаблицаРасширений = ТаблицаУстановленныхРасширений();
	
	СинхронизироватьСписокРасширенийСБД(ТаблицаРасширений);
	
	МассивРасширений = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаРасширений Цикл
		
		ИнформацияОРасширении = ИнформацияОРасширении(
			ТекСтрока.ИдРасширения,
			ТекСтрока.ИдВерсииРасширения,
			ТекСтрока.ИмяРасширения,
			ТекСтрока.ВерсияРасширения);
		МассивРасширений.Добавить(ИнформацияОРасширении);
		
	КонецЦикла;
	ДанныеЗапроса = Новый Структура();
	ДанныеЗапроса.Вставить("InstallationAllowed", УстановкаРазрешена);
	ДанныеЗапроса.Вставить("Extensions", МассивРасширений);
	ДанныеЗапроса.Вставить("ConfigVersion", Метаданные.Версия);
	ДанныеЗапроса.Вставить("ConfigName", Метаданные.Имя);
	ДанныеЗапроса.Вставить("InfobaseId", ИдБазы);
	
	ПараметрыПодключения = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресAPI() + "/CreateSession");
	Соединение = НовоеСоединениеСAPI(20, ПараметрыПодключения);
	Запрос = Новый HTTPЗапрос(ПараметрыПодключения.ПутьНаСервере);
	Запрос.УстановитьТелоИзСтроки(ОбщегоНазначения.ЗначениеВJSON(ДанныеЗапроса));
	
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	ДанныеОтвета = ОбщегоНазначения.JSONВЗначение(Ответ.ПолучитьТелоКакСтроку(), , Ложь);
	
	Возврат ДанныеОтвета.SessionId;
КонецФункции

Процедура УстановитьРасширения(ЭтоУстановкаОбновлений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПлюсРасширенияКУстановке.ИмяРасширения КАК ИмяРасширения,
	|	ПлюсРасширенияКУстановке.ВерсияРасширения КАК ВерсияРасширения,
	|	ПлюсРасширенияКУстановке.ЗаданиеНаУстановку КАК ЗаданиеНаУстановку,
	|	ПлюсРасширенияКУстановке.ИдСеанса КАК ИдСеанса
	|ИЗ
	|	РегистрСведений.ПлюсРасширенияКУстановке КАК ПлюсРасширенияКУстановке");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаданиеНаУстановку = Выборка.ЗаданиеНаУстановку.Получить();
		
		Попытка
			УстановитьРасширение(ЗаданиеНаУстановку);
		Исключение
			УдалитьРасширениеИзКорзины(ЗаданиеНаУстановку, Выборка.ИдСеанса);
			ВызватьИсключение;
		КонецПопытки;
		
		ПодтвердитьУстановкуРасширения(
			ЗаданиеНаУстановку,
			Выборка.ИдСеанса,
			ЭтоУстановкаОбновлений);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СинхронизацияСМагазиномРасширений() Экспорт
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПлюсСинхронизацияСМагазиномРасширений);
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлюсУстановленныеРасширения.ИдРасширения КАК ИдРасширения,
	|	ПлюсУстановленныеРасширения.ИдВерсииРасширения КАК ИдВерсииРасширения,
	|	ПлюсУстановленныеРасширения.ИмяРасширения КАК ИмяРасширения,
	|	ПлюсУстановленныеРасширения.ВерсияРасширения КАК ВерсияРасширения
	|ИЗ
	|	РегистрСведений.ПлюсУстановленныеРасширения КАК ПлюсУстановленныеРасширения");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	РасширенияНаПроверку = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ИнформацияОРасширении = ИнформацияОРасширении(
			Выборка.ИдРасширения,
			Выборка.ИдВерсииРасширения,
			Выборка.ИмяРасширения,
			Выборка.ВерсияРасширения);
		РасширенияНаПроверку.Добавить(ИнформацияОРасширении);
	КонецЦикла;
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("ConfigVersion", Метаданные.Версия);
	ДанныеЗапроса.Вставить("ConfigName", Метаданные.Имя);
	ДанныеЗапроса.Вставить("Extensions", РасширенияНаПроверку);
	
	ПараметрыПодключения = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресAPI() + "/Sync");
	Соединение = НовоеСоединениеСAPI(60, ПараметрыПодключения);
	Запрос = Новый HTTPЗапрос(ПараметрыПодключения.ПутьНаСервере);
	Запрос.УстановитьТелоИзСтроки(ОбщегоНазначения.ЗначениеВJSON(ДанныеЗапроса));
	
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	ДанныеОтвета = ОбщегоНазначения.JSONВЗначение(Ответ.ПолучитьТелоКакСтроку(), , Ложь);
	Если ДанныеОтвета.Update.Количество() = 0 И ДанныеОтвета.Delete.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенияКУдалению = Новый Массив;
	Для Каждого СтрокаОтвета Из ДанныеОтвета.Delete Цикл
		РасширенияКУдалению.Добавить(Новый УникальныйИдентификатор(СтрокаОтвета.ExtId));
	КонецЦикла;
	
	ЗаданияНаУстановку = Новый Соответствие();
	
	РасширенияКОбновлению = Новый ТаблицаЗначений();
	РасширенияКОбновлению.Колонки.Добавить("ИдРасширения", Новый ОписаниеТипов("УникальныйИдентификатор"));
	РасширенияКОбновлению.Колонки.Добавить("ИдВерсииРасширения", Новый ОписаниеТипов("УникальныйИдентификатор"));
	РасширенияКОбновлению.Колонки.Добавить("ИзменяетСтруктуруДанных", Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаОтвета Из ДанныеОтвета.Update Цикл
		ИдВерсии = Новый УникальныйИдентификатор(СтрокаОтвета.ExtVersionId);
		НовСтрока = РасширенияКОбновлению.Добавить();
		НовСтрока.ИдВерсииРасширения = ИдВерсии;
		НовСтрока.ИдРасширения = Новый УникальныйИдентификатор(СтрокаОтвета.ExtId);
		НовСтрока.ИзменяетСтруктуруДанных = СтрокаОтвета.ModifiesDataStructure;
		
		ЗаданияНаУстановку.Вставить(ИдВерсии, СтрокаОтвета);
	КонецЦикла;
	
	ЗапросОбновление = Новый Запрос("ВЫБРАТЬ
	|	КОбновлению.ИдРасширения КАК ИдРасширения,
	|	КОбновлению.ИдВерсииРасширения КАК ИдВерсииРасширения,
	|	КОбновлению.ИзменяетСтруктуруДанных КАК ИзменяетСтруктуруДанных
	|ПОМЕСТИТЬ втКОбновлению
	|ИЗ
	|	&РасширенияКОбновлению КАК КОбновлению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлюсУстановленныеРасширения.ИдРасширения КАК ИдРасширения,
	|	КОбновлению.ИдВерсииРасширения КАК ИдВерсииРасширения,
	|	ПлюсУстановленныеРасширения.ОбластьДанныхВспомогательныеДанные КАК Область,
	|	Ложь КАК Удалить,
	|	КОбновлению.ИзменяетСтруктуруДанных КАК ИзменяетСтруктуруДанных,
	|	ПлюсУстановленныеРасширения.ИмяРасширения КАК ИмяРасширения,
	|	ПлюсУстановленныеРасширения.ВерсияРасширения КАК ВерсияРасширения
	|ИЗ
	|	РегистрСведений.ПлюсУстановленныеРасширения КАК ПлюсУстановленныеРасширения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКОбновлению КАК КОбновлению
	|		ПО КОбновлению.ИдРасширения = ПлюсУстановленныеРасширения.ИдРасширения
	|		И КОбновлению.ИдВерсииРасширения <> ПлюсУстановленныеРасширения.ИдВерсииРасширения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПлюсУстановленныеРасширения.ИдРасширения КАК ИдРасширения,
	|	ПлюсУстановленныеРасширения.ИдВерсииРасширения КАК ИдВерсииРасширения,
	|	ПлюсУстановленныеРасширения.ОбластьДанныхВспомогательныеДанные КАК Область,
	|	Истина КАК Удалить,
	|	Ложь,
	|	ПлюсУстановленныеРасширения.ИмяРасширения,
	|	ПлюсУстановленныеРасширения.ВерсияРасширения
	|ИЗ
	|	РегистрСведений.ПлюсУстановленныеРасширения КАК ПлюсУстановленныеРасширения
	|ГДЕ
	|	ПлюсУстановленныеРасширения.ИдРасширения В (&РасширенияКУдалению)
	|ИТОГИ
	|ПО
	|	Область");
	
	ЗапросОбновление.УстановитьПараметр("РасширенияКУдалению", РасширенияКУдалению);
	ЗапросОбновление.УстановитьПараметр("РасширенияКОбновлению", РасширенияКОбновлению);
	
	ВыборкаОбласть = ЗапросОбновление.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбласть.Следующий() Цикл
		Если ВыборкаОбласть.Область <> 0 Тогда
			РаботаВМоделиСервиса.ВойтиВОбластьДанных(ВыборкаОбласть.Область);
		КонецЕсли;
		СинхронизироватьСписокРасширенийСБД();
		ВыборкаРасширения = ВыборкаОбласть.Выбрать();
		ДляУстановкиВМонопольном = Новый Массив;
		Пока ВыборкаРасширения.Следующий() Цикл
			Попытка
				СинхронизироватьРасширение(
					ВыборкаРасширения, ЗаданияНаУстановку, ВыборкаОбласть.Область, ДляУстановкиВМонопольном);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Расширения 1С:Плюс.Синхронизация расширения'"),
					УровеньЖурналаРегистрации.Ошибка, , ,
					СтрШаблон(НСтр("ru = 'Пропущена синхронизация расширения %1 версии %2 
						|%3'"), 
						ВыборкаРасширения.ИмяРасширения, 
						ВыборкаРасширения.ВерсияРасширения, 
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			КонецПопытки;
		КонецЦикла;
		
		Если ДляУстановкиВМонопольном.Количество() > 0 Тогда
			СерверныеОповещения.ОтправитьСерверноеОповещение(
				"Плюс.НеобходимаУстановкаМонопольногоРежима",
				ДляУстановкиВМонопольном,
				Неопределено,
				Истина);
		КонецЕсли;
		
		Если ВыборкаОбласть.Область <> 0 Тогда
			РаботаВМоделиСервиса.ВыйтиИзОбластиДанных();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьЗаданиеНаУстановку(Знач ДанныеЗадания, ИдСеанса, НайденыРРД) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Для Каждого Расширение Из ДанныеЗадания.Extensions Цикл
			Запись = РегистрыСведений.ПлюсРасширенияКУстановке.СоздатьМенеджерЗаписи();
			Запись.ИдСеанса = Новый УникальныйИдентификатор(ИдСеанса);
			Запись.ИдРасширения = Новый УникальныйИдентификатор(Расширение.ExtId);
			Запись.ИдВерсииРасширения = Новый УникальныйИдентификатор(Расширение.ExtVersionId);
			Запись.ИмяРасширения = Расширение.Name;
			Запись.ВерсияРасширения = Расширение.Version;
			Запись.ЗаданиеНаУстановку = Новый ХранилищеЗначения(Расширение, Новый СжатиеДанных(9));
			Запись.Записать();
			
			Если Расширение.ModifiesDataStructure Тогда
				НайденыРРД = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура УдалитьРасширение(ДанныеРасширения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ПлюсУстановленныеРасширения.СоздатьМенеджерЗаписи();
	Запись.ИдРасширения = ДанныеРасширения.ИдРасширения;
	Запись.Прочитать();
	
	Если Не Запись.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	РасширенияБД = РасширенияКонфигурации.Получить(
		Новый Структура("УникальныйИдентификатор", Запись.ИдРасширенияВИБ),
		ИсточникРасширенийКонфигурации.БазаДанных);
	
	Если РасширенияБД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИзменяетСтруктуруДанных = РасширенияБД[0].ИзменяетСтруктуруДанных();
	
	Попытка
		Если ИзменяетСтруктуруДанных Тогда
			УдалитьРасширениеИзменяющееДанные(ДанныеРасширения, РасширенияБД, Запись);
		Иначе
			УдалитьРасширениеНеИзменяющееДанные(ДанныеРасширения, РасширенияБД, Запись);
		КонецЕсли;		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстОшибки = 
			СтрШаблон(НСтр("ru = 'Ошибка удаления расширения %1 версии %2'"), 
				ДанныеРасширения.ИмяРасширения, ДанныеРасширения.ВерсияРасширения)
			+ Символы.ПС
			+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяСобытия = НСтр("ru = 'Расширения 1С:Плюс.Ошибка удаления расширения'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, , 
			Строка(ДанныеРасширения.ИдРасширения), 
			ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Расширения 1С:Плюс.Удаление расширения'"),
		УровеньЖурналаРегистрации.Информация, , ,
		СтрШаблон(НСтр("ru = 'Удалено расширение %1 версии %2'"),
			ДанныеРасширения.ИмяРасширения,
			ДанныеРасширения.ВерсияРасширения));
		
КонецПроцедуры

Функция РасширениеИзменяетСтруктуруДанных(ИдРасширения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ПлюсУстановленныеРасширения.СоздатьМенеджерЗаписи();
	Запись.ИдРасширения = ИдРасширения;
	Запись.Прочитать();
	
	Если Не Запись.Выбран() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РасширенияБД = РасширенияКонфигурации.Получить(
		Новый Структура("УникальныйИдентификатор", Запись.ИдРасширенияВИБ),
		ИсточникРасширенийКонфигурации.БазаДанных);
	
	Если РасширенияБД.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат РасширенияБД[0].ИзменяетСтруктуруДанных();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьРасширениеИзменяющееДанные(ДанныеРасширения, РасширенияБД, Запись)
	
	УдалитьЗаписьИРасширение(ДанныеРасширения, РасширенияБД, Запись)
	
КонецПроцедуры

Процедура УдалитьРасширениеНеИзменяющееДанные(ДанныеРасширения, РасширенияБД, Запись)
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПлюсУстановленныеРасширения");
	ЭлементБлокировки.УстановитьЗначение("ИдРасширения", ДанныеРасширения.ИдРасширения);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		УдалитьЗаписьИРасширение(ДанныеРасширения, РасширенияБД, Запись);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьЗаписьИРасширение(ДанныеРасширения, РасширенияБД, Запись)
	
	РасширенияБД[0].Удалить();
	Запись.Удалить();
	УдалитьЗаданияРасширения(Строка(ДанныеРасширения.ИдРасширения));
	
КонецПроцедуры

Функция ИнформацияОРасширении(Идентификатор, ИдентификаторВерсии, Имя, Версия)
	
	ДанныеРасширения = Новый Структура();
	ДанныеРасширения.Вставить("ExtId", Строка(Идентификатор));
	ДанныеРасширения.Вставить("ExtVersionId", Строка(ИдентификаторВерсии));
	ДанныеРасширения.Вставить("Name", Строка(Имя));
	ДанныеРасширения.Вставить("Version", Строка(Версия));
	
	Возврат ДанныеРасширения;
	
КонецФункции

Процедура СинхронизироватьРасширение(ВыборкаРасширения, ЗаданияНаУстановку, Область, ДляУстановкиВМонопольном)
	Задание = ЗаданияНаУстановку[ВыборкаРасширения.ИдВерсииРасширения];
	
	Если ВыборкаРасширения.ИзменяетСтруктуруДанных Тогда
		Запись = РегистрыСведений.ПлюсРасширенияКУстановке.СоздатьМенеджерЗаписи();
		Если Область <> 0 Тогда
			Запись.ОбластьДанныхВспомогательныеДанные = Область;
		КонецЕсли;
		Запись.ИдРасширения = Новый УникальныйИдентификатор(Задание.ExtId);
		Запись.ИдВерсииРасширения = Новый УникальныйИдентификатор(Задание.ExtVersionId);
		Запись.ИмяРасширения = Задание.Name;
		Запись.ВерсияРасширения = Задание.Version;
		Запись.ЗаданиеНаУстановку = Новый ХранилищеЗначения(Задание, Новый СжатиеДанных(9));
		Запись.Записать();
		
		ДляУстановкиВМонопольном.Добавить(Задание.Name);
		Возврат;
	КонецЕсли;
	
	Если ВыборкаРасширения.Удалить Тогда
		УдалитьРасширение(ВыборкаРасширения);
	Иначе
		УстановитьРасширение(Задание);
	КонецЕсли;
КонецПроцедуры

Функция ТаблицаУстановленныхРасширений()
	ЗапросКБД = Новый Запрос("ВЫБРАТЬ
	|	УстановленныеРасширенияМагазина.ИдВерсииРасширения КАК ИдВерсииРасширения,
	|	УстановленныеРасширенияМагазина.ИмяРасширения КАК ИмяРасширения,
	|	УстановленныеРасширенияМагазина.ВерсияРасширения КАК ВерсияРасширения,
	|	УстановленныеРасширенияМагазина.ИдРасширенияВИБ КАК ИдРасширенияВИБ,
	|	УстановленныеРасширенияМагазина.ИдРасширения КАК ИдРасширения
	|ИЗ
	|	РегистрСведений.ПлюсУстановленныеРасширения КАК УстановленныеРасширенияМагазина");
	
	ТаблицаРасширений = ЗапросКБД.Выполнить().Выгрузить();
	Возврат ТаблицаРасширений
КонецФункции

Функция ИмяПрофилияБезопасности() Экспорт
	Возврат "Int1cPlus";
КонецФункции

Процедура СинхронизироватьСписокРасширенийСБД(ТаблицаРасширений = Неопределено)
	Если ТаблицаРасширений = Неопределено Тогда
		ТаблицаРасширений = ТаблицаУстановленныхРасширений();
	КонецЕсли;
	
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого ТекСтрока Из ТаблицаРасширений Цикл
		РасширенияБД = РасширенияКонфигурации.Получить(
			Новый Структура("УникальныйИдентификатор", ТекСтрока.ИдРасширенияВИБ)
			, ИсточникРасширенийКонфигурации.БазаДанных);
		Если РасширенияБД.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = РегистрыСведений.ПлюсУстановленныеРасширения.СоздатьМенеджерЗаписи();
		Запись.ИдРасширения = ТекСтрока.ИдРасширения;
		Запись.Удалить();
		УдаляемыеСтроки.Добавить(ТекСтрока);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из УдаляемыеСтроки Цикл
		УдалитьЗаданияРасширения(Строка(ТекСтрока.ИдРасширения));
		ТаблицаРасширений.Удалить(ТекСтрока);
	КонецЦикла;
КонецПроцедуры

Функция НовоеСоединениеСAPI(Таймаут, ПараметрыПодключения)
	Если ПараметрыПодключения.Схема = "http" Тогда
		ЗащищенноеСоединение = Неопределено;
	ИначеЕсли ПараметрыПодключения.Схема = "https" Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	Иначе 
		
		ВызватьИсключение НСтр("ru = 'Не удалось определить схему запроса к МС.'");
		
	КонецЕсли;
	
	Возврат  Новый HTTPСоединение(ПараметрыПодключения.Хост, ПараметрыПодключения.Порт, , ,
		ПолучениеФайловИзИнтернета.ПолучитьПрокси(ПараметрыПодключения.Схема), 10, ЗащищенноеСоединение, Ложь);
КонецФункции

Процедура ПодтвердитьУстановкуРасширения(ЗаданиеНаУстановку, ИдСеанса, ЭтоУстановкаОбновлений)
	
	УдалитьРасширениеИзСпискаКУстановке(ЗаданиеНаУстановку.ExtId);
	
	Если ЭтоУстановкаОбновлений Тогда
		Возврат;
	КонецЕсли;
	
	Метод = СтрШаблон("/%1/InstallComplete", Строка(ИдСеанса));
	ПараметрыПодключения = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресAPI() + Метод);
	Соединение = НовоеСоединениеСAPI(20, ПараметрыПодключения);
	
	Запрос = Новый HTTPЗапрос(ПараметрыПодключения.ПутьНаСервере);
	
	ИнформацияОРасширении = ИнформацияОРасширении(
		ЗаданиеНаУстановку.ExtId,
		ЗаданиеНаУстановку.ExtVersionId,
		ЗаданиеНаУстановку.Name,
		ЗаданиеНаУстановку.Version);
	Запрос.УстановитьТелоИзСтроки(ОбщегоНазначения.ЗначениеВJSON(ИнформацияОРасширении));
	
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
		
КонецПроцедуры

Процедура УдалитьРасширениеИзКорзины(ЗаданиеНаУстановку, ИдСеанса)
	
	УдалитьРасширениеИзСпискаКУстановке(ЗаданиеНаУстановку.ExtId);
	
	Метод = СтрШаблон("/%1/Cart/Delete", Строка(ИдСеанса));
	ПараметрыПодключения = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресAPI() + Метод);
	Соединение = НовоеСоединениеСAPI(20, ПараметрыПодключения);
	
	Запрос = Новый HTTPЗапрос(ПараметрыПодключения.ПутьНаСервере);
	
	ДанныеРасширения = Новый Структура();
	ДанныеРасширения.Вставить("ExtVersionId", ЗаданиеНаУстановку.ExtVersionId);
	
	ТелоОтвета = Новый Структура();
	ТелоОтвета.Вставить("Extensions", Новый Массив());
	ТелоОтвета.Extensions.Добавить(ДанныеРасширения);
	
	Запрос.УстановитьТелоИзСтроки(ОбщегоНазначения.ЗначениеВJSON(ТелоОтвета));
	
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьРасширениеИзСпискаКУстановке(ИдентификаторРасширения)
	
	УдалениеЗадания = РегистрыСведений.ПлюсРасширенияКУстановке.СоздатьМенеджерЗаписи();
	УдалениеЗадания.ИдРасширения = Новый УникальныйИдентификатор(ИдентификаторРасширения);
	УдалениеЗадания.Удалить();
	
КонецПроцедуры

Функция ПолучитьДвоичныеДанныеРасширения(ПутькДвоичнымДанным)
	ПараметрыПодключения = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПутькДвоичнымДанным);
	
	Соединение = НовоеСоединениеСAPI(120, ПараметрыПодключения);
		
	Запрос = Новый HTTPЗапрос(ПараметрыПодключения.ПутьНаСервере);
	Ответ = Соединение.Получить(Запрос);
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат Ответ.ПолучитьТелоКакДвоичныеДанные();
КонецФункции

Процедура АктуализироватьРегламентныеЗадания(ЗаданиеНаУстановку)
	УдалитьЗаданияРасширения(ЗаданиеНаУстановку.ExtId);
	
	Для Каждого Команда Из ЗаданиеНаУстановку.ScheduledJobs Цикл
		ПараметрыМетода = Новый Массив;
		ПараметрыМетода.Добавить(ЗаданиеНаУстановку.ExtId);
		ПараметрыМетода.Добавить(Команда.Id);
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("Ключ", Команда.Id);
		ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Команда.Schedule);
		ПараметрыЗадания.Вставить("Расписание", 
			СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON, Тип("РасписаниеРегламентногоЗадания")));
		
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ПлюсЗапускЗаданийРасширений);
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьЗаданияРасширения(ИдРасширения)
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.ПлюсЗапускЗаданийРасширений.ИмяМетода);
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Для Каждого Задание Из Задания Цикл
		Если Задание.Параметры.Количество() = 0 Или Задание.Параметры[0] <> ИдРасширения Тогда
			Продолжить;
		КонецЕсли;
		
		РегламентныеЗаданияСервер.УдалитьЗадание(Задание.УникальныйИдентификатор);
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьРасширение(ЗаданиеНаУстановку)
	ЭтоРазделенныйСеанс = ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
		
	ДвоичныеДанныеРасширения = ПолучитьДвоичныеДанныеРасширения(ЗаданиеНаУстановку.PathToData);
	
	ИдРасширения = Новый УникальныйИдентификатор(ЗаданиеНаУстановку.ExtId);
	ИдВерсииРасширения = Новый УникальныйИдентификатор(ЗаданиеНаУстановку.ExtVersionId);
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПлюсУстановленныеРасширения");
	ЭлементБлокировки.УстановитьЗначение("ИдРасширения", ИдРасширения);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ИзменяетСтруктуруДанных = ЗаданиеНаУстановку.ModifiesDataStructure; 
	
	Если Не ИзменяетСтруктуруДанных Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		Если Не ИзменяетСтруктуруДанных Тогда
			Блокировка.Заблокировать();
		КонецЕсли;

		РасширениеИБ = РасширенияКонфигурации.Создать();
		
		Запись = РегистрыСведений.ПлюсУстановленныеРасширения.СоздатьМенеджерЗаписи();
		Запись.ИдРасширения = ИдРасширения;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			РасширенияБД = РасширенияКонфигурации.Получить(
				Новый Структура("УникальныйИдентификатор", Запись.ИдРасширенияВИБ)
				, ИсточникРасширенийКонфигурации.БазаДанных);
			Если Запись.ИдВерсииРасширения = ИдВерсииРасширения Тогда
				Если РасширенияБД.Количество() <> 0 Тогда
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					Возврат;
				КонецЕсли;
			ИначеЕсли РасширенияБД.Количество() <> 0 Тогда 
				РасширениеИБ = РасширенияБД[0];
			КонецЕсли;
		КонецЕсли;
		
		РасширениеИБ.ОбластьДействия = ОбластьДействияРасширенияКонфигурации.РазделениеДанных;
		Если ЭтоРазделенныйСеанс Тогда
			РасширениеИБ.БезопасныйРежим = ИмяПрофилияБезопасности();                         
			РасширениеИБ.ОбластьДействия = ОбластьДействияРасширенияКонфигурации.РазделениеДанных;
		Иначе
			РасширениеИБ.БезопасныйРежим = Ложь;                                              
			РасширениеИБ.ОбластьДействия = ОбластьДействияРасширенияКонфигурации.ИнформационнаяБаза;
		КонецЕсли;
		РасширениеИБ.ЗащитаОтОпасныхДействий = ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений();
		
		ДанныеПроверки = РасширениеИБ.ПроверитьВозможностьПрименения(ДвоичныеДанныеРасширения);
		СтрокиПроверки = Новый Массив;
		Для Каждого ОписаниеПроблемы Из ДанныеПроверки Цикл
			СтрокиПроверки.Добавить(СтрШаблон("%1 %2", ОписаниеПроблемы.Важность, ОписаниеПроблемы.Описание));
		КонецЦикла;
		Если СтрокиПроверки.Количество() <> 0 Тогда
			ВызватьИсключение СтрСоединить(СтрокиПроверки, Символы.ПС);
		КонецЕсли;
		
		РасширениеИБ.Записать(ДвоичныеДанныеРасширения);
		
		АктуализироватьРегламентныеЗадания(ЗаданиеНаУстановку);
		
		Запись.ИдРасширения = ИдРасширения;
		Запись.ИдВерсииРасширения = ИдВерсииРасширения;
		Запись.ИдРасширенияВИБ = РасширениеИБ.УникальныйИдентификатор;
		Запись.ИмяРасширения = ЗаданиеНаУстановку.Name;
		Запись.ВерсияРасширения = ЗаданиеНаУстановку.Version;
		Запись.ДатаУстановкиОбновления = ТекущаяУниверсальнаяДата();
		Запись.Записать();
		
		Если Не ИзменяетСтруктуруДанных Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстОшибки = 
			СтрШаблон(НСтр("ru = 'Ошибка установки расширения %1 версии %2'"), 
				ЗаданиеНаУстановку.Name, ЗаданиеНаУстановку.Version)
			+ Символы.ПС
			+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяСобытия = НСтр("ru = 'Расширения 1С:Плюс.Ошибка записи расширения'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Расширения 1С:Плюс.Установка расширения'"),
		УровеньЖурналаРегистрации.Информация, , ,
		СтрШаблон(НСтр("ru = 'Установлено расширение %1 версии %2'"), 
			ЗаданиеНаУстановку.Name, ЗаданиеНаУстановку.Version));
КонецПроцедуры

#КонецОбласти

