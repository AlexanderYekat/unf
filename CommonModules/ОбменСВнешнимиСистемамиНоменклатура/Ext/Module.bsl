
Функция ТоварыНайти( ПараметрыКонтекст ) Экспорт
	
	Если ТипЗнч( ПараметрыКонтекст ) <> Тип( "Структура" ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтладкаВключена = ПараметрыКонтекст.ОтладкаВключена;
	
	ИспользоватьПоискПоБазеДанных1С = ПараметрыКонтекст.ИспользоватьПоискПоБазеДанных1С;
	ИспользоватьПолнотекстовыйПоиск = ПараметрыКонтекст.ИспользоватьПолнотекстовыйПоиск;
	
	ОписанияТоваров = ПараметрыКонтекст.ОписанияТоваров;
	
	ОписанияТоваровКешИдентификаторы = ПараметрыКонтекст.ОписанияТоваровКешИдентификаторы;
	Для Каждого ОписанияТоваровЭлемент Из ОписанияТоваров Цикл
		ОписанияТоваровКешИдентификаторы.Вставить( ОписанияТоваровЭлемент.ИдентификаторЭлемента, ОписанияТоваровЭлемент );
	КонецЦикла;
	
	// разбивка описаний товаров на порции
	ОписанияТоваровПорции = ПараметрыКонтекст.ОписанияТоваровПорции;
	Если ПараметрыКонтекст.КоличествоОписанийТоваровВОднойПорции = 0 Тогда
		
		ОписанияТоваровПорции.Добавить( ОписанияТоваров );
		
	Иначе
		
		ОписанияТоваровПорция = Новый Массив;
		НомерВМассивеПП = 0;
		Для Каждого ОписанияТоваровСтрока Из ОписанияТоваров Цикл
			
			НомерВМассивеПП = НомерВМассивеПП + 1;
			ОписанияТоваровПорция.Добавить( ОписанияТоваровСтрока );
			
			Если НомерВМассивеПП = ПараметрыКонтекст.КоличествоОписанийТоваровВОднойПорции Тогда
				ОписанияТоваровПорции.Добавить( ОписанияТоваровПорция );
				ОписанияТоваровПорция = Новый Массив;
				НомерВМассивеПП = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОписанияТоваровПорция.Количество() > 0 Тогда
			ОписанияТоваровПорции.Добавить( ОписанияТоваровПорция );
			ОписанияТоваровПорция = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьПолнотекстовыйПоиск = Истина Тогда
		ПолнотекстовыйПоискВыполнен = ТоварыНайтиПоискПолнотекстовыйВыполнить( ПараметрыКонтекст );
	КонецЕсли;
	
	Если ИспользоватьПоискПоБазеДанных1С = Истина Тогда
		ПоискПоБазеДанных1СВыполнен = ТоварыНайтиПоискПоБазеДанных1СВыполнить( ПараметрыКонтекст );
	КонецЕсли;
	
	УчетнаяЗапись = ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( ПараметрыКонтекст, "УчетнаяЗапись", Неопределено );
	// заполнение основного результата поиска
	Для Каждого ОписанияТоваровЭлемент Из ОписанияТоваров Цикл
		
		ТоварРезультатыПоиска = ОписанияТоваровЭлемент.РезультатыПоиска;
		ОписанияТоваровЭлемент.РезультатПоискаКоличество = ТоварРезультатыПоиска.Количество();
		
		
		Если ОтладкаВключена = Истина Тогда
			СообщениеТекст = 
			"ТоварыНайти: " + Символы.ПС
			+ "Идентификатор элемента: " + ОписанияТоваровЭлемент.ИдентификаторЭлемента + Символы.ПС
			+ "Наименование: " + ОписанияТоваровЭлемент.Наименование + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ "Результат поиска: " + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ТоварРезультатыПоиска );
			
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( СообщениеТекст, УчетнаяЗапись );
		КонецЕсли;
		
		
		Если ТоварРезультатыПоиска.Количество() > 0 Тогда
			
			ТоварРезультатыПоиска.Сортировать( "ВероятностьСовпадения Убыв" );
			
			ТоварРезультатыПоискаЭлемент = ТоварРезультатыПоиска[ 0 ];
			
			ОписанияТоваровЭлемент.РезультатПоискаНоменклатура = ТоварРезультатыПоискаЭлемент.Номенклатура;
			ОписанияТоваровЭлемент.РезультатПоискаХарактеристика = ТоварРезультатыПоискаЭлемент.Характеристика;
			ОписанияТоваровЭлемент.РезультатПоискаВероятностьСовпадения = ТоварРезультатыПоискаЭлемент.ВероятностьСовпадения;
			ОписанияТоваровЭлемент.РезультатПоискаОписание = ТоварРезультатыПоискаЭлемент.Описание;
			ОписанияТоваровЭлемент.РезультатПоискаВесПоиска = ТоварРезультатыПоискаЭлемент.ВесПоиска;
		КонецЕсли;	
		
	КонецЦикла;
	
	ТоварыНайтиРезультатыПоискаДублиУдалить( ПараметрыКонтекст );
	
	Если ПараметрыКонтекст.ИспользоватьИтерационныйПоиск = Истина Тогда
		ОписанияТоваровНеНайдены = ОписанияТоваров.НайтиСтроки( Новый Структура( "РезультатПоискаКоличество", 0 ) );
		Если ОписанияТоваровНеНайдены.Количество() > 0 Тогда
			Сообщить( "ТоварыНайти: Есть не найденные товары: " + ОписанияТоваровНеНайдены.Количество() + ": Итерационный поиск в разработке .... " );
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ТоварыНайтиРезультатыПоискаДублиУдалить( ПараметрыКонтекст )
	
	Для Каждого ОписанияТоваровЭлемент Из ПараметрыКонтекст.ОписанияТоваров Цикл
		
		ТоварРезультатыПоиска = ОписанияТоваровЭлемент.РезультатыПоиска;
		Если ОписанияТоваровЭлемент.РезультатПоискаКоличество < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементыУдалить = Новый Массив;
		
		ТекущаяНоменклатура = Неопределено;
		ТекущаяХарактеристика = Неопределено;
		
		ТоварРезультатыПоиска.Сортировать( "Номенклатура, Характеристика, ВероятностьСовпадения Убыв", Новый СравнениеЗначений );
		
		// поиск дублей
		Для Каждого ТоварРезультатыПоискаЭлементы Из ТоварРезультатыПоиска Цикл
			
			Если ТекущаяНоменклатура = ТоварРезультатыПоискаЭлементы.Номенклатура
				И ТекущаяХарактеристика = ТоварРезультатыПоискаЭлементы.Характеристика Тогда
				
				ЭлементыУдалить.Добавить( ТоварРезультатыПоискаЭлементы );
				
			Иначе
				
				ТекущаяНоменклатура = ТоварРезультатыПоискаЭлементы.Номенклатура;
				ТекущаяХарактеристика = ТоварРезультатыПоискаЭлементы.Характеристика;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// удаление дублей
		Для Каждого ЭлементУдалить Из ЭлементыУдалить Цикл
			ТоварРезультатыПоиска.Удалить( ЭлементУдалить );
		КонецЦикла;
		
		ТоварРезультатыПоиска.Сортировать( "ВероятностьСовпадения Убыв" );
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ТоварыНайтиПоискПолнотекстовыйВыполнить( ПараметрыКонтекст ) Экспорт
	
	Если ТипЗнч( ПараметрыКонтекст ) <> Тип( "Структура" ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПолнотекстовыйПоискРазрешен = ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить;
	Если ПолнотекстовыйПоискРазрешен = Ложь Тогда
		ПараметрыКонтекст.Ошибки.Добавить( "Полнотекстовый поиск не выполнен. Полнотекстовый поиск отключен в настройках 1С." );	
		Возврат Ложь;
	КонецЕсли;
	
	Если ПолнотекстовыйПоиск.ИндексАктуален() = Ложь Тогда
		ПараметрыКонтекст.Ошибки.Добавить( "Полнотекстовый поиск не актуален. Дата актуальности: " + ПолнотекстовыйПоиск.ДатаАктуальности() + ". Результат поиска можт быть некорректным." );	
	КонецЕсли;
	
	МетодПоиска = ТоварыНайтиМетодПоискаПолнотекстовый();
	
	СписокПолнотекстовогоПоиска = ПолнотекстовыйПоиск.СоздатьСписок();
	СписокПолнотекстовогоПоиска.ОграничиватьСтрокуПоиска = Ложь;
	СписокПолнотекстовогоПоиска.ИспользованиеМетаданных = ИспользованиеМетаданныхПолнотекстовогоПоиска.НеИспользовать;
	СписокПолнотекстовогоПоиска.ПолучатьОписание = Истина;
	СписокПолнотекстовогоПоиска.ПолучатьПредставление = Ложь;
	СписокПолнотекстовогоПоиска.ПорогНечеткости = 0;
	
	МинимальнаяДлинаСловаДляПоискаПоОписанию = 2;
	МинимальнаяДлинаСловаДляПоискаПоСинонимам = 2;
	МаксимальноеКоличествоСловИзОписанияДляПоиска = 20;
	МаксимальноеКоличествоРезультатаПоиска = 10;
	
	СписокПолнотекстовогоПоиска.РазмерПорции = МаксимальноеКоличествоРезультатаПоиска;
	
	Если ПараметрыКонтекст.ПоискПоНоменклатуре = Истина Тогда
		СписокПолнотекстовогоПоиска.ОбластьПоиска.Добавить( Метаданные.Справочники.Номенклатура );
	КонецЕсли;	
	
	Если ПараметрыКонтекст.ПоискПоХарактеристикамНоменклатуры = Истина Тогда
		СписокПолнотекстовогоПоиска.ОбластьПоиска.Добавить( Метаданные.Справочники.ХарактеристикиНоменклатуры );
	КонецЕсли;
	
	Если ПараметрыКонтекст.ПоискПоШтрихкодам = Истина Тогда
		СписокПолнотекстовогоПоиска.ОбластьПоиска.Добавить( Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры );
	КонецЕсли;	
	
	Если СписокПолнотекстовогоПоиска.ОбластьПоиска.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	СимволыРазделителиСлов = СимволыРазделителиСловПолучить();
	
	ТипХарактеристика = Тип( "СправочникСсылка.ХарактеристикиНоменклатуры" );
	ТипНоменклатура = Тип( "СправочникСсылка.Номенклатура" );
	ТипКатегорииНоменклатуры = Тип( "СправочникСсылка.КатегорииНоменклатуры" );
	ТипШтрихкоды = Тип( "РегистрСведенийКлючЗаписи.ШтрихкодыНоменклатуры" );
	
	Для Каждого ОписанияТоваровЭлемент Из ПараметрыКонтекст.ОписанияТоваров Цикл
		
		ВыражениеПоиска = Новый Массив;
		
		ВесПоиска = 0;
		
		Если ПараметрыКонтекст.ПоискПоНаименованиям = Истина Тогда
			
			НаименованиеВыражение = СокрЛП( ОписанияТоваровЭлемент.Наименование );
			Если ЗначениеЗаполнено( НаименованиеВыражение ) Тогда
				
				НаименованиеВыражениеСлова = СтрРазделить( НаименованиеВыражение, СимволыРазделителиСлов, Ложь );
				
				Если ПараметрыКонтекст.НечеткийПоискКоличествоОтличающихсяСимволовВКаждомСлове > 0 Тогда
					
					НаименованиеВыражениеСловаДляПоиска = Новый Массив;
					Для Каждого Слово Из НаименованиеВыражениеСлова Цикл
						
						Если СтрДлина( Слово ) < ПараметрыКонтекст.НечеткийПоискКоличествоОтличающихсяСимволовВКаждомСлове Тогда
							НаименованиеВыражениеСловаДляПоиска.Добавить( Слово );
							Продолжить;
						КонецЕсли;
						
						НаименованиеВыражениеСловаДляПоиска.Добавить( Слово + "~" + Формат( ПараметрыКонтекст.НечеткийПоискКоличествоОтличающихсяСимволовВКаждомСлове, "ЧГ=0" ) );
					КонецЦикла;
					
					НаименованиеВыражениеСлова = НаименованиеВыражениеСловаДляПоиска;
				КонецЕсли;// НечеткийПоискКоличествоОтличающихсяСимволовВКаждомСлове
				
				Если ПараметрыКонтекст.ПоискПоСинонимам = Истина Тогда
					
					НаименованиеВыражениеСловаДляПоиска = Новый Массив;
					Для Каждого Слово Из НаименованиеВыражениеСлова Цикл
						
						Если СтрДлина( Слово ) <= МинимальнаяДлинаСловаДляПоискаПоСинонимам Тогда
							НаименованиеВыражениеСловаДляПоиска.Добавить( Слово );
							Продолжить;
						КонецЕсли;
						
						НаименованиеВыражениеСловаДляПоиска.Добавить( "!" + Слово );
					КонецЦикла;
					
					НаименованиеВыражениеСлова = НаименованиеВыражениеСловаДляПоиска;
					
				КонецЕсли;// ПоискПоСинонимам
				
				НаименованиеВыражение = СтрСоединить( НаименованиеВыражениеСлова, " " );
				ВыражениеПоиска.Добавить( НаименованиеВыражение );
				
				ВесПоиска = ВесПоиска + 1;
			КонецЕсли;
			
		КонецЕсли; // ПоискПоНаименованиям
		
		Если ПараметрыКонтекст.ПоискПоАртикулам = Истина Тогда
			Если ЗначениеЗаполнено( ОписанияТоваровЭлемент.Артикул ) Тогда
				ВыражениеПоиска.Добавить( ОписанияТоваровЭлемент.Артикул );
				
				ВесПоиска = ВесПоиска + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКонтекст.ПоискПоКодам = Истина Тогда
			Если ЗначениеЗаполнено( ОписанияТоваровЭлемент.Код ) Тогда
				ВыражениеПоиска.Добавить( ОписанияТоваровЭлемент.Код );
				
				ВесПоиска = ВесПоиска + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКонтекст.ПоискПоКатегориям = Истина Тогда
			Если ЗначениеЗаполнено( ОписанияТоваровЭлемент.Категория ) Тогда
				ВыражениеПоиска.Добавить( ОписанияТоваровЭлемент.Категория );
				
				ВесПоиска = ВесПоиска + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКонтекст.ПоискПоОписаниям = Истина Тогда
			Если ЗначениеЗаполнено( ОписанияТоваровЭлемент.Описание ) Тогда
				
				ОписаниеВыражениеСлова = СтрРазделить( ОписанияТоваровЭлемент.Описание, СимволыРазделителиСлов, Ложь );
				
				КоличествоСловДляПоиска = 0;
				ОписаниеВыражениеСловаДляПоиска = Новый Массив;
				Для Каждого Слово Из ОписаниеВыражениеСлова Цикл
					
					Если СтрДлина( Слово ) <= МинимальнаяДлинаСловаДляПоискаПоОписанию Тогда
						Продолжить;
					КонецЕсли;
					
					ОписаниеВыражениеСловаДляПоиска.Добавить( Слово );
					
					КоличествоСловДляПоиска = КоличествоСловДляПоиска + 1;
					Если КоличествоСловДляПоиска >= МаксимальноеКоличествоСловИзОписанияДляПоиска Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				ОписаниеВыражение = СтрСоединить( ОписаниеВыражениеСловаДляПоиска, " " );
				ВыражениеПоиска.Добавить( ОписаниеВыражение );
				
				ВесПоиска = ВесПоиска + 1;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКонтекст.ПоискПоШтрихкодам = Истина Тогда
			// условие ИЛИ
			Штрихкоды = ОписанияТоваровЭлемент.Штрихкоды.ВыгрузитьКолонку( "Значение" );
			Если Штрихкоды.Количество() > 0 Тогда
				ШтрихкодыВыражение = "( " + СтрСоединить( Штрихкоды, " ИЛИ " ) + " )";
				ВыражениеПоиска.Добавить( ШтрихкодыВыражение );
				
				ВесПоиска = ВесПоиска + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКонтекст.ПоискПоАтрибутам = Истина Тогда
			
			Атрибуты = ОписанияТоваровЭлемент.Атрибуты;
			Для Каждого Атрибут Из Атрибуты Цикл
				
				АтрибутВыражение = СокрЛП( Атрибут.Имя );
				Если ПараметрыКонтекст.ПоискПоАтрибутамИмяИскать = Истина Тогда
					ВыражениеПоиска.Добавить( АтрибутВыражение );
				КонецЕсли;
				
				АтрибутВыражение = СокрЛП( Атрибут.Значение );
				ВыражениеПоиска.Добавить( АтрибутВыражение );
				
				ВесПоиска = ВесПоиска + 1;
			КонецЦикла;
			
		КонецЕсли;
		
		СтрокаПоиска = СтрСоединить( ВыражениеПоиска, " " );
		
		Если ПустаяСтрока( СтрокаПоиска ) Тогда
			Продолжить;
		КонецЕсли;
		
		УчетнаяЗапись = ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( ПараметрыКонтекст, "УчетнаяЗапись", Неопределено );
		Если ПараметрыКонтекст.ОтладкаВключена = Истина Тогда
			СообщениеТекст =  "ТоварыНайтиПоискПолнотекстовыйВыполнить:" + Символы.ПС
			+ "ИдентификаторЭлемента: " + ОписанияТоваровЭлемент.ИдентификаторЭлемента + Символы.ПС
			+ "Наименование: " + ОписанияТоваровЭлемент.Наименование + Символы.ПС
			+ "СтрокаПоиска: " + СтрокаПоиска ;
			
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( СообщениеТекст, УчетнаяЗапись );
		КонецЕсли;
		
		
		// выполнение полнотекстового поиска по одному описанию товара
		СписокПолнотекстовогоПоиска.СтрокаПоиска = СтрокаПоиска;
		Попытка
			СписокПолнотекстовогоПоиска.ПерваяЧасть();
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );

			ПараметрыКонтекст.Ошибки.Добавить( "Полнотекстовый поиск не выполнен: "
			+ ОписанияТоваровЭлемент.Наименование + ": Ошибка: " + ТекстОшибки );	

			СообщениеТекст =  "ТоварыНайтиПоискПолнотекстовыйВыполнить: Ошибка: " + Символы.ПС
			+ "ИдентификаторЭлемента: " + ОписанияТоваровЭлемент.ИдентификаторЭлемента + Символы.ПС
			+ "Наименование: " + ОписанияТоваровЭлемент.Наименование + Символы.ПС
			+ ТекстОшибки ;
            
            ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( СообщениеТекст, УчетнаяЗапись, Истина );
            
			Продолжить;
		КонецПопытки;
		
		
		Для Номер = 1 По СписокПолнотекстовогоПоиска.Количество() Цикл
			
			СписокПолнотекстовогоПоискаЭлемент = СписокПолнотекстовогоПоиска.Получить( Номер - 1 );
			
			Значение = СписокПолнотекстовогоПоискаЭлемент.Значение;
			ЗначениеТип = ТипЗнч( Значение );
			Если ЗначениеТип = ТипХарактеристика Тогда
				ХарактеристикаВладелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта( Значение, "Владелец" );
				Если ТипЗнч( ХарактеристикаВладелец ) = ТипКатегорииНоменклатуры Тогда
					// исключим характеристику, у которой владелец Категория
					Продолжить;
				КонецЕсли;
				
				Номенклатура = ХарактеристикаВладелец;
				Характеристика = Значение;
				
			ИначеЕсли ЗначениеТип = ТипНоменклатура Тогда
				
				Номенклатура = Значение;
				Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				
			ИначеЕсли ЗначениеТип = ТипШтрихкоды Тогда
				
				Номенклатура = Значение.Номенклатура;
				Характеристика = Значение.Характеристика;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
			НоменклатураЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта( Номенклатура, "ЭтоГруппа, ПометкаУдаления" );
			
			Если НоменклатураЗначенияРеквизитов.ПометкаУдаления = Истина Тогда
				Продолжить;
			КонецЕсли;

			Если НоменклатураЗначенияРеквизитов.ЭтоГруппа = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено( Характеристика ) 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта( Характеристика, "ПометкаУдаления" ) = Истина Тогда
				Продолжить;
			КонецЕсли;

			РезультатПоиска = ОписанияТоваровЭлемент.РезультатыПоиска.Добавить();
			
			РезультатПоиска.Номенклатура = Номенклатура;
			РезультатПоиска.Характеристика = Характеристика;
			РезультатПоиска.Описание = СписокПолнотекстовогоПоискаЭлемент.Описание;
			РезультатПоиска.МетодПоиска = МетодПоиска;
			РезультатПоиска.ВероятностьСовпадения = 50;
			РезультатПоиска.ВесПоиска = ВесПоиска;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции


Функция СимволыРазделителиСловПолучить()
	СимволыРазделителиСлов = " `~@""#№$;%:?*()-_+={[]}\|/'<>.,";
	Возврат СимволыРазделителиСлов;
КонецФункции

Функция ТоварыНайтиПоискПоБазеДанных1СВыполнить( ПараметрыКонтекст ) Экспорт
	
	Если ТипЗнч( ПараметрыКонтекст ) <> Тип( "Структура" ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтладкаВключена = ПараметрыКонтекст.ОтладкаВключена;
	ОписанияТоваровПорции = ПараметрыКонтекст.ОписанияТоваровПорции;
	
	УчетнаяЗапись = ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( ПараметрыКонтекст, "УчетнаяЗапись", Неопределено );
	
	ПорцииНомер = 0;
	ПорцииКоличество = ОписанияТоваровПорции.Количество();
	Для Каждого ОписанияТоваровПорция Из ОписанияТоваровПорции Цикл
		
		ПорцииНомер = ПорцииНомер + 1;
		
		Если ОтладкаВключена = Истина Тогда
			
			СообщениеТекст = "ТоварыНайтиПоискПоБазеДанных1СВыполнить: Поиск по порции " + ПорцииНомер
			+ " из " + ПорцииКоличество + ": Количество элементов: " + ОписанияТоваровПорция.Количество();
			
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( СообщениеТекст, УчетнаяЗапись );
		КонецЕсли;
		
		ПараметрыКонтекст.ОписанияТоваровПорцияТекущая = ОписанияТоваровПорция;
		ТоварыНайтиПоискПоБазеДанных1СВыполнитьПоПорции( ПараметрыКонтекст );
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ТоварыНайтиПоискПоБазеДанных1СВыполнитьПоПорции( ПараметрыКонтекст ) Экспорт
	
	Если ТипЗнч( ПараметрыКонтекст ) <> Тип( "Структура" ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МетодПоиска = ТоварыНайтиМетодПоискаЗапросыКБазе1С();
	ОтладкаВключена = ПараметрыКонтекст.ОтладкаВключена;
	ПараметрыКонтекст.НомерЗапросаВПакетеТекущий = 0;
	
	ПараметрыКонтекст.ЗапросОбъект.Текст = "";
	ПараметрыКонтекст.ЗапросОбъект.Параметры.Очистить();
	ПараметрыКонтекст.ЗапросыПакетТексты.Очистить();
	
	Если ПараметрыКонтекст.ПоискПоНоменклатуре = Истина Тогда
		ТоварыНайтиПоискПоБазеДанных1СВыполнитьПоПорцииПоискПоНоменклатуре( ПараметрыКонтекст );
	КонецЕсли;
	
	Если ПараметрыКонтекст.ПоискПоХарактеристикамНоменклатуры = Истина Тогда
		ТоварыНайтиПоискПоБазеДанных1СВыполнитьПоПорцииПоискПоХарактеристикамНоменклатуры( ПараметрыКонтекст );
	КонецЕсли;
	
	Если ПараметрыКонтекст.ПоискПоШтрихкодам = Истина Тогда
		ТоварыНайтиПоискПоБазеДанных1СВыполнитьПоПорцииПоискПоШтрихкодам( ПараметрыКонтекст );
	КонецЕсли;
	
	РазделительПакетовЗапросаСтр = ";" + Символы.ПС + Символы.ПС + "//" + Символы.ПС + Символы.ПС;
	ЗапросыПакетТекст = СтрСоединить( ПараметрыКонтекст.ЗапросыПакетТексты, РазделительПакетовЗапросаСтр );
	
	Если ПустаяСтрока( ЗапросыПакетТекст ) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОтладкаВключена = Истина Тогда
		СообщениеТекст = "ТоварыНайтиПоискПоБазеДанных1СВыполнить: Текст запроса: " + Символы.ПС + Символы.ПС
		+ ЗапросыПакетТекст;
		
		УчетнаяЗапись = ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( ПараметрыКонтекст, "УчетнаяЗапись", Неопределено );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( СообщениеТекст, УчетнаяЗапись );
	КонецЕсли;
	
	ПараметрыКонтекст.ЗапросОбъект.Текст = ЗапросыПакетТекст;
	ЗапросРезультат = ПараметрыКонтекст.ЗапросОбъект.ВыполнитьПакет();
	
	ОписанияТоваровКешИдентификаторы = ПараметрыКонтекст.ОписанияТоваровКешИдентификаторы;
	
	Если ПараметрыКонтекст.ПоискПоНоменклатуре = Истина И ПараметрыКонтекст.ПоискПоНоменклатуреВыполнить = Истина Тогда
		РезультатЗапроса = ЗапросРезультат[ ПараметрыКонтекст.НомерЗапросаВПакетеНоменклатура ];
		НоменклатураВыборка = РезультатЗапроса.Выбрать();
		Пока НоменклатураВыборка.Следующий() Цикл
			
			ОписанияТоваровЭлемент = ОписанияТоваровКешИдентификаторы.Получить( НоменклатураВыборка.ИдентификаторЭлемента );
			Если ОписанияТоваровЭлемент = Неопределено Тогда
				Сообщить( "Техническая ошибка: Идентификатор не найден: " + НоменклатураВыборка.ИдентификаторЭлемента );
				Продолжить;
			КонецЕсли;
			
			// заполним результаты поиска
			
			РезультатПоиска = ОписанияТоваровЭлемент.РезультатыПоиска.Добавить();
			
			РезультатПоиска.Номенклатура = НоменклатураВыборка.Ссылка;
			РезультатПоиска.Описание = "ПоискПоНоменклатуре";
			РезультатПоиска.МетодПоиска = МетодПоиска;
			Если ЗначениеЗаполнено( РезультатПоиска.Характеристика ) Тогда
				РезультатПоиска.ВероятностьСовпадения = 60;
			Иначе
				РезультатПоиска.ВероятностьСовпадения = 50;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыКонтекст.ПоискПоХарактеристикамНоменклатуры = Истина И ПараметрыКонтекст.ПоискПоХарактеристикамНоменклатурыВыполнить = Истина Тогда
		РезультатЗапроса = ЗапросРезультат[ ПараметрыКонтекст.НомерЗапросаВПакетеХарактеристикиНоменклатуры ];
		ХарактеристикиНоменклатурыВыборка = РезультатЗапроса.Выбрать();
		Пока ХарактеристикиНоменклатурыВыборка.Следующий() Цикл
			
			ОписанияТоваровЭлемент = ОписанияТоваровКешИдентификаторы.Получить( ХарактеристикиНоменклатурыВыборка.ИдентификаторЭлемента );
			Если ОписанияТоваровЭлемент = Неопределено Тогда
				Сообщить( "Техническая ошибка: Идентификатор не найден: " + ХарактеристикиНоменклатурыВыборка.ИдентификаторЭлемента );
				Продолжить;
			КонецЕсли;
			
			// заполним результаты поиска
			
			РезультатПоиска = ОписанияТоваровЭлемент.РезультатыПоиска.Добавить();
			
			РезультатПоиска.Номенклатура = ХарактеристикиНоменклатурыВыборка.Номенклатура;
			РезультатПоиска.Характеристика = ХарактеристикиНоменклатурыВыборка.Характеристика;
			РезультатПоиска.Описание = "ПоискПоХарактеристикамНоменклатуры";
			РезультатПоиска.МетодПоиска = МетодПоиска;
			Если ЗначениеЗаполнено( РезультатПоиска.Характеристика ) Тогда
				РезультатПоиска.ВероятностьСовпадения = 65;
			Иначе
				РезультатПоиска.ВероятностьСовпадения = 55;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыКонтекст.ПоискПоШтрихкодам = Истина И ПараметрыКонтекст.ПоискПоШтрихкодамВыполнить = Истина Тогда
		РезультатЗапроса = ЗапросРезультат[ ПараметрыКонтекст.НомерЗапросаВПакетеШтрихкоды ];
		ШтрихкодыВыборка = РезультатЗапроса.Выбрать();
		Пока ШтрихкодыВыборка.Следующий() Цикл
			
			ОписанияТоваровЭлемент = ОписанияТоваровКешИдентификаторы.Получить( ШтрихкодыВыборка.ИдентификаторЭлемента );
			Если ОписанияТоваровЭлемент = Неопределено Тогда
				Сообщить( "Техническая ошибка: Идентификатор не найден: " + ШтрихкодыВыборка.ИдентификаторЭлемента );
				Продолжить;
			КонецЕсли;
			
			// заполним результаты поиска
			
			РезультатПоиска = ОписанияТоваровЭлемент.РезультатыПоиска.Добавить();
			
			РезультатПоиска.Номенклатура = ШтрихкодыВыборка.Номенклатура;
			РезультатПоиска.Характеристика = ШтрихкодыВыборка.Характеристика;
			РезультатПоиска.Описание = "ПоискПоШтрихкодам";
			РезультатПоиска.МетодПоиска = МетодПоиска;
			Если ЗначениеЗаполнено( РезультатПоиска.Характеристика ) Тогда
				РезультатПоиска.ВероятностьСовпадения = 80;
			Иначе
				РезультатПоиска.ВероятностьСовпадения = 70;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ТоварыНайтиПоискПоБазеДанных1СВыполнитьПоПорцииПоискПоНоменклатуре( ПараметрыКонтекст ) Экспорт
	
	Если ТипЗнч( ПараметрыКонтекст ) <> Тип( "Структура" ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	СимволыРазделителиСлов = СимволыРазделителиСловПолучить();
	ОтладкаВключена = ПараметрыКонтекст.ОтладкаВключена;
	
	Ошибки = ПараметрыКонтекст.Ошибки;
	
	МаксимальноеКоличествоРезультатаПоиска = 30;
	МаксимальноеКоличествоСловИзОписанияДляПоиска = 20;
	
	НомерЗапросаВПакетеТекущийСтр = Формат( ПараметрыКонтекст.НомерЗапросаВПакетеТекущий, "ЧН=0; ЧГ=0" );
	
	ПараметрыКонтекст.ПоискПоНоменклатуреВыполнить = Ложь;
	
	ЗапросТексты = Новый Массив;
	
	
	ЗапросТекстПоНоменклатуреШаблон = 
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	&ИдентификаторЭлемента КАК ИдентификаторЭлемента,
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И &Условие001";
	
	ОписанияТоваровНомерЭлемента = 0;
	Для Каждого ОписанияТоваровЭлемент Из ПараметрыКонтекст.ОписанияТоваровПорцияТекущая Цикл
		
		ПоискПоНоменклатуреВыполнитьПоЭлементу = Ложь;
		
		ВесПоиска = 0;
		
		ОписанияТоваровНомерЭлемента = ОписанияТоваровНомерЭлемента + 1;
		ОписанияТоваровНомерЭлементаСтр = Формат( ОписанияТоваровНомерЭлемента, "ЧГ=0" );
		ТекстЗапросаПараметрИдентификаторЭлемента = "ИдентификаторЭлемента" + НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр;
		
		ЗапросТекстПоНоменклатуре = СтрЗаменить( ЗапросТекстПоНоменклатуреШаблон, "&ИдентификаторЭлемента", "&" + ТекстЗапросаПараметрИдентификаторЭлемента );
		ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрИдентификаторЭлемента, ОписанияТоваровЭлемент.ИдентификаторЭлемента );
		
		ЗапросТекстУсловия = Новый Массив;
		
		Если ПараметрыКонтекст.ПоискПоАтрибутам = Истина Тогда
			
			Атрибуты = ОписанияТоваровЭлемент.Атрибуты;
			
			ТекстЗапросаАтрибуты = Новый Массив;
			
			НомерАтрибута = 0;
			Для Каждого Атрибут Из Атрибуты Цикл
				
				НомерАтрибута = НомерАтрибута + 1;
				НомерАтрибутаСтр = НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр + Формат( НомерАтрибута, "ЧГ=0" );
				
				ТекстЗапросаПараметрАтрибутЗначение = "АтрибутЗначение" + НомерАтрибутаСтр;
				ТекстЗапросаПараметрАтрибутЗначениеЧисло = ТекстЗапросаПараметрАтрибутЗначение + "Число";
				
				ТекстЗапросаАтрибутПсевдонимТабицы = "ДополнительныеРеквизиты" + НомерАтрибутаСтр;
				
				ТекстЗапросаАтрибут = "ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК "
				+ ТекстЗапросаАтрибутПсевдонимТабицы + Символы.ПС + "ПО "
				+ "Номенклатура.Ссылка = " + ТекстЗапросаАтрибутПсевдонимТабицы + ".Ссылка" + Символы.ПС + "И ";
				
				АтрибутТип = ТипЗнч( Атрибут.Значение );
				
				Если АтрибутТип = Тип( "Строка" ) Тогда
					
					ТекстЗапросаАтрибут = ТекстЗапросаАтрибут
					+ "( СТРНАЙТИ( ВЫРАЗИТЬ( " + ТекстЗапросаАтрибутПсевдонимТабицы + ".Значение КАК СТРОКА ), &" + ТекстЗапросаПараметрАтрибутЗначение + " ) > 0" + Символы.ПС
					+ "ИЛИ СТРНАЙТИ( " + ТекстЗапросаАтрибутПсевдонимТабицы + ".Значение.Наименование, &" + ТекстЗапросаПараметрАтрибутЗначение + " ) > 0 )";
					
				Иначе
					
					ТекстЗапросаАтрибут = ТекстЗапросаАтрибут
					+ ТекстЗапросаАтрибутПсевдонимТабицы + ".Значение = &" + ТекстЗапросаПараметрАтрибутЗначение;
					
				КонецЕсли;
				
				ТекстЗапросаАтрибуты.Добавить( ТекстЗапросаАтрибут );
				
				ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрАтрибутЗначение, Атрибут.Значение );
				
				ПараметрыКонтекст.ПоискПоНоменклатуреВыполнить = Истина;
				ПоискПоНоменклатуреВыполнитьПоЭлементу = Истина;
				
				ВесПоиска = ВесПоиска + 1;
				
			КонецЦикла;
			
			Если ТекстЗапросаАтрибуты.Количество() > 0 Тогда
				ТекстЗапросаАтрибутыСтрока = СтрСоединить( ТекстЗапросаАтрибуты, Символы.ПС + Символы.ПС );
				ЗапросТекстПоНоменклатуреСтрокаЗамены = Символы.ПС + ТекстЗапросаАтрибутыСтрока + Символы.ПС + Символы.ПС + "ГДЕ" + Символы.ПС;
				ЗапросТекстПоНоменклатуре = СтрЗаменить( ЗапросТекстПоНоменклатуре, "ГДЕ", ЗапросТекстПоНоменклатуреСтрокаЗамены );
			КонецЕсли;
			
		КонецЕсли; // ПоискПоАтрибутам
		
		Если ПараметрыКонтекст.ПоискПоНаименованиям = Истина Тогда
			
			Наименование = СокрЛП( ОписанияТоваровЭлемент.Наименование );
			
			Если Не ПустаяСтрока( Наименование ) Тогда
				
				// поиск по словам
				НаименованиеСлова = СтрРазделить( Наименование, СимволыРазделителиСлов, Ложь );
				НомерСлова = 0;
				Для Каждого Слово Из НаименованиеСлова Цикл
					
					НомерСлова = НомерСлова + 1;
					
					НомерСловаСтр = НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр + Формат( НомерСлова, "ЧГ=0" );
					
					ТекстЗапросаПараметрСлово = "НаименованиеСлово" + НомерСловаСтр;
					
					ЗапросТекстУсловиеСтрокой = "СТРНАЙТИ( Номенклатура.НаименованиеПолное, &" + ТекстЗапросаПараметрСлово + " ) > 0";
					ЗапросТекстУсловия.Добавить( ЗапросТекстУсловиеСтрокой + Символы.ПС );
					
					ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрСлово, Слово );
					
					ПараметрыКонтекст.ПоискПоНоменклатуреВыполнить = Истина;
					ПоискПоНоменклатуреВыполнитьПоЭлементу = Истина;
				КонецЦикла;
				
				ВесПоиска = ВесПоиска + 1;
				
			КонецЕсли;
		КонецЕсли; // ПоискПоНаименованиям
		
		Если ПараметрыКонтекст.ПоискПоАртикулам = Истина Тогда
			
			Артикул = СокрЛП( ОписанияТоваровЭлемент.Артикул );
			
			Если Не ПустаяСтрока( Артикул ) Тогда
				
				ТекстЗапросаПараметрАртикул = "Артикул" + НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр;
				ЗапросТекстУсловиеСтрокой = "Номенклатура.Артикул = &" + ТекстЗапросаПараметрАртикул + "";
				ЗапросТекстУсловия.Добавить( ЗапросТекстУсловиеСтрокой + Символы.ПС );
				
				ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрАртикул, Артикул );
				
				ПараметрыКонтекст.ПоискПоНоменклатуреВыполнить = Истина;
				ПоискПоНоменклатуреВыполнитьПоЭлементу = Истина;
				
				ВесПоиска = ВесПоиска + 1;
				
			КонецЕсли;
		КонецЕсли; // ПоискПоАртикулам
		
		Если ПараметрыКонтекст.ПоискПоКодам = Истина Тогда
			
			Код = СокрЛП( ОписанияТоваровЭлемент.Код );
			
			Если Не ПустаяСтрока( Код ) Тогда
				
				ТекстЗапросаПараметрКод = "Код" + НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр;
				ЗапросТекстУсловиеСтрокой = "Номенклатура.Код = &" + ТекстЗапросаПараметрКод + "";
				ЗапросТекстУсловия.Добавить( ЗапросТекстУсловиеСтрокой + Символы.ПС );
				
				ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрКод, Код );
				
				ПараметрыКонтекст.ПоискПоНоменклатуреВыполнить = Истина;
				ПоискПоНоменклатуреВыполнитьПоЭлементу = Истина;
				
				ВесПоиска = ВесПоиска + 1;
				
			КонецЕсли;
		КонецЕсли; // ПоискПоКодам
		
		Если ПараметрыКонтекст.ПоискПоКатегориям = Истина Тогда
			
			Категория = СокрЛП( ОписанияТоваровЭлемент.Категория );
			
			Если Не ПустаяСтрока( Категория ) Тогда
				
				ТекстЗапросаПараметрКатегория = "Категория" + НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр;
				ЗапросТекстУсловиеСтрокой = "Номенклатура.КатегорияНоменклатуры.Наименование = &" + ТекстЗапросаПараметрКатегория + "";
				ЗапросТекстУсловия.Добавить( ЗапросТекстУсловиеСтрокой + Символы.ПС );
				
				ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрКатегория, Категория );
				
				ПараметрыКонтекст.ПоискПоНоменклатуреВыполнить = Истина;
				ПоискПоНоменклатуреВыполнитьПоЭлементу = Истина;
				
				ВесПоиска = ВесПоиска + 1;
				
			КонецЕсли;
		КонецЕсли; // ПоискПоКатегориям
		
		Если ПараметрыКонтекст.ПоискПоОписаниям = Истина Тогда
			
			Описание = СокрЛП( ОписанияТоваровЭлемент.Описание );
			
			Если Не ПустаяСтрока( Описание ) Тогда
				
				// поиск по словам
				ОписаниеСлова = СтрРазделить( Описание, СимволыРазделителиСлов, Ложь );
				НомерСлова = 0;
				Для Каждого Слово Из ОписаниеСлова Цикл
					
					НомерСлова = НомерСлова + 1;
					Если НомерСлова > МаксимальноеКоличествоСловИзОписанияДляПоиска Тогда
						Прервать;
					КонецЕсли;
					
					НомерСловаСтр = НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр + Формат( НомерСлова, "ЧГ=0" );
					
					ТекстЗапросаПараметрСлово = "ОписаниеСлово" + НомерСловаСтр;
					
					ЗапросТекстУсловиеСтрокой = "СТРНАЙТИ( Номенклатура.Комментарий, &" + ТекстЗапросаПараметрСлово + " ) > 0";
					ЗапросТекстУсловия.Добавить( ЗапросТекстУсловиеСтрокой + Символы.ПС );
					
					ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрСлово, Слово );
					
					ПараметрыКонтекст.ПоискПоНоменклатуреВыполнить = Истина;
					ПоискПоНоменклатуреВыполнитьПоЭлементу = Истина;
					
				КонецЦикла;
				
				ВесПоиска = ВесПоиска + 1;
				
			КонецЕсли;
		КонецЕсли; // ПоискПоОписаниям
		
		Если ПоискПоНоменклатуреВыполнитьПоЭлементу = Истина Тогда
			ЗапросТекстУсловияСтрокой = СтрСоединить( ЗапросТекстУсловия, " И " );
			ЗапросТекстПоНоменклатуреПоОписанию = СтрЗаменить( ЗапросТекстПоНоменклатуре, "&Условие001", ЗапросТекстУсловияСтрокой );
			
			ЗапросТексты.Добавить( ЗапросТекстПоНоменклатуреПоОписанию );
		КонецЕсли;
		
	КонецЦикла; // ОписанияТоваров
	
	Если ПараметрыКонтекст.ПоискПоНоменклатуреВыполнить = Истина Тогда
		
		ЗапросТекст = 
		"// +ТоварыНайтиПоискПоБазеДанных1СВыполнитьПоПорцииПоискПоНоменклатуре" + Символы.ПС + Символы.ПС
		+ СтрСоединить( ЗапросТексты, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС ) + Символы.ПС
		+ "// -ТоварыНайтиПоискПоБазеДанных1СВыполнитьПоПорцииПоискПоНоменклатуре" + Символы.ПС;
		
		ПараметрыКонтекст.ЗапросыПакетТексты.Добавить( ЗапросТекст );
		
		ПараметрыКонтекст.НомерЗапросаВПакетеНоменклатура = ПараметрыКонтекст.НомерЗапросаВПакетеТекущий;
		ПараметрыКонтекст.НомерЗапросаВПакетеТекущий = ПараметрыКонтекст.НомерЗапросаВПакетеТекущий + 1;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ТоварыНайтиПоискПоБазеДанных1СВыполнитьПоПорцииПоискПоХарактеристикамНоменклатуры( ПараметрыКонтекст ) Экспорт
	
	Если ТипЗнч( ПараметрыКонтекст ) <> Тип( "Структура" ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МетодПоиска = ТоварыНайтиМетодПоискаЗапросыКБазе1С();
	СимволыРазделителиСлов = СимволыРазделителиСловПолучить();
	ОтладкаВключена = ПараметрыКонтекст.ОтладкаВключена;
	
	Ошибки = ПараметрыКонтекст.Ошибки;
	
	МаксимальноеКоличествоРезультатаПоиска = 30;
	МаксимальноеКоличествоСловИзОписанияДляПоиска = 20;
	
	НомерЗапросаВПакетеТекущийСтр = Формат( ПараметрыКонтекст.НомерЗапросаВПакетеТекущий, "ЧН=0; ЧГ=0" );
	
	ПараметрыКонтекст.ПоискПоХарактеристикамНоменклатурыВыполнить = Ложь;
	
	ЗапросТексты = Новый Массив;
	
	ЗапросТекстПоХарактеристикамНоменклатурыШаблон = 
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	&ИдентификаторЭлемента КАК ИдентификаторЭлемента,
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	ХарактеристикиНоменклатуры.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ
	|	И ХарактеристикиНоменклатуры.Владелец.ПометкаУдаления = ЛОЖЬ
	|	И &Условие001";
	
	ОписанияТоваровНомерЭлемента = 0;
	Для Каждого ОписанияТоваровЭлемент Из ПараметрыКонтекст.ОписанияТоваровПорцияТекущая Цикл
		
		ПоискПоХарактеристикамНоменклатурыВыполнитьПоЭлементу = Ложь;
		
		ОписанияТоваровНомерЭлемента = ОписанияТоваровНомерЭлемента + 1;
		ОписанияТоваровНомерЭлементаСтр = Формат( ОписанияТоваровНомерЭлемента, "ЧГ=0" );
		ТекстЗапросаПараметрИдентификаторЭлемента = "ИдентификаторЭлемента" + НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр;
		
		ЗапросТекстПоХарактеристикамНоменклатуры = СтрЗаменить( ЗапросТекстПоХарактеристикамНоменклатурыШаблон, "&ИдентификаторЭлемента", "&" + ТекстЗапросаПараметрИдентификаторЭлемента );
		ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрИдентификаторЭлемента, ОписанияТоваровЭлемент.ИдентификаторЭлемента );
		
		ЗапросТекстУсловия = Новый Массив;
		
		ЗапросТекстУсловиеСтрокой = "ТИПЗНАЧЕНИЯ(ХарактеристикиНоменклатуры.Владелец) = ТИП(Справочник.Номенклатура)";
		ЗапросТекстУсловия.Добавить( ЗапросТекстУсловиеСтрокой + Символы.ПС );
		
		Если ПараметрыКонтекст.ПоискПоАтрибутам = Истина Тогда
			
			Атрибуты = ОписанияТоваровЭлемент.Атрибуты;
			
			ТекстЗапросаАтрибуты = Новый Массив;
			
			НомерАтрибута = 0;
			Для Каждого Атрибут Из Атрибуты Цикл
				
				НомерАтрибута = НомерАтрибута + 1;
				НомерАтрибутаСтр = НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр + Формат( НомерАтрибута, "ЧГ=0" );
				
				ТекстЗапросаПараметрАтрибутЗначение = "АтрибутЗначение" + НомерАтрибутаСтр;
				ТекстЗапросаПараметрАтрибутЗначениеЧисло = ТекстЗапросаПараметрАтрибутЗначение + "Число";
				
				ТекстЗапросаАтрибутПсевдонимТабицы = "ДополнительныеРеквизиты" + НомерАтрибутаСтр;
				
				ТекстЗапросаАтрибут = "ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК "
				+ ТекстЗапросаАтрибутПсевдонимТабицы + Символы.ПС + "ПО "
				+ "ХарактеристикиНоменклатуры.Ссылка = " + ТекстЗапросаАтрибутПсевдонимТабицы + ".Ссылка" + Символы.ПС + "И ";
				
				АтрибутТип = ТипЗнч( Атрибут.Значение );
				
				Если АтрибутТип = Тип( "Строка" ) Тогда
					
					ТекстЗапросаАтрибут = ТекстЗапросаАтрибут
					+ "( СТРНАЙТИ( ВЫРАЗИТЬ( " + ТекстЗапросаАтрибутПсевдонимТабицы + ".Значение КАК СТРОКА ), &" + ТекстЗапросаПараметрАтрибутЗначение + " ) > 0" + Символы.ПС
					+ "ИЛИ СТРНАЙТИ( " + ТекстЗапросаАтрибутПсевдонимТабицы + ".Значение.Наименование, &" + ТекстЗапросаПараметрАтрибутЗначение + " ) > 0 )";
					
				Иначе
					
					ТекстЗапросаАтрибут = ТекстЗапросаАтрибут
					+ ТекстЗапросаАтрибутПсевдонимТабицы + ".Значение = &" + ТекстЗапросаПараметрАтрибутЗначение;
					
				КонецЕсли;
				
				ТекстЗапросаАтрибуты.Добавить( ТекстЗапросаАтрибут );
				
				ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрАтрибутЗначение, Атрибут.Значение );
				
				ПараметрыКонтекст.ПоискПоХарактеристикамНоменклатурыВыполнить = Истина;
				ПоискПоХарактеристикамНоменклатурыВыполнитьПоЭлементу = Истина;
			КонецЦикла;
			
			Если ТекстЗапросаАтрибуты.Количество() > 0 Тогда
				ТекстЗапросаАтрибутыСтрока = СтрСоединить( ТекстЗапросаАтрибуты, Символы.ПС + Символы.ПС );
				ЗапросТекстПоХарактеристикамНоменклатурыСтрокаЗамены = Символы.ПС + ТекстЗапросаАтрибутыСтрока + Символы.ПС + Символы.ПС + "ГДЕ" + Символы.ПС;
				ЗапросТекстПоХарактеристикамНоменклатуры = СтрЗаменить( ЗапросТекстПоХарактеристикамНоменклатуры, "ГДЕ", ЗапросТекстПоХарактеристикамНоменклатурыСтрокаЗамены );
			КонецЕсли;
			
		КонецЕсли; // ПоискПоАтрибутам
		
		Если ПараметрыКонтекст.ПоискПоНаименованиям = Истина Тогда
			
			Наименование = СокрЛП( ОписанияТоваровЭлемент.Наименование );
			
			Если Не ПустаяСтрока( Наименование ) Тогда
				
				// поиск по словам
				НаименованиеСлова = СтрРазделить( Наименование, СимволыРазделителиСлов, Ложь );
				НомерСлова = 0;
				Для Каждого Слово Из НаименованиеСлова Цикл
					
					НомерСлова = НомерСлова + 1;
					
					НомерСловаСтр = НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр + Формат( НомерСлова, "ЧГ=0" );
					
					ТекстЗапросаПараметрСлово = "НаименованиеСлово" + НомерСловаСтр;
					
					ЗапросТекстУсловиеСтрокой = 
					"(СТРНАЙТИ( ХарактеристикиНоменклатуры.НаименованиеДляПечати, &" + ТекстЗапросаПараметрСлово + " ) > 0" + Символы.ПС
					+ "ИЛИ СТРНАЙТИ( ХарактеристикиНоменклатуры.Владелец.НаименованиеПолное, &" + ТекстЗапросаПараметрСлово + " ) > 0 )";
					ЗапросТекстУсловия.Добавить( ЗапросТекстУсловиеСтрокой + Символы.ПС );
					
					ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрСлово, Слово );
					
					ПараметрыКонтекст.ПоискПоХарактеристикамНоменклатурыВыполнить = Истина;
					ПоискПоХарактеристикамНоменклатурыВыполнитьПоЭлементу = Истина;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли; // ПоискПоНаименованиям
		
		Если ПараметрыКонтекст.ПоискПоАртикулам = Истина Тогда
			
			Артикул = СокрЛП( ОписанияТоваровЭлемент.Артикул );
			
			Если Не ПустаяСтрока( Артикул ) Тогда
				
				ТекстЗапросаПараметрАртикул = "Артикул" + НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр;
				ЗапросТекстУсловиеСтрокой = "ХарактеристикиНоменклатуры.Артикул = &" + ТекстЗапросаПараметрАртикул + "";
				ЗапросТекстУсловия.Добавить( ЗапросТекстУсловиеСтрокой + Символы.ПС );
				
				ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрАртикул, Артикул );
				
				ПараметрыКонтекст.ПоискПоХарактеристикамНоменклатурыВыполнить = Истина;
				ПоискПоХарактеристикамНоменклатурыВыполнитьПоЭлементу = Истина;
				
			КонецЕсли;
		КонецЕсли; // ПоискПоАртикулам
		
		Если ПараметрыКонтекст.ПоискПоКодам = Истина Тогда
			
			Код = СокрЛП( ОписанияТоваровЭлемент.Код );
			
			Если Не ПустаяСтрока( Код ) Тогда
				
				ТекстЗапросаПараметрКод = "Код" + НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр;
				ЗапросТекстУсловиеСтрокой = "ХарактеристикиНоменклатуры.Код = &" + ТекстЗапросаПараметрКод + "";
				ЗапросТекстУсловия.Добавить( ЗапросТекстУсловиеСтрокой + Символы.ПС );
				
				ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрКод, Код );
				
				ПараметрыКонтекст.ПоискПоХарактеристикамНоменклатурыВыполнить = Истина;
				ПоискПоХарактеристикамНоменклатурыВыполнитьПоЭлементу = Истина;
				
			КонецЕсли;
		КонецЕсли; // ПоискПоКодам
		
		Если ПараметрыКонтекст.ПоискПоКатегориям = Истина Тогда
			
			Категория = СокрЛП( ОписанияТоваровЭлемент.Категория );
			
			Если Не ПустаяСтрока( Категория ) Тогда
				
				ТекстЗапросаПараметрКатегория = "Категория" + НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр;
				ЗапросТекстУсловиеСтрокой = "ХарактеристикиНоменклатуры.Владелец.КатегорияНоменклатуры.Наименование = &" + ТекстЗапросаПараметрКатегория + "";
				ЗапросТекстУсловия.Добавить( ЗапросТекстУсловиеСтрокой + Символы.ПС );
				
				ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрКатегория, Категория );
				
				ПараметрыКонтекст.ПоискПоХарактеристикамНоменклатурыВыполнить = Истина;
				ПоискПоХарактеристикамНоменклатурыВыполнитьПоЭлементу = Истина;
				
			КонецЕсли;
		КонецЕсли; // ПоискПоКатегориям
		
		Если ПараметрыКонтекст.ПоискПоОписаниям = Истина Тогда
			
			Описание = СокрЛП( ОписанияТоваровЭлемент.Описание );
			
			Если Не ПустаяСтрока( Описание ) Тогда
				
				// поиск по словам
				ОписаниеСлова = СтрРазделить( Описание, СимволыРазделителиСлов, Ложь );
				НомерСлова = 0;
				Для Каждого Слово Из ОписаниеСлова Цикл
					
					НомерСлова = НомерСлова + 1;
					Если НомерСлова > МаксимальноеКоличествоСловИзОписанияДляПоиска Тогда
						Прервать;
					КонецЕсли;
					
					НомерСловаСтр = НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр + Формат( НомерСлова, "ЧГ=0" );
					
					ТекстЗапросаПараметрСлово = "ОписаниеСлово" + НомерСловаСтр;
					
					ЗапросТекстУсловиеСтрокой = "СТРНАЙТИ( ХарактеристикиНоменклатуры.Владелец.Комментарий, &" + ТекстЗапросаПараметрСлово + " ) > 0";
					ЗапросТекстУсловия.Добавить( ЗапросТекстУсловиеСтрокой + Символы.ПС );
					
					ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрСлово, Слово );
					
					ПараметрыКонтекст.ПоискПоХарактеристикамНоменклатурыВыполнить = Истина;
					ПоискПоХарактеристикамНоменклатурыВыполнитьПоЭлементу = Истина;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли; // ПоискПоОписаниям
		
		Если ПоискПоХарактеристикамНоменклатурыВыполнитьПоЭлементу = Истина Тогда
			ЗапросТекстУсловияСтрокой = СтрСоединить( ЗапросТекстУсловия, " И " );
			ЗапросТекстПоХарактеристикамНоменклатурыПоОписанию = СтрЗаменить( ЗапросТекстПоХарактеристикамНоменклатуры, "&Условие001", ЗапросТекстУсловияСтрокой );
			
			ЗапросТексты.Добавить( ЗапросТекстПоХарактеристикамНоменклатурыПоОписанию );
		КонецЕсли;
		
	КонецЦикла; // ОписанияТоваров
	
	Если ПараметрыКонтекст.ПоискПоХарактеристикамНоменклатурыВыполнить = Истина Тогда
		
		ЗапросТекст = 
		"// +ТоварыНайтиПоискПоБазеДанных1СВыполнитьПоПорцииПоискПоХарактеристикамНоменклатуры" + Символы.ПС + Символы.ПС
		+ СтрСоединить( ЗапросТексты, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС ) + Символы.ПС
		+ "// -ТоварыНайтиПоискПоБазеДанных1СВыполнитьПоПорцииПоискПоХарактеристикамНоменклатуры" + Символы.ПС;
		
		ПараметрыКонтекст.ЗапросыПакетТексты.Добавить( ЗапросТекст );
		
		ПараметрыКонтекст.НомерЗапросаВПакетеХарактеристикиНоменклатуры = ПараметрыКонтекст.НомерЗапросаВПакетеТекущий;
		ПараметрыКонтекст.НомерЗапросаВПакетеТекущий = ПараметрыКонтекст.НомерЗапросаВПакетеТекущий + 1;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ТоварыНайтиПоискПоБазеДанных1СВыполнитьПоПорцииПоискПоШтрихкодам( ПараметрыКонтекст ) Экспорт
	
	Если ТипЗнч( ПараметрыКонтекст ) <> Тип( "Структура" ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МетодПоиска = ТоварыНайтиМетодПоискаЗапросыКБазе1С();
	СимволыРазделителиСлов = СимволыРазделителиСловПолучить();
	ОтладкаВключена = ПараметрыКонтекст.ОтладкаВключена;
	
	Ошибки = ПараметрыКонтекст.Ошибки;
	
	МаксимальноеКоличествоРезультатаПоиска = 30;
	МаксимальноеКоличествоСловИзОписанияДляПоиска = 20;
	
	НомерЗапросаВПакетеТекущийСтр = Формат( ПараметрыКонтекст.НомерЗапросаВПакетеТекущий, "ЧН=0; ЧГ=0" );
	
	ПараметрыКонтекст.ПоискПоШтрихкодамВыполнить = Ложь;
	
	ЗапросТексты = Новый Массив;
	
	ЗапросТекстПоНоменклатуреШаблон = 
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	&ИдентификаторЭлемента КАК ИдентификаторЭлемента,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Характеристика.Наименование КАК ХарактеристикаНаименование
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И ШтрихкодыНоменклатуры.Характеристика.ПометкаУдаления = ЛОЖЬ
	|	И &Условие001";
	
	ОписанияТоваровНомерЭлемента = 0;
	Для Каждого ОписанияТоваровЭлемент Из ПараметрыКонтекст.ОписанияТоваровПорцияТекущая Цикл
		
		ПоискПоШтрихкодамВыполнитьПоЭлементу = Ложь;
		
		ОписанияТоваровНомерЭлемента = ОписанияТоваровНомерЭлемента + 1;
		ОписанияТоваровНомерЭлементаСтр = Формат( ОписанияТоваровНомерЭлемента, "ЧГ=0" );
		ТекстЗапросаПараметрИдентификаторЭлемента = "ИдентификаторЭлемента" + НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр;
		
		ЗапросТекстПоНоменклатуре = СтрЗаменить( ЗапросТекстПоНоменклатуреШаблон, "&ИдентификаторЭлемента", "&" + ТекстЗапросаПараметрИдентификаторЭлемента );
		ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрИдентификаторЭлемента, ОписанияТоваровЭлемент.ИдентификаторЭлемента );
		
		ЗапросТекстУсловия = Новый Массив;
		
		Если ПараметрыКонтекст.ПоискПоАтрибутам = Истина Тогда
			// Поиск по атрибутам не применяется к поиску по Штрихкодам
		КонецЕсли; // ПоискПоАтрибутам
		
		ШтрихкодыЭлементы = ОписанияТоваровЭлемент.Штрихкоды;
		Если ШтрихкодыЭлементы.Количество() > 0 Тогда
			ШтрихкодыЗначения = ШтрихкодыЭлементы.ВыгрузитьКолонку( "Значение" );
			ТекстЗапросаПараметрШтрихкоды = "Штрихкоды" + НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр;
			ЗапросТекстУсловиеСтрокой = "ШтрихкодыНоменклатуры.Штрихкод В ( &" + ТекстЗапросаПараметрШтрихкоды + " )";
			ЗапросТекстУсловия.Добавить( ЗапросТекстУсловиеСтрокой + Символы.ПС );
			
			ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрШтрихкоды, ШтрихкодыЗначения );
			
			ПараметрыКонтекст.ПоискПоШтрихкодамВыполнить = Истина;
			ПоискПоШтрихкодамВыполнитьПоЭлементу = Истина;
		КонецЕсли;
		
		Если ПараметрыКонтекст.ПоискПоНаименованиям = Истина Тогда
			
			Наименование = СокрЛП( ОписанияТоваровЭлемент.Наименование );
			
			Если Не ПустаяСтрока( Наименование ) Тогда
				
				// поиск по словам
				НаименованиеСлова = СтрРазделить( Наименование, СимволыРазделителиСлов, Ложь );
				НомерСлова = 0;
				Для Каждого Слово Из НаименованиеСлова Цикл
					
					НомерСлова = НомерСлова + 1;
					
					НомерСловаСтр = НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр + Формат( НомерСлова, "ЧГ=0" );
					
					ТекстЗапросаПараметрСлово = "НаименованиеСлово" + НомерСловаСтр;
					
					ЗапросТекстУсловиеСтрокой = 
					"( СТРНАЙТИ( ШтрихкодыНоменклатуры.Номенклатура.НаименованиеПолное, &" + ТекстЗапросаПараметрСлово + " ) > 0" + Символы.ПС
					+ "	ИЛИ СТРНАЙТИ( ШтрихкодыНоменклатуры.Характеристика.НаименованиеДляПечати, &" + ТекстЗапросаПараметрСлово + " ) > 0 )";
					ЗапросТекстУсловия.Добавить( ЗапросТекстУсловиеСтрокой + Символы.ПС );
					
					ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрСлово, Слово );
					
					ПараметрыКонтекст.ПоискПоШтрихкодамВыполнить = Истина;
					ПоискПоШтрихкодамВыполнитьПоЭлементу = Истина;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли; // ПоискПоНаименованиям
		
		Если ПараметрыКонтекст.ПоискПоАртикулам = Истина Тогда
			
			Артикул = СокрЛП( ОписанияТоваровЭлемент.Артикул );
			
			Если Не ПустаяСтрока( Артикул ) Тогда
				
				ТекстЗапросаПараметрАртикул = "Артикул" + НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр;
				ЗапросТекстУсловиеСтрокой = 
				"( ШтрихкодыНоменклатуры.Номенклатура.Артикул = &" + ТекстЗапросаПараметрАртикул + Символы.ПС
				+ "	ИЛИ ШтрихкодыНоменклатуры.Характеристика.Артикул = &" + ТекстЗапросаПараметрАртикул + " )";
				ЗапросТекстУсловия.Добавить( ЗапросТекстУсловиеСтрокой + Символы.ПС );
				
				ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрАртикул, Артикул );
				
				ПараметрыКонтекст.ПоискПоШтрихкодамВыполнить = Истина;
				ПоискПоШтрихкодамВыполнитьПоЭлементу = Истина;
				
			КонецЕсли;
		КонецЕсли; // ПоискПоАртикулам
		
		Если ПараметрыКонтекст.ПоискПоКодам = Истина Тогда
			
			Код = СокрЛП( ОписанияТоваровЭлемент.Код );
			
			Если Не ПустаяСтрока( Код ) Тогда
				
				ТекстЗапросаПараметрКод = "Код" + НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр;
				ЗапросТекстУсловиеСтрокой = 
				"( ШтрихкодыНоменклатуры.Номенклатура.Код = &" + ТекстЗапросаПараметрКод + Символы.ПС
				+ "	ИЛИ ШтрихкодыНоменклатуры.Характеристика.Код = &" + ТекстЗапросаПараметрКод + " )";
				ЗапросТекстУсловия.Добавить( ЗапросТекстУсловиеСтрокой + Символы.ПС );
				
				ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрКод, Код );
				
				ПараметрыКонтекст.ПоискПоШтрихкодамВыполнить = Истина;
				ПоискПоШтрихкодамВыполнитьПоЭлементу = Истина;
				
			КонецЕсли;
		КонецЕсли; // ПоискПоКодам
		
		Если ПараметрыКонтекст.ПоискПоКатегориям = Истина Тогда
			
			Категория = СокрЛП( ОписанияТоваровЭлемент.Категория );
			
			Если Не ПустаяСтрока( Категория ) Тогда
				
				ТекстЗапросаПараметрКатегория = "Категория" + НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр;
				ЗапросТекстУсловиеСтрокой = "ШтрихкодыНоменклатуры.Номенклатура.КатегорияНоменклатуры.Наименование = &" + ТекстЗапросаПараметрКатегория + "";
				ЗапросТекстУсловия.Добавить( ЗапросТекстУсловиеСтрокой + Символы.ПС );
				
				ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрКатегория, Категория );
				
				ПараметрыКонтекст.ПоискПоШтрихкодамВыполнить = Истина;
				ПоискПоШтрихкодамВыполнитьПоЭлементу = Истина;
				
			КонецЕсли;
		КонецЕсли; // ПоискПоКатегориям
		
		Если ПараметрыКонтекст.ПоискПоОписаниям = Истина Тогда
			
			Описание = СокрЛП( ОписанияТоваровЭлемент.Описание );
			
			Если Не ПустаяСтрока( Описание ) Тогда
				
				// поиск по словам
				ОписаниеСлова = СтрРазделить( Описание, СимволыРазделителиСлов, Ложь );
				НомерСлова = 0;
				Для Каждого Слово Из ОписаниеСлова Цикл
					
					НомерСлова = НомерСлова + 1;
					Если НомерСлова > МаксимальноеКоличествоСловИзОписанияДляПоиска Тогда
						Прервать;
					КонецЕсли;
					
					НомерСловаСтр = НомерЗапросаВПакетеТекущийСтр + ОписанияТоваровНомерЭлементаСтр + Формат( НомерСлова, "ЧГ=0" );
					
					ТекстЗапросаПараметрСлово = "ОписаниеСлово" + НомерСловаСтр;
					
					ЗапросТекстУсловиеСтрокой = "СТРНАЙТИ( ШтрихкодыНоменклатуры.Номенклатура.Комментарий, &" + ТекстЗапросаПараметрСлово + " ) > 0";
					ЗапросТекстУсловия.Добавить( ЗапросТекстУсловиеСтрокой + Символы.ПС );
					
					ПараметрыКонтекст.ЗапросОбъект.УстановитьПараметр( ТекстЗапросаПараметрСлово, Слово );
					
					ПараметрыКонтекст.ПоискПоШтрихкодамВыполнить = Истина;
					ПоискПоШтрихкодамВыполнитьПоЭлементу = Истина;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли; // ПоискПоОписаниям
		
		Если ПоискПоШтрихкодамВыполнитьПоЭлементу = Истина Тогда
			ЗапросТекстУсловияСтрокой = СтрСоединить( ЗапросТекстУсловия, " И " );
			ЗапросТекстПоНоменклатуреПоОписанию = СтрЗаменить( ЗапросТекстПоНоменклатуре, "&Условие001", ЗапросТекстУсловияСтрокой );
			
			ЗапросТексты.Добавить( ЗапросТекстПоНоменклатуреПоОписанию );
		КонецЕсли;
		
	КонецЦикла; // ОписанияТоваров
	
	Если ПараметрыКонтекст.ПоискПоШтрихкодамВыполнить = Истина Тогда
		
		ЗапросТекст = 
		"// +ТоварыНайтиПоискПоБазеДанных1СВыполнитьПоПорцииПоискПоШтрихкодам" + Символы.ПС + Символы.ПС
		+ СтрСоединить( ЗапросТексты, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС ) + Символы.ПС
		+ "// -ТоварыНайтиПоискПоБазеДанных1СВыполнитьПоПорцииПоискПоШтрихкодам" + Символы.ПС;
		
		ПараметрыКонтекст.ЗапросыПакетТексты.Добавить( ЗапросТекст );
		
		ПараметрыКонтекст.НомерЗапросаВПакетеШтрихкоды = ПараметрыКонтекст.НомерЗапросаВПакетеТекущий;
		ПараметрыКонтекст.НомерЗапросаВПакетеТекущий = ПараметрыКонтекст.НомерЗапросаВПакетеТекущий + 1;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ТоварыНайтиПараметрыКонтекстСоздать() Экспорт
	
	ПараметрыКонтекст = Новый Структура;
	
	ПараметрыКонтекст.Вставить( "ОтладкаВключена", Ложь );
	ПараметрыКонтекст.Вставить( "КоличествоОписанийТоваровВОднойПорции", 5 );
	ПараметрыКонтекст.Вставить( "ИспользоватьИтерационныйПоиск", Ложь );
	
	
	ПараметрыКонтекст.Вставить( "ИспользоватьПоискПоБазеДанных1С", Ложь );
	
	ПараметрыКонтекст.Вставить( "ИспользоватьПолнотекстовыйПоиск", Ложь );
	ПараметрыКонтекст.Вставить( "ПоискПоСинонимам", Ложь );
	ПараметрыКонтекст.Вставить( "НечеткийПоискКоличествоОтличающихсяСимволовВКаждомСлове", Ложь );
	
	
	ПараметрыКонтекст.Вставить( "ПоискПоНоменклатуре", Ложь );
	ПараметрыКонтекст.Вставить( "ПоискПоНоменклатуреВыполнить", Ложь );
	
	ПараметрыКонтекст.Вставить( "ПоискПоХарактеристикамНоменклатуры", Ложь );
	ПараметрыКонтекст.Вставить( "ПоискПоХарактеристикамНоменклатурыВыполнить", Ложь );
	
	ПараметрыКонтекст.Вставить( "ПоискПоШтрихкодам", Ложь );
	ПараметрыКонтекст.Вставить( "ПоискПоШтрихкодамВыполнить", Ложь );
	
	
	ПараметрыКонтекст.Вставить( "ПоискПоНаименованиям", Ложь );
	ПараметрыКонтекст.Вставить( "ПоискПоКодам", Ложь );
	ПараметрыКонтекст.Вставить( "ПоискПоАртикулам", Ложь );
	ПараметрыКонтекст.Вставить( "ПоискПоКатегориям", Ложь );
	ПараметрыКонтекст.Вставить( "ПоискПоОписаниям", Ложь );
	
	ПараметрыКонтекст.Вставить( "ПоискПоЦенам", Ложь );
	
	ПараметрыКонтекст.Вставить( "ПоискПоАтрибутам", Ложь );
	ПараметрыКонтекст.Вставить( "ПоискПоАтрибутамИмяИскать", Ложь );
	
	ПараметрыКонтекст.Вставить( "ОписанияТоваров", ТоварыНайтиОписаниеТоваровСоздать() );
	ПараметрыКонтекст.Вставить( "ОписанияТоваровПорции", Новый Массив );
	ПараметрыКонтекст.Вставить( "ОписанияТоваровПорцияТекущая", Новый Массив );
	
	ПараметрыКонтекст.Вставить( "ОписанияТоваровКешИдентификаторы", Новый Соответствие );
	
	ПараметрыКонтекст.Вставить( "Ошибки", Новый Массив );
	
	
	ПараметрыКонтекст.Вставить( "ЗапросыПакетТексты", Новый Массив );
	ПараметрыКонтекст.Вставить( "ЗапросОбъект", Новый Запрос );
	
	ПараметрыКонтекст.Вставить( "НомерЗапросаВПакетеТекущий", Неопределено );
	
	ПараметрыКонтекст.Вставить( "НомерЗапросаВПакетеНоменклатура", Неопределено );
	ПараметрыКонтекст.Вставить( "НомерЗапросаВПакетеХарактеристикиНоменклатуры", Неопределено );
	ПараметрыКонтекст.Вставить( "НомерЗапросаВПакетеШтрихкоды", Неопределено );
	
	
	Возврат ПараметрыКонтекст;
КонецФункции

Функция ТоварыНайтиОписаниеТоваровСоздать() Экспорт
	
	ОписанияТоваров = Новый ТаблицаЗначений;
	ОписанияТоваров.Колонки.Добавить( "ИдентификаторЭлемента" );
	ОписанияТоваров.Колонки.Добавить( "Наименование" );
	ОписанияТоваров.Колонки.Добавить( "Код" );
	ОписанияТоваров.Колонки.Добавить( "Артикул" );
	ОписанияТоваров.Колонки.Добавить( "Категория" );
	ОписанияТоваров.Колонки.Добавить( "Описание" );
	ОписанияТоваров.Колонки.Добавить( "Цены" );
	ОписанияТоваров.Колонки.Добавить( "Штрихкоды" );
	ОписанияТоваров.Колонки.Добавить( "Атрибуты" );
	ОписанияТоваров.Колонки.Добавить( "РезультатыПоиска" );
	ОписанияТоваров.Колонки.Добавить( "РезультатПоискаНоменклатура");
	ОписанияТоваров.Колонки.Добавить( "РезультатПоискаХарактеристика");
	ОписанияТоваров.Колонки.Добавить( "РезультатПоискаВероятностьСовпадения");
	ОписанияТоваров.Колонки.Добавить( "РезультатПоискаВесПоиска");
	ОписанияТоваров.Колонки.Добавить( "РезультатПоискаОписание");
	ОписанияТоваров.Колонки.Добавить( "РезультатПоискаКоличество" );
	
	
	Возврат ОписанияТоваров;
КонецФункции

Функция ТоварыНайтиОписанияТоваровЭлементСоздать( ОписанияТоваров ) Экспорт
	
	ОписанияТоваровЭлемент = ОписанияТоваров.Добавить();
	ОписанияТоваровЭлемент.Цены = ТоварыНайтиЦеныСоздать();
	ОписанияТоваровЭлемент.Штрихкоды = ТоварыНайтиШтрихкодыНовый();
	ОписанияТоваровЭлемент.Атрибуты = ТоварыНайтиАтрибутНовый();
	ОписанияТоваровЭлемент.РезультатыПоиска = ТоварыНайтиРезультатыПоискаНовый();
	
	Возврат ОписанияТоваровЭлемент;
КонецФункции

Функция ТоварыНайтиЦеныСоздать() Экспорт
	
	Цены = Новый ТаблицаЗначений;
	Цены.Колонки.Добавить( "Имя" );
	Цены.Колонки.Добавить( "Значение" );
	
	Возврат Цены;
КонецФункции

Функция ТоварыНайтиАтрибутНовый() Экспорт
	
	Атрибуты = Новый ТаблицаЗначений;
	Атрибуты.Колонки.Добавить( "Имя" );
	Атрибуты.Колонки.Добавить( "Значение" );
	
	Возврат Атрибуты;
КонецФункции

Функция ТоварыНайтиШтрихкодыНовый() Экспорт
	
	Штрихкоды = Новый ТаблицаЗначений;
	Штрихкоды.Колонки.Добавить( "Имя");
	Штрихкоды.Колонки.Добавить( "Значение");
	
	Возврат Штрихкоды;
КонецФункции

Функция ТоварыНайтиРезультатыПоискаНовый() Экспорт
	
	РезультатПоиска = Новый ТаблицаЗначений;
	РезультатПоиска.Колонки.Добавить( "Номенклатура", Новый ОписаниеТипов( "СправочникСсылка.Номенклатура" ) );
	РезультатПоиска.Колонки.Добавить( "Характеристика", Новый ОписаниеТипов( "СправочникСсылка.ХарактеристикиНоменклатуры" ) );
	РезультатПоиска.Колонки.Добавить( "МетодПоиска" );
	РезультатПоиска.Колонки.Добавить( "Описание" );
	РезультатПоиска.Колонки.Добавить( "ВероятностьСовпадения" );
	РезультатПоиска.Колонки.Добавить( "ВесПоиска" );
	
	Возврат РезультатПоиска;
КонецФункции

Функция ТоварыНайтиМетодПоискаПолнотекстовый() Экспорт
	Возврат "ПП";
КонецФункции

Функция ТоварыНайтиМетодПоискаЗапросыКБазе1С() Экспорт
	Возврат "З";
КонецФункции

Функция ТоварыСоздатьПараметрыКонтекстНовый() Экспорт
	
	ПараметрыКонтекст = Новый Структура;
	
	ПараметрыКонтекст.Вставить( "ОписанияТоваров", ТоварыСоздатьОписаниеТоваровНовый() );
	ПараметрыКонтекст.Вставить( "ГруппаДляСозданияНовыхТоваров", Справочники.Номенклатура.ПустаяСсылка() );
	ПараметрыКонтекст.Вставить( "СоздатьИерархиюНоменклатуры", Ложь );
	ПараметрыКонтекст.Вставить( "ПерезаполнитьЗначенияРеквизитовНоменклатуры", Ложь );
	
	ПараметрыКонтекст.Вставить( "ЗаписатьФайлы", Истина );
	
	ПараметрыКонтекст.Вставить( "ОписанияТоваровКешИдентификаторы", Новый Соответствие );
	ПараметрыКонтекст.Вставить( "Ошибки", Новый Массив );
	
	ПараметрыКонтекст.Вставить( "НоменклатураКоличествоСоздано", 0 );
	ПараметрыКонтекст.Вставить( "НоменклатураКоличествоОбновлено", 0 );
	ПараметрыКонтекст.Вставить( "ХарактеристикиКоличествоСоздано", 0 );
	ПараметрыКонтекст.Вставить( "ХарактеристикиКоличествоОбновлено", 0 );
	ПараметрыКонтекст.Вставить( "ФайлыКоличествоСоздано", 0 );
	ПараметрыКонтекст.Вставить( "ШтрихкодыКоличествоСоздано", 0 );
	
	ПараметрыКонтекст.Вставить( "ОтладкаВключена", Ложь );
	ПараметрыКонтекст.Вставить( "УчетнаяЗапись", Неопределено );
	
	Возврат ПараметрыКонтекст;
КонецФункции

Функция ТоварыСоздатьОписаниеТоваровНовый() Экспорт
	
	ОписанияТоваров = Новый ТаблицаЗначений;
	
	ОписанияТоваров.Колонки.Добавить( "ИдентификаторЭлемента" );
	
	ОписанияТоваров.Колонки.Добавить( "ПометкаУдаления" );
	ОписанияТоваров.Колонки.Добавить( "Родитель" );
	ОписанияТоваров.Колонки.Добавить( "Код" );
	ОписанияТоваров.Колонки.Добавить( "Наименование" );
	ОписанияТоваров.Колонки.Добавить( "Артикул" );
	ОписанияТоваров.Колонки.Добавить( "АлкогольнаяПродукция" );
	ОписанияТоваров.Колонки.Добавить( "Вес" );
	ОписанияТоваров.Колонки.Добавить( "ВариантОграниченияСертификата" );
	ОписанияТоваров.Колонки.Добавить( "ВариантПечатиНабора" );
	ОписанияТоваров.Колонки.Добавить( "ВерхняяГраницаОстатков" );
	ОписанияТоваров.Колонки.Добавить( "ЕдиницаИзмерения" );
	ОписанияТоваров.Колонки.Добавить( "Весовой" );
	ОписанияТоваров.Колонки.Добавить( "ВидАлкогольнойПродукции" );
	ОписанияТоваров.Колонки.Добавить( "ВидМаркировки" );
	ОписанияТоваров.Колонки.Добавить( "ВидПродукцииИС" );
	ОписанияТоваров.Колонки.Добавить( "АвтоматическиГенерироватьПартии" );
	ОписанияТоваров.Колонки.Добавить( "ВыписыватьГарантийныйТалон" );
	ОписанияТоваров.Колонки.Добавить( "Высота" ); // см
	ОписанияТоваров.Колонки.Добавить( "ГарантийныйСрок" );
	ОписанияТоваров.Колонки.Добавить( "ДатаИзменения" );
	ОписанияТоваров.Колонки.Добавить( "ДатаОкончанияДействия" );
	ОписанияТоваров.Колонки.Добавить( "Длина" ); // см
	ОписанияТоваров.Колонки.Добавить( "ИспользоватьСерииНоменклатуры" );
	ОписанияТоваров.Колонки.Добавить( "Изготовитель" );
	ОписанияТоваров.Колонки.Добавить( "ИмпортнаяАлкогольнаяПродукция" );
	ОписанияТоваров.Колонки.Добавить( "ИсключитьИзПрайсЛистов" );
	ОписанияТоваров.Колонки.Добавить( "ИспользоватьДатуПроизводстваПартии" );
	ОписанияТоваров.Колонки.Добавить( "ИспользоватьЗаписьСкладскогоЖурналаВЕТИСПартии" );
	ОписанияТоваров.Колонки.Добавить( "ИспользоватьИдентификаторПартииВЕТИСПартии" );
	ОписанияТоваров.Колонки.Добавить( "ИспользоватьНомерПартии" );
	ОписанияТоваров.Колонки.Добавить( "ИспользоватьПартии" );
	ОписанияТоваров.Колонки.Добавить( "ИспользоватьПроизводителяВЕТИСПартии" );
	ОписанияТоваров.Колонки.Добавить( "НаименованиеПолное" );
	ОписанияТоваров.Колонки.Добавить( "ИспользоватьСрокГодностиПартии" );
	ОписанияТоваров.Колонки.Добавить( "ИспользоватьХарактеристики" );
	ОписанияТоваров.Колонки.Добавить( "КатегорияНоменклатуры" );
	ОписанияТоваров.Колонки.Добавить( "КиЗГИСМ" );
	ОписанияТоваров.Колонки.Добавить( "КиЗГИСМGTIN" );
	ОписанияТоваров.Колонки.Добавить( "КиЗГИСМВид" );
	ОписанияТоваров.Колонки.Добавить( "КиЗГИСМРазмер" );
	ОписанияТоваров.Колонки.Добавить( "КиЗГИСМСпособВыпускаВОборот" );
	ОписанияТоваров.Колонки.Добавить( "КодМедицинскогоИзделия" );
	ОписанияТоваров.Колонки.Добавить( "КоличествоПериодовДействия" );
	ОписанияТоваров.Колонки.Добавить( "Комментарий" ); // Описание
	ОписанияТоваров.Колонки.Добавить( "Крепость" );
	ОписанияТоваров.Колонки.Добавить( "МетодОценки" );
	ОписанияТоваров.Колонки.Добавить( "СтранаПроисхождения" );
	ОписанияТоваров.Колонки.Добавить( "НаправлениеДеятельности" );
	ОписанияТоваров.Колонки.Добавить( "Недействителен" );
	ОписанияТоваров.Колонки.Добавить( "НижняяГраницаОстатков" );
	ОписанияТоваров.Колонки.Добавить( "Номинал" );
	ОписанияТоваров.Колонки.Добавить( "НормаВремени" );
	ОписанияТоваров.Колонки.Добавить( "ОбувнаяПродукция" );
	ОписанияТоваров.Колонки.Добавить( "Объем" );
	ОписанияТоваров.Колонки.Добавить( "ОбъемДАЛ" );
	ОписанияТоваров.Колонки.Добавить( "Периодичность" );
	ОписанияТоваров.Колонки.Добавить( "ПодконтрольнаяПродукцияВЕТИС" );
	ОписанияТоваров.Колонки.Добавить( "Поставщик" );
	ОписанияТоваров.Колонки.Добавить( "ПроверятьЗаполнениеПартий" );
	ОписанияТоваров.Колонки.Добавить( "ПроверятьЗаполнениеХарактеристики" );
	ОписанияТоваров.Колонки.Добавить( "Производитель" );
	ОписанияТоваров.Колонки.Добавить( "ПроизводительИмпортерАлкогольнойПродукции" );
	ОписанияТоваров.Колонки.Добавить( "ПроизвольныйНоминал" );
	ОписанияТоваров.Колонки.Добавить( "РеквизитДопУпорядочиванияУНФ" );
	ОписанияТоваров.Колонки.Добавить( "РекомендуемЗаказать" );
	ОписанияТоваров.Колонки.Добавить( "Склад" );
	ОписанияТоваров.Колонки.Добавить( "СпособОграниченияСертификата" );
	ОписанияТоваров.Колонки.Добавить( "СпособПополнения" );
	ОписанияТоваров.Колонки.Добавить( "СпособРасчетаЦеныНабора" );
	ОписанияТоваров.Колонки.Добавить( "СредствоИндивидуальнойЗащиты" );
	ОписанияТоваров.Колонки.Добавить( "СрокДействияФлагаНовинка" );
	ОписанияТоваров.Колонки.Добавить( "СрокИсполненияЗаказа" );
	ОписанияТоваров.Колонки.Добавить( "СрокПополнения" );
	ОписанияТоваров.Колонки.Добавить( "ВидСтавкиНДС" );
	ОписанияТоваров.Колонки.Добавить( "СчетУчетаДоходов" );
	ОписанияТоваров.Колонки.Добавить( "СчетУчетаЗапасов" );
	ОписанияТоваров.Колонки.Добавить( "СчетУчетаЗатрат" );
	ОписанияТоваров.Колонки.Добавить( "ТабачнаяПродукция" );
	ОписанияТоваров.Колонки.Добавить( "УдалитьСтавкаНДС" );
	ОписанияТоваров.Колонки.Добавить( "ТипСрокаДействия" );
	ОписанияТоваров.Колонки.Добавить( "ТНВЭДГИСМ" );
	ОписанияТоваров.Колонки.Добавить( "ТоварнаяНоменклатураВЭД" );
	ОписанияТоваров.Колонки.Добавить( "ТолькоПоддержкаОстаткаПриРасчетеПотребностей" );
	ОписанияТоваров.Колонки.Добавить( "ТипНоменклатуры" );
	ОписанияТоваров.Колонки.Добавить( "ФайлКартинки" );
	ОписанияТоваров.Колонки.Добавить( "ФиксированнаяСтоимость" );
	ОписанияТоваров.Колонки.Добавить( "ЦеноваяГруппа" );
	ОписанияТоваров.Колонки.Добавить( "ЧастичноеПогашение" );
	ОписанияТоваров.Колонки.Добавить( "ШиныИПокрышки" );
	ОписанияТоваров.Колонки.Добавить( "Ширина" ); // см
	ОписанияТоваров.Колонки.Добавить( "ЭтоНабор" );
	ОписанияТоваров.Колонки.Добавить( "ЭтоНовинка" );
	ОписанияТоваров.Колонки.Добавить( "Ячейка" );
	ОписанияТоваров.Колонки.Добавить( "ПодакцизныйТовар" );
	ОписанияТоваров.Колонки.Добавить( "ПолитикаУчетаСерий" );
	ОписанияТоваров.Колонки.Добавить( "ИндивидуальныеНастройкиПолитикиУчетаСерий" );
	ОписанияТоваров.Колонки.Добавить( "ИспользоватьСрокГодностиСерии" );
	ОписанияТоваров.Колонки.Добавить( "ИспользоватьДатуПроизводстваСерии" );
	ОписанияТоваров.Колонки.Добавить( "ТочностьУказанияСрокаГодностиСерии" );
	ОписанияТоваров.Колонки.Добавить( "ИспользоватьУникальныеСерии" );
	ОписанияТоваров.Колонки.Добавить( "ЭтоАгентскаяУслуга" );
	ОписанияТоваров.Колонки.Добавить( "Договор" );
	ОписанияТоваров.Колонки.Добавить( "СрокГодности" );
	ОписанияТоваров.Колонки.Добавить( "ЕдиницаИзмеренияСрокаГодности" );
	ОписанияТоваров.Колонки.Добавить( "ПрослеживаемыйТовар" );
	ОписанияТоваров.Колонки.Добавить( "ВесПоСертификатуТовара" );
	ОписанияТоваров.Колонки.Добавить( "КодОКПД2" );
	ОписанияТоваров.Колонки.Добавить( "НаборЕдиницИзмерения" );
	ОписанияТоваров.Колонки.Добавить( "ИспользоватьНаборыЕдиницИзмерения" );
	ОписанияТоваров.Колонки.Добавить( "ЕдиницаДляОтчетов" );
	ОписанияТоваров.Колонки.Добавить( "КоэффициентЕдиницыДляОтчетов" );
	ОписанияТоваров.Колонки.Добавить( "Штрихкод" );
	ОписанияТоваров.Колонки.Добавить( "КодТРУ" );
	ОписанияТоваров.Колонки.Добавить( "ПрослеживаемыйКомплект" );
	ОписанияТоваров.Колонки.Добавить( "ПризнакПредметаРасчета" );
	ОписанияТоваров.Колонки.Добавить( "ХарактеристикаЦен" );
	ОписанияТоваров.Колонки.Добавить( "ЗапретитьВводДробногоКоличества" );
	ОписанияТоваров.Колонки.Добавить( "СчетУчетаНДСПоПриобретеннымЦенностям" );
	ОписанияТоваров.Колонки.Добавить( "СчетУчетаНДСПоРеализации" );
	ОписанияТоваров.Колонки.Добавить( "ПродаетсяВРозлив" );
	ОписанияТоваров.Колонки.Добавить( "ЕдиницаДляЦенников" );
	ОписанияТоваров.Колонки.Добавить( "Числитель" );
	ОписанияТоваров.Колонки.Добавить( "Знаменатель" );
	
	ОписанияТоваров.Колонки.Добавить( "Штрихкоды" );
	ОписанияТоваров.Колонки.Добавить( "Файлы" );
	ОписанияТоваров.Колонки.Добавить( "Цены" );
	ОписанияТоваров.Колонки.Добавить( "Атрибуты" );
	ОписанияТоваров.Колонки.Добавить( "Иерархия" );
	
	ОписанияТоваров.Колонки.Добавить( "Номенклатура", Новый ОписаниеТипов( "СправочникСсылка.Номенклатура" ) ); // создание или перезаполнение если заполнено
	ОписанияТоваров.Колонки.Добавить( "НоменклатураСоздана", Новый ОписаниеТипов( "Булево" ) );
	
	ОписанияТоваров.Колонки.Добавить( "СоздатьХарактеристику", Новый ОписаниеТипов( "Булево" ) );
	ОписанияТоваров.Колонки.Добавить( "НоменклатураНаименование", Новый ОписаниеТипов( "Строка" ) );
	ОписанияТоваров.Колонки.Добавить( "НоменклатураКлюч", Новый ОписаниеТипов( "Строка" ) );
	
	ОписанияТоваров.Колонки.Добавить( "Характеристика", Новый ОписаниеТипов( "СправочникСсылка.ХарактеристикиНоменклатуры" ) );  // создание или перезаполнение если заполнено
	ОписанияТоваров.Колонки.Добавить( "ХарактеристикаСоздана", Новый ОписаниеТипов( "Булево" ) );

	ОписанияТоваров.Индексы.Добавить( "НоменклатураКлюч" );
	
	Возврат ОписанияТоваров;
КонецФункции

Функция ТоварыСоздатьОписанияТоваровЭлементНовый( ОписанияТоваров ) Экспорт
	
	ОписанияТоваровЭлемент = ОписанияТоваров.Добавить();
	
	ОписанияТоваровЭлемент.Штрихкоды = ТоварыСоздатьШтрихкодыНовый();
	ОписанияТоваровЭлемент.Файлы = ТоварыСоздатьФайлыНовый();
	ОписанияТоваровЭлемент.Цены = ТоварыСоздатьЦеныНовый();
	ОписанияТоваровЭлемент.Атрибуты = ТоварыСоздатьАтрибутНовый();
	ОписанияТоваровЭлемент.Иерархия = ТоварыСоздатьИерархияНовый();
	
	Возврат ОписанияТоваровЭлемент;
КонецФункции

Функция ТоварыСоздатьЦеныНовый() Экспорт
	
	Цены = Новый ТаблицаЗначений;
	Цены.Колонки.Добавить( "Имя" );
	Цены.Колонки.Добавить( "Значение" );
	
	Возврат Цены;
КонецФункции

Функция ТоварыСоздатьАтрибутНовый() Экспорт
	
	Атрибуты = Новый ТаблицаЗначений;
	Атрибуты.Колонки.Добавить( "Имя" );
	Атрибуты.Колонки.Добавить( "Значение" );
	
	Возврат Атрибуты;
КонецФункции

Функция ТоварыСоздатьИерархияНовый() Экспорт
	
	Иерархия = Новый ТаблицаЗначений;
	Иерархия.Колонки.Добавить( "Наименование" );
	Иерархия.Колонки.Добавить( "Код" );
	
	Возврат Иерархия;
КонецФункции

Функция ТоварыСоздатьФайлыНовый() Экспорт
	
	Файлы = Новый ТаблицаЗначений;
	Файлы.Колонки.Добавить( "Имя" );
	Файлы.Колонки.Добавить( "Тип" );
	Файлы.Колонки.Добавить( "ДвоичныеДанные" );
	Файлы.Колонки.Добавить( "URL" );
	Файлы.Колонки.Добавить( "ПутьКФайлу" );
	Файлы.Колонки.Добавить( "ФайлСсылка" );
	
	Возврат Файлы;
КонецФункции

Функция ТоварыСоздатьШтрихкодыНовый() Экспорт
	
	Штрихкоды = Новый ТаблицаЗначений;
	Штрихкоды.Колонки.Добавить( "Имя");
	Штрихкоды.Колонки.Добавить( "Значение");
	
	Возврат Штрихкоды;
КонецФункции

Процедура НоменклатураЗаписатьГруппуВРегистр( Ссылка )
	
	ПометкаУдаления = Ложь;
	
	НаборЗаписей = РегистрыСведений.ИерархияНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить( Ссылка );
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Номенклатура = Ссылка;
	НоваяЗапись.ПометкаУдаленияГруппы = ПометкаУдаления;
	НоваяЗапись.КартинкаГруппы = ?(ПометкаУдаления, 1, 0);
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Функция НоменклатураГруппыПоИерархиииСоздать( Параметры ) Экспорт

	НоменклатураРодитель = Параметры.Родитель;
	
	НоменклатураГруппыКэш = Новый Соответствие;
	Для Каждого ИерархияЭлемент Из Параметры.Иерархия Цикл
		
		НоменклатураГруппыКлючПоиска = "" + ИерархияЭлемент.Код + "#" + ИерархияЭлемент.Наименование;
		НоменклатураГруппа = НоменклатураГруппыКэш.Получить( НоменклатураГруппыКлючПоиска );
		Если ЗначениеЗаполнено( НоменклатураГруппа ) Тогда
			НоменклатураРодитель = НоменклатураГруппа;
			Продолжить;
		КонецЕсли;
		
		НоменклатураГруппа = НоменклатураПоНаименованиюНайти( ИерархияЭлемент.Наименование, Истина );
		Если ЗначениеЗаполнено( НоменклатураГруппа ) Тогда
			
			НоменклатураРодитель = НоменклатураГруппа;
			НоменклатураГруппыКэш.Вставить( НоменклатураГруппыКлючПоиска, НоменклатураРодитель );
			
			Продолжить;
		КонецЕсли;
		
		НоменклатураГруппаОбъект = Справочники.Номенклатура.СоздатьГруппу();
		
		НоменклатураГруппаОбъект.Код = ИерархияЭлемент.Код;
		НоменклатураГруппаОбъект.Наименование = ИерархияЭлемент.Наименование;
		НоменклатураГруппаОбъект.Заполнить( Неопределено );
		НоменклатураГруппаОбъект.Родитель = НоменклатураРодитель;
		
		НоменклатураГруппаОбъект.ОбменДанными.Загрузка = Истина;
		
		НоменклатураГруппаОбъект.Записать();
		
		НоменклатураРодитель = НоменклатураГруппаОбъект.Ссылка;
		НоменклатураЗаписатьГруппуВРегистр( НоменклатураРодитель );
		
		НоменклатураГруппыКэш.Вставить( НоменклатураГруппыКлючПоиска, НоменклатураРодитель );
	КонецЦикла;
	
	Возврат НоменклатураРодитель;
КонецФункции

Функция НоменклатураПоляДляЗаполненияПоСтруктуреОписанияТоваровПолучить( ОписанияТоваров )
	
	Поля = Новый Массив;
	Поля.Добавить( "Наименование" );
	Поля.Добавить( "Код" );
	МетаданныеРеквизиты = Метаданные.Справочники.Номенклатура.Реквизиты;
	ОписанияТоваровКолонки = ОписанияТоваров.Колонки;
	Для Каждого МетаданныеЭлемент Из МетаданныеРеквизиты Цикл
	
		Если ОписанияТоваровКолонки.Найти( МетаданныеЭлемент.Имя ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Поля.Добавить( МетаданныеЭлемент.Имя );
	КонецЦикла;
	
	Возврат Поля;	
КонецФункции

Функция ХарактеристикаПоляДляЗаполненияПоСтруктуреОписанияТоваровПолучить( ОписанияТоваров )
	
	Поля = Новый Массив;
	Поля.Добавить( "Наименование" );
	Поля.Добавить( "Код" );
	МетаданныеРеквизиты = Метаданные.Справочники.ХарактеристикиНоменклатуры.Реквизиты;
	ОписанияТоваровКолонки = ОписанияТоваров.Колонки;
	Для Каждого МетаданныеЭлемент Из МетаданныеРеквизиты Цикл
	
		Если ОписанияТоваровКолонки.Найти( МетаданныеЭлемент.Имя ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Поля.Добавить( МетаданныеЭлемент.Имя );
	КонецЦикла;
	
	Возврат Поля;	
КонецФункции

Функция ТоварыСоздать( ПараметрыКонтекст ) Экспорт
	
	Если ТипЗнч( ПараметрыКонтекст ) <> Тип( "Структура" ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ОписанияТоваровЭлемент Из ПараметрыКонтекст.ОписанияТоваров Цикл
		ПараметрыКонтекст.ОписанияТоваровКешИдентификаторы.Вставить( ОписанияТоваровЭлемент.ИдентификаторЭлемента, ОписанияТоваровЭлемент );
	КонецЦикла;
	
	ЗаполнениеНоменклатурыИсключитьРеквизитыЕслиХарактеристика = "Наименование, НаименованиеПолное, Код, Артикул, Родитель";
	
	НоменклатураПоляДляЗаполнения = НоменклатураПоляДляЗаполненияПоСтруктуреОписанияТоваровПолучить( ПараметрыКонтекст.ОписанияТоваров );
	ХарактеристикаПоляДляЗаполнения = ХарактеристикаПоляДляЗаполненияПоСтруктуреОписанияТоваровПолучить( ПараметрыКонтекст.ОписанияТоваров );
	
	ОтборПоНоменклатураКлюч = Новый Структура( "НоменклатураКлюч" );
	
	Для Каждого ОписанияТоваровЭлемент Из ПараметрыКонтекст.ОписанияТоваров Цикл
		
		НоменклатураРодитель = ПараметрыКонтекст.ГруппаДляСозданияНовыхТоваров;
		
		// Иерархия
		Если ПараметрыКонтекст.СоздатьИерархиюНоменклатуры = Истина Тогда
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить( "Иерархия", ОписанияТоваровЭлемент.Иерархия );
			ПараметрыФункции.Вставить( "Родитель", ПараметрыКонтекст.ГруппаДляСозданияНовыхТоваров );
			НоменклатураРодитель = НоменклатураГруппыПоИерархиииСоздать( ПараметрыФункции );
			
		Иначе
			НоменклатураРодитель = ПараметрыКонтекст.ГруппаДляСозданияНовыхТоваров;
		КонецЕсли;
		
		// Номенклатура
		НоменклатураОбъектЗаписать = Ложь;
		НоменклатураСоздана = Ложь;
		Если ЗначениеЗаполнено( ОписанияТоваровЭлемент.Номенклатура ) Тогда
			НоменклатураОбъект = ОписанияТоваровЭлемент.Номенклатура.ПолучитьОбъект();
			
			ПараметрыКонтекст.НоменклатураКоличествоОбновлено = ПараметрыКонтекст.НоменклатураКоличествоОбновлено + 1;
		Иначе
			НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
			НоменклатураСоздана = Истина;
			
			ПараметрыКонтекст.НоменклатураКоличествоСоздано = ПараметрыКонтекст.НоменклатураКоличествоСоздано + 1;
		КонецЕсли;
		

		Если ЗначениеЗаполнено( ОписанияТоваровЭлемент.Характеристика ) 
		Или ОписанияТоваровЭлемент.СоздатьХарактеристику = Истина Тогда
			НоменклатураИсключитьРеквизиты = ЗаполнениеНоменклатурыИсключитьРеквизитыЕслиХарактеристика;
		Иначе
			НоменклатураИсключитьРеквизиты = "Родитель";
		КонецЕсли;
		
		Если НоменклатураСоздана = Истина Тогда
            
            // заполнение нового элемента
			ЗаполнитьЗначенияСвойств( НоменклатураОбъект, ОписанияТоваровЭлемент, , НоменклатураИсключитьРеквизиты );
			
			НоменклатураОбъектЗаписать = Истина;
		Иначе
		    
		    МассивНоменклатураИсключитьРеквизиты = СтрРазделить( НоменклатураИсключитьРеквизиты, ", ");
		    
		    // дозаполнение существующего элемента
			Для Каждого ПолеИмя Из НоменклатураПоляДляЗаполнения Цикл
			
			    Если МассивНоменклатураИсключитьРеквизиты.Найти( ПолеИмя ) <> Неопределено Тогда
			    	Продолжить;
			    КонецЕсли;
			    
				Если Не ЗначениеЗаполнено( ОписанияТоваровЭлемент[ ПолеИмя ] ) Тогда
					Продолжить;
				КонецЕсли;

				Если ПараметрыКонтекст.ПерезаполнитьЗначенияРеквизитовНоменклатуры <> Истина Тогда
					Если ЗначениеЗаполнено( НоменклатураОбъект[ ПолеИмя ] ) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				НоменклатураОбъект[ ПолеИмя ] = ОписанияТоваровЭлемент[ ПолеИмя ];
				
				НоменклатураОбъектЗаписать = Истина;
		    КонецЦикла;
		    
		    
		КонецЕсли;
		
		
		Если НоменклатураСоздана = Истина Тогда
			Если Не ЗначениеЗаполнено( НоменклатураОбъект.Родитель ) Тогда
				НоменклатураОбъект.Родитель = НоменклатураРодитель;
				НоменклатураОбъектЗаписать = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено( НоменклатураОбъект.КатегорияНоменклатуры ) Тогда
			НоменклатураОбъект.КатегорияНоменклатуры = КатегорииНоменклатурыСервер.ЗначениеЗаполненияКатегории();
			НоменклатураОбъектЗаписать = Истина;
		КонецЕсли;
		
		Если ОписанияТоваровЭлемент.СоздатьХарактеристику = Истина Тогда
            
            Если НоменклатураОбъект.ИспользоватьХарактеристики = Ложь Тогда
				НоменклатураОбъект.ИспользоватьХарактеристики = Истина;
				НоменклатураОбъектЗаписать = Истина;
			КонецЕсли;

			Если ПустаяСтрока( НоменклатураОбъект.Наименование ) Тогда
				НоменклатураОбъект.Наименование = ОписанияТоваровЭлемент.НоменклатураНаименование;
				НоменклатураОбъектЗаписать = Истина;
			КонецЕсли;
		
			Если ПустаяСтрока( НоменклатураОбъект.НаименованиеПолное ) Тогда
				НоменклатураОбъект.НаименованиеПолное = ОписанияТоваровЭлемент.НоменклатураНаименование;
				НоменклатураОбъектЗаписать = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока( НоменклатураОбъект.НаименованиеПолное ) Тогда
			НоменклатураОбъект.НаименованиеПолное = ОписанияТоваровЭлемент.Наименование;
			НоменклатураОбъектЗаписать = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено( НоменклатураОбъект.ЕдиницаИзмерения ) Тогда
			НоменклатураОбъект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
			НоменклатураОбъектЗаписать = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока( НоменклатураОбъект.Код ) Тогда
			НоменклатураОбъект.УстановитьНовыйКод();
			НоменклатураОбъектЗаписать = Истина;
		КонецЕсли;
		
		
		Если НоменклатураОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда

			СчетУчетаЗатратПоУмолчанию = ПланыСчетов.Управленческий.КоммерческиеРасходы;
			
			Если Не ЗначениеЗаполнено(НоменклатураОбъект.НаправлениеДеятельности) Тогда
				НоменклатураОбъект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
				НоменклатураОбъектЗаписать = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено( НоменклатураОбъект.СчетУчетаЗатрат ) Тогда
				НоменклатураОбъект.СчетУчетаЗатрат = СчетУчетаЗатратПоУмолчанию;
				НоменклатураОбъектЗаписать = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено( НоменклатураОбъект.СчетУчетаЗапасов ) Тогда
				НоменклатураОбъект.СчетУчетаЗапасов = Справочники.Номенклатура.СчетУчетаЗапасов();
				НоменклатураОбъектЗаписать = Истина;
			КонецЕсли;
			
			Если НЕ НоменклатураОбъект.ЭтоНабор Тогда
				
				Если Не ЗначениеЗаполнено( НоменклатураОбъект.МетодОценки ) Тогда 
					НоменклатураОбъект.МетодОценки = Перечисления.МетодОценкиЗапасов.ПоСредней;
					НоменклатураОбъектЗаписать = Истина;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено( НоменклатураОбъект.СпособПополнения ) Тогда
					НоменклатураОбъект.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
					НоменклатураОбъектЗаписать = Истина;
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли;		
		
		Если ЗначениеЗаполнено( ОписанияТоваровЭлемент.Характеристика ) Тогда
			Если НоменклатураОбъект.ИспользоватьХарактеристики = Ложь Тогда
				НоменклатураОбъект.ИспользоватьХарактеристики = Истина;
				НоменклатураОбъектЗаписать = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НоменклатураОбъектЗаписать = Истина Тогда
			НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
			НоменклатураОбъект.Записать();
		КонецЕсли;
		
		ОписанияТоваровЭлемент.НоменклатураСоздана = НоменклатураСоздана;
		ОписанияТоваровЭлемент.Номенклатура = НоменклатураОбъект.Ссылка;
		
		// Заполнение номенклатуры для всех строк по ключу для создания характеристик к одной номенклатуре
		Если НоменклатураСоздана = Истина Тогда
			ОтборПоНоменклатураКлюч.НоменклатураКлюч = ОписанияТоваровЭлемент.НоменклатураКлюч;
			ОписанияТоваровСтрокиДляЗаполнения = ПараметрыКонтекст.ОписанияТоваров.НайтиСтроки( ОтборПоНоменклатураКлюч );
			Для Каждого ОписанияТоваровСтрокиДляЗаполненияСтрока Из ОписанияТоваровСтрокиДляЗаполнения Цикл
				Если Не ЗначениеЗаполнено( ОписанияТоваровСтрокиДляЗаполненияСтрока.Номенклатура ) Тогда
					ОписанияТоваровСтрокиДляЗаполненияСтрока.Номенклатура = ОписанияТоваровЭлемент.Номенклатура;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		
		
		// Характеристика
		ХарактеристикаИспользуется = Ложь;
		ХарактеристикаЗаписать = Ложь;
		ХарактеристикаСоздана = Ложь;
		Если ЗначениеЗаполнено( ОписанияТоваровЭлемент.Характеристика ) Тогда
			
			ХарактеристикаИспользуется = Истина;
			
			ХарактеристикаОбъект = ОписанияТоваровЭлемент.Характеристика.ПолучитьОбъект();
			
			ПараметрыКонтекст.ХарактеристикиКоличествоОбновлено = ПараметрыКонтекст.ХарактеристикиКоличествоОбновлено + 1;
		Иначе
		
			Если ОписанияТоваровЭлемент.СоздатьХарактеристику = Истина Тогда

				ХарактеристикаИспользуется = Истина;
				ХарактеристикаСоздана = Истина;
				ХарактеристикаЗаписать = Истина;
				
				ХарактеристикаОбъект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
				
				ПараметрыКонтекст.ХарактеристикиКоличествоСоздано = ПараметрыКонтекст.ХарактеристикиКоличествоСоздано + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ХарактеристикаИспользуется = Истина Тогда

			
			Если ХарактеристикаСоздана = Истина Тогда
			
				// заполнение нового элемента
				ЗаполнитьЗначенияСвойств( ХарактеристикаОбъект, ОписанияТоваровЭлемент, , "Родитель" );
				
				ХарактеристикаЗаписать = Истина;
				
			Иначе
				
				// дозаполнение существующего элемента
				Для Каждого ПолеИмя Из ХарактеристикаПоляДляЗаполнения Цикл
					
					Если Не ЗначениеЗаполнено( ОписанияТоваровЭлемент[ ПолеИмя ] ) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПараметрыКонтекст.ПерезаполнитьЗначенияРеквизитовНоменклатуры <> Истина Тогда
						Если ЗначениеЗаполнено( НоменклатураОбъект[ ПолеИмя ] ) Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					ХарактеристикаОбъект[ ПолеИмя ] = ОписанияТоваровЭлемент[ ПолеИмя ];
					
					ХарактеристикаЗаписать = Истина;
				КонецЦикла;
			    
			    
			КонецЕсли;
			
			
			Если ПустаяСтрока( ХарактеристикаОбъект.НаименованиеДляПечати ) Тогда
				ХарактеристикаОбъект.НаименованиеДляПечати = ОписанияТоваровЭлемент.НаименованиеПолное;
				
				ХарактеристикаЗаписать = Истина;
			КонецЕсли;
			
			Если ХарактеристикаОбъект.Владелец <> ОписанияТоваровЭлемент.Номенклатура Тогда
				ХарактеристикаОбъект.Владелец = ОписанияТоваровЭлемент.Номенклатура;
				ХарактеристикаЗаписать = Истина;
			КонецЕсли;
			
			Если ХарактеристикаЗаписать = Истина Тогда
				ХарактеристикаОбъект.ОбменДанными.Загрузка = Истина;
				ХарактеристикаОбъект.Записать();
			КонецЕсли;
			
			ОписанияТоваровЭлемент.ХарактеристикаСоздана = ХарактеристикаСоздана;
			ОписанияТоваровЭлемент.Характеристика = ХарактеристикаОбъект.Ссылка;
		КонецЕсли;
		
		
		
		// штрихкоды
		Штрихкоды = Новый Массив;
		Для Каждого Штрихкод Из ОписанияТоваровЭлемент.Штрихкоды Цикл
			Если Штрихкоды.Найти( Штрихкод.Значение ) = Неопределено Тогда
				Штрихкоды.Добавить( Штрихкод.Значение );
			КонецЕсли;
		КонецЦикла;
		ШтрихкодыЗаписать( ОписанияТоваровЭлемент.Номенклатура, ОписанияТоваровЭлемент.Характеристика, Штрихкоды, ПараметрыКонтекст );
		
		
		
		// файлы
		Если ПараметрыКонтекст.ЗаписатьФайлы = Истина Тогда
		
			ВладелецФайлов = 
			?( ЗначениеЗаполнено( ОписанияТоваровЭлемент.Характеристика ), 
			ОписанияТоваровЭлемент.Характеристика, 
			ОписанияТоваровЭлемент.Номенклатура );
		
			ФайлыЗаписать( ВладелецФайлов, ОписанияТоваровЭлемент.Файлы, ПараметрыКонтекст );
			
			// основное изображение
			ОсновноеИзображениеУстановитьЕслиНеУстановлено( ВладелецФайлов, ОписанияТоваровЭлемент.Файлы );
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	Возврат Истина;
КонецФункции

Процедура ОсновноеИзображениеУстановитьЕслиНеУстановлено( ВладелецФайлов, Файлы )

	ФайлКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта( ВладелецФайлов, "ФайлКартинки" );
	Если ЗначениеЗаполнено( ФайлКартинки ) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Файл Из Файлы Цикл
		
		Если Не ЗначениеЗаполнено( Файл.ФайлСсылка ) Тогда
			Продолжить;
		КонецЕсли;
		
		//!!!!! проверка по типу файла на изображение
		
		ОсновноеИзображение = Файл.ФайлСсылка;
		
		ВладелецФайловОбъект = ВладелецФайлов.ПолучитьОбъект();
		ВладелецФайловОбъект.ФайлКартинки = ОсновноеИзображение;
		ВладелецФайловОбъект.ОбменДанными.Загрузка = Истина;
		ВладелецФайловОбъект.Записать();
		
		Прервать;
		
	КонецЦикла;

КонецПроцедуры

Функция НоменклатураШтрихкодыПолучить( Номенклатура = Неопределено, Характеристики = Неопределено ) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		ПараметрНоменклатура = Неопределено;
	Иначе
		Если ТипЗнч( Номенклатура ) = Тип( "Массив" )
			Или ТипЗнч( Номенклатура ) = Тип( "СписокЗначений" ) Тогда
			ПараметрНоменклатура = Номенклатура;
		Иначе
			ПараметрНоменклатура = Новый Массив;
			ПараметрНоменклатура.Добавить( Номенклатура );
		КонецЕсли;
	КонецЕсли;
	
	Если Характеристики = Неопределено Тогда
		ПараметрХарактеристики = Неопределено;
	Иначе
		Если ТипЗнч( Характеристики ) = Тип( "Массив" )
			Или ТипЗнч( Характеристики ) = Тип( "СписокЗначений" ) Тогда
			ПараметрХарактеристики = Характеристики;
		Иначе
			ПараметрХарактеристики = Новый Массив;
			ПараметрХарактеристики.Добавить( Характеристики );
		КонецЕсли;
	КонецЕсли;
	
	ЗапросТекст =
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Партия КАК Партия,
	|	ШтрихкодыНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ИСТИНА
	|	И &УсловиеНоменклатура
	|	И &УсловиеХарактеристики";
	
	Если ПараметрНоменклатура = Неопределено Тогда
		ЗапросТекст = СтрЗаменить( ЗапросТекст, "И &УсловиеНоменклатура", "" );
	Иначе
		ЗапросТекст = СтрЗаменить( ЗапросТекст, "И &УсловиеНоменклатура", "И ШтрихкодыНоменклатуры.Номенклатура В(&ПараметрНоменклатура)" );
	КонецЕсли;

	Если ПараметрХарактеристики = Неопределено Тогда
		ЗапросТекст = СтрЗаменить( ЗапросТекст, "И &УсловиеХарактеристики", "" );
	Иначе
		ЗапросТекст = СтрЗаменить( ЗапросТекст, "И &УсловиеХарактеристики", "И ШтрихкодыНоменклатуры.Характеристика В(&ПараметрХарактеристики)" );
	КонецЕсли;
	
	ЗапросОбъект = Новый Запрос( ЗапросТекст );
	
	ЗапросОбъект.УстановитьПараметр( "ПараметрНоменклатура", ПараметрНоменклатура );
	ЗапросОбъект.УстановитьПараметр( "ПараметрХарактеристики", ПараметрХарактеристики );
	
	Результат = ЗапросОбъект.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции

Функция ШтрихкодыЗаписать( Номенклатура, Характеристика = Неопределено, Штрихкоды, ПараметрыКонтекст = Неопределено )
	
   	#Область ПроверкаВходящихПараметров
	ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( Номенклатура, ,
	Тип( "СправочникСсылка.Номенклатура" ),
	Истина, Истина, "Функция <ШтрихкодыЗаписать>: Переменная <Номенклатура>: " );
    
    ПроверкаОжидаемыеТипы = Новый Массив;
    ПроверкаОжидаемыеТипы.Добавить( Тип( "Неопределено" ) );
    ПроверкаОжидаемыеТипы.Добавить( Тип( "СправочникСсылка.ХарактеристикиНоменклатуры" ) );
	ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( Характеристика, ,
	ПроверкаОжидаемыеТипы,
	Ложь, Истина, "Функция <ШтрихкодыЗаписать>: Переменная <Характеристика>: " );
	#КонецОбласти
    
    ТоварПредставление = "" + Номенклатура + ?( ЗначениеЗаполнено( Характеристика ), ", " + Характеристика, "" );
    
	НачатьТранзакцию();
    Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить( "РегистрСведений.ШтрихкодыНоменклатуры" );
		ЭлементБлокировкиДанных.УстановитьЗначение( "Номенклатура", Номенклатура );
		Если ЗначениеЗаполнено( Характеристика ) Тогда
			ЭлементБлокировкиДанных.УстановитьЗначение( "Характеристика", Характеристика );
		КонецЕсли;
		БлокировкаДанных.Заблокировать();

		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить( Номенклатура );
		Если ЗначениеЗаполнено( Характеристика ) Тогда
			НаборЗаписей.Отбор.Характеристика.Установить( Характеристика );
		КонецЕсли;
		НаборЗаписей.Прочитать();

		НаборЗаписейШтрихкоды = НаборЗаписей.ВыгрузитьКолонку( "Штрихкод" );
		
		ЗаписаныШтрихкоды = Новый Массив;
		Записать = Ложь;
		Для Каждого Штрихкод Из Штрихкоды Цикл
			
			Если НаборЗаписейШтрихкоды.Найти( Штрихкод ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписейСтрока = НаборЗаписей.Добавить();

			НаборЗаписейСтрока.Штрихкод = Штрихкод;
			НаборЗаписейСтрока.Номенклатура = Номенклатура;
			НаборЗаписейСтрока.Характеристика = Характеристика;
			НаборЗаписейСтрока.Партия = Неопределено;
			НаборЗаписейСтрока.ЕдиницаИзмерения = Неопределено;
			
			Записать = Истина;
			ЗаписаныШтрихкоды.Добавить( Штрихкод );
		КонецЦикла;
		
		Если Записать = Истина Тогда
			НаборЗаписей.Записать( Истина );
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Если ЗаписаныШтрихкоды.Количество() > 0 Тогда
			ТекстСообщения = "ШтрихкодыЗаписать: Записаны штрихкоды: " + СтрСоединить( ЗаписаныШтрихкоды, "," ) + ".";
			УчетнаяЗапись = ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( ПараметрыКонтекст, "УчетнаяЗапись", Неопределено );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстСообщения, УчетнаяЗапись );
			
			Если ПараметрыКонтекст.Свойство( "ШтрихкодыКоличествоСоздано" ) Тогда
				ПараметрыКонтекст.ШтрихкодыКоличествоСоздано = ЗаписаныШтрихкоды.Количество();
			КонецЕсли;
		КонецЕсли;
		
	Исключение
	
		ОтменитьТранзакцию();
		
		ТекстСообщения = 
		СтрШаблон( НСтр("ru = 'ШтрихкодыЗаписать: Ошибка при записи позиции «%1» возникла ошибка: %2.'", 
		ОбщегоНазначения.КодОсновногоЯзыка()),
		ТоварПредставление,
		ОбработкаОшибок.ПодробноеПредставлениеОшибки( ИнформацияОбОшибке()) );
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,,,
		ТекстСообщения);
		
		УчетнаяЗапись = ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( ПараметрыКонтекст, "УчетнаяЗапись", Неопределено );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстСообщения, УчетнаяЗапись, Истина );
		
		ОбщегоНазначения.СообщитьПользователю( ТекстСообщения );
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ФайлыЗаписать( ВладелецФайлов, Файлы, ПараметрыКонтекст = Неопределено )
	
   	#Область ПроверкаВходящихПараметров
    ПроверкаОжидаемыеТипы = Новый Массив;
    ПроверкаОжидаемыеТипы.Добавить( Тип( "СправочникСсылка.Номенклатура" ) );
    ПроверкаОжидаемыеТипы.Добавить( Тип( "СправочникСсылка.ХарактеристикиНоменклатуры" ) );
	ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( ВладелецФайлов, ,
	ПроверкаОжидаемыеТипы,
	Истина, Истина, "Функция <ФайлыЗаписать>: Переменная <ВладелецФайлов>: " );
	#КонецОбласти
    
    ВладелецФайловПредставление = "" + ВладелецФайлов;
    
	НачатьТранзакцию();
    Попытка

		УчетнаяЗапись = ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( ПараметрыКонтекст, "УчетнаяЗапись", Неопределено );

		ВладелецФайловФайлы = ФайлыПолучить( ВладелецФайлов );
		
		Записать = Ложь;
		Для Каждого Файл Из Файлы Цикл
			
			Если ЗначениеЗаполнено( Файл.URL ) Тогда
			
				ВладелецФайловФайлыСтрока = ВладелецФайловФайлы.Найти( Файл.URL, "Описание" );
				Если ВладелецФайловФайлыСтрока <> Неопределено Тогда
					Файл.ФайлСсылка = ВладелецФайловФайлыСтрока.Ссылка;
					Продолжить;
				КонецЕсли;
				
				// загрузка по URL
				ДанныеФайла = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище( Файл.URL, Неопределено, Истина );
				Если ДанныеФайла.Статус <> Истина Тогда
					// ошибка, записать в лог
					Продолжить;
				КонецЕсли;
				
				АдресВременногоХранилища = ДанныеФайла.Путь;
				
				ПозицияТочки = СтрНайти( Файл.URL, ".", НаправлениеПоиска.СКонца );
				ПозицияРазделителяПутиИИмени = СтрНайти( Файл.URL, "/", НаправлениеПоиска.СКонца );
				
				ИмяФайлаБезРасширения = Сред( Файл.URL, ПозицияРазделителяПутиИИмени + 1, ПозицияТочки - ПозицияРазделителяПутиИИмени - 1 );
				Если ПустаяСтрока( ИмяФайлаБезРасширения ) Тогда
					ИмяФайлаБезРасширения = Лев( Файл.URL, ПозицияТочки - 1 );
				КонецЕсли;
				
				РасширениеФайла = Сред( Файл.URL, ПозицияТочки + 1 );
				
				ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
				ПараметрыФайла.Автор = Пользователи.АвторизованныйПользователь();
				ПараметрыФайла.ВладелецФайлов = ВладелецФайлов;
				ПараметрыФайла.ИмяБезРасширения = ИмяФайлаБезРасширения;
				ПараметрыФайла.РасширениеБезТочки = РасширениеФайла;
				ПараметрыФайла.ГруппаФайлов = Неопределено;
				ПараметрыФайла.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
				
				ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл( ПараметрыФайла, АдресВременногоХранилища, , Файл.URL );
				Файл.ФайлСсылка = ПрисоединенныйФайл;
				
				ТекстСообщения = "ФайлыЗаписать: Записан присоединенный файл: " + ПрисоединенныйФайл + ", владелец: " + ВладелецФайлов;
				ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстСообщения, УчетнаяЗапись );

								
				Если ПараметрыКонтекст.Свойство( "ФайлыКоличествоСоздано" ) Тогда
					ПараметрыКонтекст.ФайлыКоличествоСоздано = ПараметрыКонтекст.ФайлыКоличествоСоздано + 1;
				КонецЕсли;
			Иначе
				// обработка других параметров будет реализована позднее
			КонецЕсли;
            
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
	
		ОтменитьТранзакцию();
		
		ТекстСообщения = 
		СтрШаблон( НСтр("ru = 'ФайлыЗаписать: Ошибка при записи позиции «%1» возникла ошибка: %2.'", 
		ОбщегоНазначения.КодОсновногоЯзыка()),
		ВладелецФайловПредставление,
		ОбработкаОшибок.ПодробноеПредставлениеОшибки( ИнформацияОбОшибке()) );
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,,,
		ТекстСообщения);
		
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстСообщения, УчетнаяЗапись, Истина );
		
		ОбщегоНазначения.СообщитьПользователю( ТекстСообщения );
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ФайлыПолучить( ВладелецФайлов )
	
	ЗапросТекст =
	"ВЫБРАТЬ
	|	Источник.Ссылка КАК Ссылка,
	|	Источник.ПометкаУдаления КАК ПометкаУдаления,
	|	Источник.Наименование КАК Наименование,
	|	Источник.Автор КАК Автор,
	|	Источник.ВладелецФайла КАК ВладелецФайла,
	|	Источник.ДатаЗаема КАК ДатаЗаема,
	|	Источник.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
	|	Источник.ДатаСоздания КАК ДатаСоздания,
	|	Источник.Зашифрован КАК Зашифрован,
	|	Источник.Изменил КАК Изменил,
	|	Источник.ИндексКартинки КАК ИндексКартинки,
	|	Источник.Описание КАК Описание,
	|	Источник.ПодписанЭП КАК ПодписанЭП,
	|	Источник.ПутьКФайлу КАК ПутьКФайлу,
	|	Источник.Размер КАК Размер,
	|	Источник.Расширение КАК Расширение,
	|	Источник.Редактирует КАК Редактирует,
	|	Источник.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста,
	|	Источник.ТекстХранилище КАК ТекстХранилище,
	|	Источник.ТипХраненияФайла КАК ТипХраненияФайла,
	|	Источник.Том КАК Том,
	|	Источник.ФайлХранилище КАК ФайлХранилище,
	|	Источник.ХранитьВерсии КАК ХранитьВерсии
	|ИЗ
	|	&Источник КАК Источник
	|ГДЕ
	|	Источник.ВладелецФайла = &ВладелецФайла
	|	И Источник.ПометкаУдаления = ЛОЖЬ";
	
	Если ТипЗнч( ВладелецФайлов ) = Тип( "СправочникСсылка.Номенклатура" ) Тогда
		ЗапросТекст = СтрЗаменить( ЗапросТекст, "&Источник", "Справочник.НоменклатураПрисоединенныеФайлы" );
	Иначе
		ЗапросТекст = СтрЗаменить( ЗапросТекст, "&Источник", "Справочник.ХарактеристикиНоменклатурыПрисоединенныеФайлы" );
	КонецЕсли;

	ЗапросОбъект = Новый Запрос( ЗапросТекст );
	
	ЗапросОбъект.УстановитьПараметр( "ВладелецФайла", ВладелецФайлов );
	
	Результат = ЗапросОбъект.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции

Функция СобытиеЖурналаРегистрации() Экспорт

	Возврат НСтр("ru = 'Обмен с внешними системами: Номенклатура'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

Функция КатегорияНоменклатурыПоКодуИНаименованиюНайти( Код, Наименование, ЭтоГруппа = Ложь, Параметры = Неопределено ) Экспорт
	Ссылка = Неопределено;
	
	ЗапросТекст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КатегорииНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|ГДЕ
	|	КатегорииНоменклатуры.Наименование = &Наименование
	|	И КатегорииНоменклатуры.Код = &Код
	|	И КатегорииНоменклатуры.ПометкаУдаления = ЛОЖЬ
	|	И КатегорииНоменклатуры.ЭтоГруппа = &ЭтоГруппа";
	
	ЗапросОбъект = Новый Запрос( ЗапросТекст );
	ЗапросОбъект.УстановитьПараметр( "Код", Код );
	ЗапросОбъект.УстановитьПараметр( "Наименование", Наименование );
	ЗапросОбъект.УстановитьПараметр( "ЭтоГруппа", ЭтоГруппа );
	
	ЗапросВыборка = ЗапросОбъект.Выполнить().Выбрать();
	Если ЗапросВыборка.Следующий() Тогда
		Ссылка = ЗапросВыборка.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
КонецФункции

Функция КатегорияНоменклатурыПоНаименованиюНайти( Наименование, ЭтоГруппа = Ложь, Параметры = Неопределено ) Экспорт
	Ссылка = Неопределено;
	
	ЗапросТекст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КатегорииНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|ГДЕ
	|	КатегорииНоменклатуры.Наименование = &Наименование
	|	И КатегорииНоменклатуры.ПометкаУдаления = ЛОЖЬ
	|	И КатегорииНоменклатуры.ЭтоГруппа = &ЭтоГруппа";
	
	ЗапросОбъект = Новый Запрос( ЗапросТекст );
	ЗапросОбъект.УстановитьПараметр( "Наименование", Наименование );
	ЗапросОбъект.УстановитьПараметр( "ЭтоГруппа", ЭтоГруппа );
	
	ЗапросВыборка = ЗапросОбъект.Выполнить().Выбрать();
	Если ЗапросВыборка.Следующий() Тогда
		Ссылка = ЗапросВыборка.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
КонецФункции

Функция НоменклатураПоКодуИНаименованиюНайти( Код, Наименование, ЭтоГруппа = Ложь, Параметры = Неопределено ) Экспорт
	Ссылка = Неопределено;
	
	ЗапросТекст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование = &Наименование
	|	И Номенклатура.Код = &Код
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.ЭтоГруппа = &ЭтоГруппа";
	
	ЗапросОбъект = Новый Запрос( ЗапросТекст );
	ЗапросОбъект.УстановитьПараметр( "Наименование", Наименование );
	ЗапросОбъект.УстановитьПараметр( "Код", Код );
	ЗапросОбъект.УстановитьПараметр( "ЭтоГруппа", ЭтоГруппа );
	
	ЗапросВыборка = ЗапросОбъект.Выполнить().Выбрать();
	Если ЗапросВыборка.Следующий() Тогда
		Ссылка = ЗапросВыборка.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
КонецФункции

Функция НоменклатураПоНаименованиюНайти( Наименование, ЭтоГруппа = Ложь, Параметры = Неопределено ) Экспорт
	Ссылка = Неопределено;
	
	ЗапросТекст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование = &Наименование
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.ЭтоГруппа = &ЭтоГруппа";
	
	ЗапросОбъект = Новый Запрос( ЗапросТекст );
	ЗапросОбъект.УстановитьПараметр( "Наименование", Наименование );
	ЗапросОбъект.УстановитьПараметр( "ЭтоГруппа", ЭтоГруппа );
	
	ЗапросВыборка = ЗапросОбъект.Выполнить().Выбрать();
	Если ЗапросВыборка.Следующий() Тогда
		Ссылка = ЗапросВыборка.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
КонецФункции

Функция КатегорияДанныеИерархияНовый() Экспорт
	
	Иерархия = Новый ТаблицаЗначений;
	Иерархия.Колонки.Добавить( "Наименование" );
	Иерархия.Колонки.Добавить( "Код" );
	
	Возврат Иерархия;
КонецФункции

Функция КатегорияДанныеНовый() Экспорт

	КатегорияДанные = Новый Структура;
	
	КатегорияДанные.Вставить( "Наименование", "" );
	КатегорияДанные.Вставить( "Код", "" );
	КатегорияДанные.Вставить( "Иерархия", КатегорияДанныеИерархияНовый() );
	КатегорияДанные.Вставить( "СоздатьИерархию", Ложь );
	
	Возврат КатегорияДанные;
КонецФункции

Процедура КатегорияНоменклатурыСоздать_ПередЗаписью( КатегорияОбъект )

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюВидаОбъекта( КатегорияОбъект, "Справочник_Спецификации", "НаборСвойствСпецификации" );
	УправлениеСвойствами.ПередЗаписьюВидаОбъекта( КатегорияОбъект, "Справочник_КомплектацииНоменклатуры", "НаборСвойствКомплектацииНоменклатуры" );
	УправлениеСвойствами.ПередЗаписьюВидаОбъекта( КатегорияОбъект, "Справочник_ХарактеристикиНоменклатуры", "НаборСвойствХарактеристики" );
	УправлениеСвойствами.ПередЗаписьюВидаОбъекта( КатегорияОбъект, "Справочник_Номенклатура", "НаборСвойств" );
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

Функция КатегорияНоменклатурыСоздать( КатегорияДанные, Параметры = Неопределено ) Экспорт
    
	КатегорияСсылка = КатегорияНоменклатурыПоНаименованиюНайти( КатегорияДанные.Наименование, Ложь );
	Если ЗначениеЗаполнено( КатегорияСсылка ) Тогда
		Возврат КатегорияСсылка;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка    

    	ТекущийРодитель = Неопределено;
		Если КатегорияДанные.СоздатьИерархию = Истина Тогда
			// иерархия
			Для Каждого ИерархияЭлемент Из КатегорияДанные.Иерархия Цикл
				
				КатегорияСсылка = КатегорияНоменклатурыПоНаименованиюНайти( ИерархияЭлемент.Наименование, Истина );
				Если ЗначениеЗаполнено( КатегорияСсылка ) Тогда
					ТекущийРодитель = КатегорияСсылка;
					Продолжить;
				КонецЕсли;
				
				КатегорияОбъект = Справочники.КатегорииНоменклатуры.СоздатьГруппу();
				КатегорияОбъект.Код = ИерархияЭлемент.Код;
				КатегорияОбъект.Наименование = ИерархияЭлемент.Наименование;
				КатегорияОбъект.Заполнить( Неопределено );
				КатегорияОбъект.Родитель = ТекущийРодитель;
				
				КатегорияОбъект.ОбменДанными.Загрузка = Истина;
				КатегорияОбъект.Записать();
				
				ТекущийРодитель = КатегорияОбъект.Ссылка;
			КонецЦикла;
			
		КонецЕсли;
			
		// элемент
		КатегорияОбъект = Справочники.КатегорииНоменклатуры.СоздатьЭлемент();
		КатегорияОбъект.Код = КатегорияДанные.Код;
		КатегорияОбъект.Наименование = КатегорияДанные.Наименование;
		КатегорияОбъект.Заполнить( Неопределено );
		КатегорияОбъект.Родитель = ТекущийРодитель;

		КатегорияНоменклатурыСоздать_ПередЗаписью( КатегорияОбъект );
		
		КатегорияОбъект.ОбменДанными.Загрузка = Истина;
		КатегорияОбъект.Записать();
		
		КатегорияСсылка = КатегорияОбъект.Ссылка;
		
		ТекстСообщения = СтрШаблон( НСтр("ru = 'КатегорияНоменклатурыСоздать: Создана категория номенклатуры «%1».'" ), КатегорияСсылка );
		УчетнаяЗапись = ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( Параметры, "УчетнаяЗапись", Неопределено );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстСообщения, УчетнаяЗапись );
		
		
		ЗафиксироватьТранзакцию();
		
	Исключение
	
		ОтменитьТранзакцию();
		
		ТекстСообщения = 
		СтрШаблон( НСтр("ru = 'КатегорияНоменклатурыСоздать: Ошибка при записи категории «%1» возникла ошибка: %2.'", 
		ОбщегоНазначения.КодОсновногоЯзыка()),
		КатегорияДанные.Наименование,
		ОбработкаОшибок.ПодробноеПредставлениеОшибки( ИнформацияОбОшибке()) );
		
		ЗаписьЖурналаРегистрации( СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,,,
		ТекстСообщения);
		
		УчетнаяЗапись = ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( Параметры, "УчетнаяЗапись", Неопределено );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстСообщения, УчетнаяЗапись, Истина );
		
		ОбщегоНазначения.СообщитьПользователю( ТекстСообщения );
		
		Возврат Ложь;
	КонецПопытки;

	Возврат КатегорияСсылка;
КонецФункции
