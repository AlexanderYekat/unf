
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокРегулярныеПлатежи.Параметры.УстановитьЗначениеПараметра("АктуальнаяДатаСеанса", НачалоДня(ТекущаяДатаСеанса()));
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Документы.ПлатежноеПоручение);
	
	ДвиженияДенежныхСредствВызовСервера.ЗаполнитьСписокВыбораВидовОпераций("ПлатежноеПоручение",
		Элементы.ОтборВидОперации.СписокВыбора);
		
	ДвиженияДенежныхСредствВызовСервера.ЗаполнитьСписокВыбораВидовОпераций("ПлатежноеПоручение",
		Элементы.ОтборВидОперацииРегулярныеПлатежи.СписокВыбора);
	
	ДвижениеДенежныхСредствСервер.СформироватьСписокКомандСозданияДокументов(ЭтотОбъект,
		"ПодменюСоздатьПлатежноеПоручение", "ПлатежноеПоручение");
	
	ПрочитатьРасчетныеСчета();
	
	СчетаНаОплату.Параметры.УстановитьЗначениеПараметра("АктуальнаяДатаСеанса", НачалоДня(ТекущаяДатаСеанса()));
	
	//УНФ.ОтборыСписка
	РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект);
	РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список);
	
	РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект, "ГруппаОтборыРегулярныеПлатежи",
		"ПредопределенныеОтборыПоУмолчаниюРегулярныеПлатежи");
	
	СтруктураИменЭлементов = Новый Структура();
	
	СтруктураИменЭлементов.Вставить("ФильтрыНастройкиИДопИнфо", "ФильтрыНастройкиИДопИнфоРегулярныеПлатежи");
	СтруктураИменЭлементов.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборыРегулярныеПлатежи");
	СтруктураИменЭлементов.Вставить("ПраваяПанель", "ПраваяПанельРегулярныеПлатежи");
	СтруктураИменЭлементов.Вставить("ОтборПериод", "ОтборПериодРегулярныеПлатежи");
	СтруктураИменЭлементов.Вставить("ПредставлениеПериода", "ПредставлениеПериодаРегулярныеПлатежи");
	СтруктураИменЭлементов.Вставить("ИмяПоляОтбора", "ДатаСледующегоПлатежа");
	
	РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, СписокРегулярныеПлатежи, "СписокРегулярныеПлатежи",
		СтруктураИменЭлементов, , , ,
		"ДанныеМетокРегулярныеПлатежи", , "ДанныеОтборовРегулярныеПлатежи", "ГруппаОтборыРегулярныеПлатежи");
	
	//Конец УНФ.ОтборыСписка
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ПараметрыСозданияФормыСписка = ОбменСБанкамиКлиентСервер.ПараметрыСозданияФормыСписка();
	ПараметрыСозданияФормыСписка.ПерепискаСБанками.Родитель = Элементы.ФильтрыНастройкиИДопИнфо.Имя;
	ПараметрыСозданияФормыСписка.ПерепискаСБанками.МестоРасположения = Элементы.СвернутьОтборы.Имя;
	ПараметрыСозданияФормыСписка.Реклама.Родитель = Элементы.ФильтрыНастройкиИДопИнфо.Имя;
	ПараметрыСозданияФормыСписка.Реклама.МестоРасположения = Элементы.СвернутьОтборы.Имя;
	ПараметрыСозданияФормыСписка.СписокДокументов.МестоРасположения = Элементы.СписокКомментарий.Имя;
	ПараметрыСозданияФормыСписка.ГруппаКоманд.МестоРасположения = Элементы.ДополнениеПоиск.Имя;
	ПараметрыСозданияФормыСписка.ГруппаКоманд.Родитель = Элементы.КоманднаяПанель;
	ОбменСБанками.ПриСозданииФормыСпискаНаСервере(ЭтотОбъект, ПараметрыСозданияФормыСписка);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	Если Элементы.Найти("ГруппаКомандДиректБанк") <> Неопределено Тогда
		Элементы.ГруппаКомандДиректБанк.Видимость = МожноРедактировать;
	КонецЕсли;

	// РерулярныеПлатежи
	УстановитьВидимостьРерулярныеПлатежи(Элементы.СтраницаРегулярныеПлатежи);
	
	УстановитьУсловноеОформлениеФормы();
	// РерулярныеПлатежи
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	ДинамическиеСпискиУНФ.ОтображатьТолькоВремяДляТекущейДаты(Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	Если Элементы.Найти("ПисьмаДиректБанк") <> Неопределено Тогда
		ОбменСБанкамиКлиент.ОбработатьОповещениеФормыСписка(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	Если ИмяСобытия = "Запись_ПлатежноеПоручение" Тогда
		Если Параметр.Свойство("Ссылка") Тогда
			Элементы.Список.ТекущаяСтрока = Параметр.Ссылка;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновлениеГрафикаРегулярныхПлатежей" Тогда
		Элементы.СписокРегулярныеПлатежи.Обновить();
	ИначеЕсли ИмяСобытия = "УстановитьТекущуюСтраницу" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[Параметр];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		//УНФ.ОтборыСписка
		СохранитьНастройкиОтборов();
		СохранитьНастройкиОтборовРегулярныеПлатежи();
		//Конец УНФ.ОтборыСписка
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ОбменСБанкамиКлиент.ПриВыбореСтрокиИзСпискаДокументов(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды ВыгрузитьВКлиентБанк.
//
&НаКлиенте
Процедура ВыгрузитьВКлиентБанк(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("БанковскийСчетОрганизации", ТекущиеДанные.БанковскийСчет);
		ПараметрыОткрытия.Вставить("НачПериода", НачалоДня(ТекущиеДанные.Дата));
		ПараметрыОткрытия.Вставить("КонПериода", КонецДня(ТекущиеДанные.Дата));
		ПараметрыОткрытия.Вставить("НачалоПериода", НачалоДня(ТекущиеДанные.Дата));
		ПараметрыОткрытия.Вставить("КонецПериода", КонецДня(ТекущиеДанные.Дата));
		ПараметрыОткрытия.Вставить("РежимПоУмолчанию", "ГруппаВыгрузка");
	КонецЕсли;
	
	Если РасчетыРаботаСФормамиВызовСервера.ПроверитьИспользованиеКлиентБанкаБП() Тогда
		ОткрытьФорму("Обработка.КлиентБанк.Форма.Форма", ПараметрыОткрытия);
	Иначе
		ОткрытьФорму("Обработка.КлиентБанкУНФ.Форма.ФормаВыгрузка", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьВКлиентБанк()

&НаКлиенте
Процедура ВыгрузитьВКлиентБанкаТекущийДокумент(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо выделить документ, который хотите выгрузить в клиент-банка.'"));
		Возврат;
	КонецЕсли;
	
	СписокВыгрузки = Новый СписокЗначений;
	СписокВыгрузки.Добавить(ТекущиеДанные.Ссылка);
	ПараметрыОткрытия = Новый Структура("СписокПлатежек, БанковскийСчет", СписокВыгрузки, ТекущиеДанные.БанковскийСчет);
	ОткрытьФорму("Обработка.КлиентБанкУНФ.Форма.СохранениеПлатежек", ПараметрыОткрытия,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоШаблону(Команда)
	
	ЗаполнениеОбъектовУНФКлиент.ПоказатьВыборШаблонаДляСозданияДокументаИзСписка(
	"Документ.ПлатежноеПоручение",
	Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
	Элементы.Список.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьПерейти(Команда)
	
	ОткрытьФорму("Отчет.ДенежныеСредства.Форма", Новый Структура("КлючВарианта, СформироватьПриОткрытии", "Ведомость", Истина));
	
КонецПроцедуры // ВедомостьПерейти()

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработчикКомандСозданияДокумента(Команда)
	
	ДвиженияДенежныхСредствКлиент.ВыполнитьКомандуСозданияДокумента(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежноеПоручениеПоВыбраннымСчетам(Команда)
	
	Если Элементы.СчетаНаОплату.ТекущиеДанные = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		ПоказатьПредупреждение(Неопределено,ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	МассивСчетов = Элементы.СчетаНаОплату.ВыделенныеСтроки;
	
	Если МассивСчетов.Количество() = 1 Тогда
		
		ПараметрыОткрытия = Новый Структура("Основание", МассивСчетов[0]);
		ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", ПараметрыОткрытия);
		
	Иначе
		
		СтруктураДанных = ПроверитьКлючевыеРеквизитыСчетов(МассивСчетов);
		
		Если СтруктураДанных.СформироватьНесколькоСчетов Тогда
			
			Если СтруктураДанных.Свойство("ТекстСообщения") Тогда
				ТекстСообщения = СтруктураДанных.ТекстСообщения;
			Иначе
				ТекстСообщения = НСтр("ru = 'Счета на оплату отличаются данными (%ПредставлениеДанных%) шапки документов! Сформировать несколько платежных поручений?'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеДанных%", СтруктураДанных.ПредставлениеДанных);
			КонецЕсли; 
			
			ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьПлатежноеПоручениеЗавершение", ЭтотОбъект, Новый Структура("МассивСчетов", МассивСчетов)), ТекстСообщения, РежимДиалогаВопрос.ДаНет, 0);
			
		Иначе
			
			СтруктураЗаполнения = Новый Структура();
			СтруктураЗаполнения.Вставить("МассивСчетовНаОплату", МассивСчетов);
			ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", Новый Структура("Основание", СтруктураЗаполнения));
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежноеПоручениеПоВыбраннымРегулярнымПлатежам(Команда)
	
	Если Элементы.СписокРегулярныеПлатежи.ТекущиеДанные = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	МассивИсходныхДокументов = Новый Массив;
	
	Для Каждого НомерСтроки Из Элементы.СписокРегулярныеПлатежи.ВыделенныеСтроки Цикл
		ДокументИДата = Новый Структура("Документ, Дата");
		ДокументИДата.Документ = Элементы.СписокРегулярныеПлатежи.ДанныеСтроки(НомерСтроки).ИсходныйДокумент;
		ДокументИДата.Дата = Элементы.СписокРегулярныеПлатежи.ДанныеСтроки(НомерСтроки).ДатаСледующегоПлатежа;
		МассивИсходныхДокументов.Добавить(ДокументИДата);	
	КонецЦикла;
	
	Если МассивИсходныхДокументов.Количество() = 1 Тогда
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("СоздатьПлатежноеПоручениеРегулярныеПлатежиЗавершение", ЭтотОбъект);
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ЗначениеКопирования", МассивИсходныхДокументов[0].Документ);
		ПараметрыОткрытия.Вставить("РегулярныеПлатежиДатаЗаписи", МассивИсходныхДокументов[0].Дата);
		ПараметрыОткрытия.Вставить("РегулярныеПлатежиУдалитьЗаписьИзГрафика", Истина);
		ПараметрыОткрытия.Вставить("РегулярныеПлатежиИсходныйДокумент", МассивИсходныхДокументов[0].Документ);
		
		ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма, , , , ОповещениеОЗакрытии);
		
	Иначе
		
		МассивПлатежныхПоручений = СформироватьИЗаписатьПлатежныеПорученияРегулярныеПлатежи(МассивИсходныхДокументов);
		Текст = НСтр("ru='Создание:'");
		Для каждого СтрокаПлатежноеПоручение Из МассивПлатежныхПоручений Цикл
			
			ПоказатьОповещениеПользователя(Текст, ПолучитьНавигационнуюСсылку(СтрокаПлатежноеПоручение),
				СтрокаПлатежноеПоручение, БиблиотекаКартинок.Информация32);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьПлатежНаСервере(ИсходныйДокумент, ДатаСледующегоПлатежа)
	
	РегистрыСведений.РегулярныеПлатежиГрафик.УдалитьЗаписьИзГрафика(
		ИсходныйДокумент, ДатаСледующегоПлатежа);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПлатеж(Команда)
	
	Если Элементы.СписокРегулярныеПлатежи.ТекущиеДанные = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.СписокРегулярныеПлатежи.ТекущиеДанные;
	ОтменитьПлатежНаСервере(ТекущаяСтрока.ИсходныйДокумент, ТекущаяСтрока.ДатаСледующегоПлатежа);
	Элементы.СписокРегулярныеПлатежи.Обновить();
	ТекстОповещения = НСтр("ru = 'Вы отменили платеж'");
	ДатаПлатежа = Формат(ТекущаяСтрока.ДатаСледующегоПлатежа, "ДФ=dd.MM.yyyy");
	ПоказатьОповещениеПользователя(ТекстОповещения, , ДатаПлатежа);
	
КонецПроцедуры

&НаКлиенте
Процедура РегулярныеПлатежиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СоздатьПлатежноеПоручениеПоВыбраннымРегулярнымПлатежам(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьГрафик(Команда)
	
	Если Элементы.СписокРегулярныеПлатежи.ТекущиеДанные = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		ПоказатьПредупреждение(Неопределено,ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыРегулярныхПлатежей = Новый Структура;
	ПараметрыРегулярныхПлатежей.Вставить("ОтображатьОдинДокумент", Истина);
	ПараметрыРегулярныхПлатежей.Вставить("ИсходныйДокумент",
		Элементы.СписокРегулярныеПлатежи.ТекущиеДанные.ИсходныйДокумент);
	ОткрытьФорму("Обработка.АссистентУправления.Форма.ОповещениеПользователяОРегулярномПлатеже",
		ПараметрыРегулярныхПлатежей, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ЗамерыПроизводительности

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормы"
		+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормы"
		+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭлектронноеВзаимодействие.ОбменСБанками
&НаСервереБезКонтекста
Функция ПараметрыБанковскогоСчета(БанковскийСчет)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет, "Владелец, Банк");
	
КонецФункции

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьСинхронизациюДиректБанк(Команда)
	
	ОчиститьСообщения();
	Если ЗначениеЗаполнено(ОтборБанковскийСчет) Тогда
		ПараметрыБанковскогоСчета = ПараметрыБанковскогоСчета(ОтборБанковскийСчет);
		ОбменСБанкамиКлиент.СинхронизироватьСБанком(ПараметрыБанковскогоСчета.Владелец, ПараметрыБанковскогоСчета.Банк);
	Иначе
		ОбменСБанкамиКлиент.СинхронизироватьСБанком();
	КонецЕсли;
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработатьСобытиеДиректБанк(
	Параметр1 = Неопределено,
	Параметр2 = Неопределено,
	Параметр3 = Неопределено)
	
	ОбменСБанкамиКлиент.ОбработатьСобытиеНаФормеСписка(Параметр1, Параметр2, Параметр3)
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСБанками

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область Отборы

&НаСервере
Процедура УстановитьМеткуИОтборСписка(СписокДляОтбора, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение,
	ПредставлениеЗначения = "")
	
	Если ПредставлениеЗначения = "" Тогда
		ПредставлениеЗначения = Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	Если СписокДляОтбора = "СписокРегулярныеПлатежи" Тогда
		ИмяТЧДанныеМеток = "ДанныеМетокРегулярныеПлатежи";
		ИмяТЧДанныеОтборов = "ДанныеОтборовРегулярныеПлатежи";
		ТекущийСписок = СписокРегулярныеПлатежи;
	Иначе
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
		ТекущийСписок = Список;
	КонецЕсли;
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение,
		ПредставлениеЗначения, СписокДляОтбора, , ИмяТЧДанныеМеток);
		
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ТекущийСписок, ИмяПоляОтбораСписка, , , ИмяТЧДанныеМеток, ,
		ИмяТЧДанныеОтборов);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяГруппыРодителя = СокрЛП(Элемент.Родитель.Имя);
	Если СтрНачинаетсяС(ИмяГруппыРодителя, "МеткаРП_") Тогда
		ИмяРеквизитаСписка = "СписокРегулярныеПлатежи";
		ИмяТЧДанныеМеток = "ДанныеМетокРегулярныеПлатежи";
		ИмяТЧДанныеОтборов = "ДанныеОтборовРегулярныеПлатежи";
		НачалоИмениМетки = "МеткаРП_";
	Иначе
		ИмяРеквизитаСписка = "Список";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
		НачалоИмениМетки = "Метка_";
	КонецЕсли;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина(НачалоИмениМетки) + 1);
	
	УдалитьМеткуОтбора(МеткаИД, ИмяРеквизитаСписка, ИмяТЧДанныеМеток, ИмяТЧДанныеОтборов);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД, ИмяРеквизитаСписка, ИмяТЧДанныеМеток = "ДанныеМеток",
		ИмяТЧДанныеОтборов = "ДанныеОтборов")
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, ЭтотОбъект[ИмяРеквизитаСписка], МеткаИД, ИмяРеквизитаСписка,
		ИмяТЧДанныеМеток, , , , ИмяТЧДанныеОтборов);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "Список", "Дата");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ПоискМетки = ЭтаФорма.ТекущийЭлемент.Имя;
	Если СтрЗаканчиваетсяНа(ПоискМетки, "РегулярныеПлатежи") Тогда
		ИмяРеквизитаСписка = "СписокРегулярныеПлатежи";
		ИмяТЧДанныеМеток = "ДанныеМетокРегулярныеПлатежи";
		ИмяТЧДанныеОтборов = "ДанныеОтборовРегулярныеПлатежи";
		ИмяГруппыОтборов = "ГруппаОтборыРегулярныеПлатежи";
		ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчаниюРегулярныеПлатежи";
	Иначе
		ИмяРеквизитаСписка = "Список";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
		ИмяГруппыОтборов = "ГруппаОтборы";
		ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчанию";
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаСписка", ИмяРеквизитаСписка);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеМеток", ИмяТЧДанныеМеток);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеОтборов", ИмяТЧДанныеОтборов);
	ДополнительныеПараметры.Вставить("ИмяГруппыОтборов", ИмяГруппыОтборов);
	ДополнительныеПараметры.Вставить("ИмяПредопределенныеОтборыПоУмолчанию", ИмяПредопределенныеОтборыПоУмолчанию);
	
	РаботаСОтборамиКлиент.НастроитьОтборыНажатие(ЭтотОбъект,
		ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры), ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры)
	
	Возврат РаботаСОтборами.ПараметрыДляОткрытияФормыСНастройкамиОтборов(ЭтотОбъект, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура НастройкаОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтборовЗавершениеНаСервере(Результат.АдресВыбранныеОтборы, Результат.АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовЗавершениеНаСервере(АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ИмяРеквизитаСписка = "Список";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
	Иначе
		ИмяРеквизитаСписка = ДополнительныеПараметры.ИмяРеквизитаСписка;
		ИмяТЧДанныеМеток = ДополнительныеПараметры.ИмяТЧДанныеМеток;
		ИмяТЧДанныеОтборов = ДополнительныеПараметры.ИмяТЧДанныеОтборов;
	КонецЕсли;
	
	РаботаСОтборами.НастройкаОтборовЗавершение(ЭтотОбъект, АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборПриИзменении(Элемент)
	
	Подключаемый_ОтборПриИзмененииНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборПриИзмененииНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	ИмяРеквизитаСписка = Прав(ЭлементИмя, СтрДлина(ЭлементИмя)-СтрНайти(ЭлементИмя, "_", НаправлениеПоиска.СНачала));
	ИмяРеквизитаСписка = Лев(ИмяРеквизитаСписка, СтрНайти(ИмяРеквизитаСписка,"_", НаправлениеПоиска.СНачала)-1);
	
	Если ИмяРеквизитаСписка = "СписокРегулярныеПлатежи" Тогда
		ИмяТЧДанныеМеток = "ДанныеМетокРегулярныеПлатежи";
		ИмяТЧДанныеОтборов = "ДанныеОтборовРегулярныеПлатежи";
	Иначе
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
	КонецЕсли;
	
	РаботаСОтборами.Подключаемый_ОтборПриИзменении(ЭтотОбъект, ЭлементИмя, ЭлементРодительИмя);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборОчистка(Элемент)
	
	Подключаемый_ОтборОчисткаНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборОчисткаНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	ИмяРеквизитаСписка = Прав(ЭлементИмя, СтрДлина(ЭлементИмя)-СтрНайти(ЭлементИмя, "_", НаправлениеПоиска.СНачала));
	ИмяРеквизитаСписка = Лев(ИмяРеквизитаСписка, СтрНайти(ИмяРеквизитаСписка,"_", НаправлениеПоиска.СНачала)-1);
	
	Если ИмяРеквизитаСписка = "СписокРегулярныеПлатежи" Тогда
		ИмяТЧДанныеМеток = "ДанныеМетокРегулярныеПлатежи";
		ИмяТЧДанныеОтборов = "ДанныеОтборовРегулярныеПлатежи";
	Иначе
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
	КонецЕсли;
	
	РаботаСОтборами.Подключаемый_ОтборОчистка(ЭтотОбъект, ЭлементИмя, ИмяРеквизитаСписка, ИмяТЧДанныеМеток,
		ИмяТЧДанныеОтборов);

КонецПроцедуры

&НаКлиенте
Процедура СброситьВсеОтборы(Команда)
	
	ПоискМетки = ЭтаФорма.ТекущийЭлемент.Имя;
	Если СтрЗаканчиваетсяНа(ПоискМетки, "РегулярныеПлатежи") Тогда
		ИмяРеквизитаСписка = "СписокРегулярныеПлатежи";
		ИмяРеквизитаДата = "ДатаСледующегоПлатежа";
		ИмяТЧДанныеМеток = "ДанныеМетокРегулярныеПлатежи";
		ИмяТЧДанныеОтборов = "ДанныеОтборовРегулярныеПлатежи";
		СтруктураИменЭлементов = Новый Структура("ОтборПериод, ПредставлениеПериода",
			"ОтборПериодРегулярныеПлатежи", "ПредставлениеПериодаРегулярныеПлатежи");
	Иначе
		ИмяРеквизитаСписка = "Список";
		ИмяРеквизитаДата = "Дата";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
		СтруктураИменЭлементов = Новый Структура("ОтборПериод, ПредставлениеПериода",
			"ОтборПериод", "ПредставлениеПериода");
	КонецЕсли;
	
	РаботаСОтборамиКлиент.СброситьОтборПоПериоду(ЭтотОбъект, ИмяРеквизитаСписка, ИмяРеквизитаДата,
		СтруктураИменЭлементов);
	СброситьВсеМеткиОтбораНаСервере(ИмяРеквизитаСписка, ИмяТЧДанныеМеток, СтруктураИменЭлементов, ИмяТЧДанныеОтборов);

КонецПроцедуры

&НаСервере
Процедура СброситьВсеМеткиОтбораНаСервере(ИмяРеквизитаСписка, ИмяТЧДанныеМеток, СтруктураИменЭлементов,
		ИмяТЧДанныеОтборов)
	РаботаСОтборами.УдалитьМеткиОтбораСервер(ЭтотОбъект, ЭтаФорма[ИмяРеквизитаСписка], , ИмяРеквизитаСписка,
		ИмяТЧДанныеМеток, СтруктураИменЭлементов, ИмяТЧДанныеОтборов);
КонецПроцедуры

#Область СписокРегулярныеПлатежи

//@skip-check module-unused-method
&НаКлиенте
Процедура ПредставлениеПериодаРегулярныеПлатежиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураИменЭлементов = Новый Структура("ОтборПериод, ПредставлениеПериода",
		"ОтборПериодРегулярныеПлатежи", "ПредставлениеПериодаРегулярныеПлатежи");
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект,
		"СписокРегулярныеПлатежи", "ДатаСледующегоПлатежа", СтруктураИменЭлементов);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборовРегулярныеПлатежи()
	
	СтруктураИменЭлементов =
		Новый Структура("ФильтрыНастройкиИДопИнфо, ДекорацияРазвернутьОтборы, ПраваяПанель, ОтборПериод, ИмяПоляОтбора");
	
	СтруктураИменЭлементов.ФильтрыНастройкиИДопИнфо = "ФильтрыНастройкиИДопИнфоРегулярныеПлатежи";
	СтруктураИменЭлементов.ДекорацияРазвернутьОтборы = "ДекорацияРазвернутьОтборыРегулярныеПлатежи";
	СтруктураИменЭлементов.ПраваяПанель = "ПраваяПанельРегулярныеПлатежи";
	СтруктураИменЭлементов.ОтборПериод = "ОтборПериодРегулярныеПлатежи";
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект, "СписокРегулярныеПлатежи", СтруктураИменЭлементов, , ,
		"ДанныеМетокРегулярныеПлатежи", "ДанныеОтборовРегулярныеПлатежи", "ГруппаОтборыРегулярныеПлатежи");
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборовРегулярныеПлатежи(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфоРегулярныеПлатежи.Видимость;
	СтруктураИменЭлементов = Новый Структура("ФильтрыНастройкиИДопИнфо, ДекорацияРазвернутьОтборы, ПраваяПанель",
		"ФильтрыНастройкиИДопИнфоРегулярныеПлатежи", "ДекорацияРазвернутьОтборыРегулярныеПлатежи",
		"ПраваяПанельРегулярныеПлатежи");
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость, СтруктураИменЭлементов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ДИНАМИЧЕСКОГО СПИСКА

// Выбор значения отбора в поле отбора
&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	УстановитьМеткуИОтборСписка("Список", "Контрагент", Элемент.Родитель.Имя, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Список", "Организация", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВалютаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Список", "ВалютаДокумента", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборАвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Список", "Автор", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Список", "ВидОперации", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	УстановитьМеткуИОтборСписка("Список", "БанковскийСчет", Элемент.Родитель.Имя, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Список", "Состояние", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаНеоплаченныеСчета Тогда
		ЗакладкаОткрыта(Истина);
	Иначе
		ЗакладкаОткрыта(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовФормыРегулярныеПлатежи

&НаКлиенте
Процедура ОтборРегулярныеПлатежиКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	УстановитьМеткуИОтборСписка("СписокРегулярныеПлатежи", "Контрагент", Элемент.Родитель.Имя, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРегулярныеПлатежиОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокРегулярныеПлатежи", "Организация", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРегулярныеПлатежиВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокРегулярныеПлатежи", "ВидОперации", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбщегоНазначения

&НаСервере
Процедура ПрочитатьРасчетныеСчета()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(БанковскиеСчета.Ссылка) КАК Представление
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО БанковскиеСчета.Владелец = Организации.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаСчетов = РезультатЗапроса.Выбрать();
	
	Элементы.ОтборБанковскийСчет.СписокВыбора.Очистить();
	
	Если НЕ РезультатЗапроса.Пустой() И НЕ ВыборкаСчетов.Количество() = 1 Тогда
		Пока ВыборкаСчетов.Следующий() Цикл
			Элементы.ОтборБанковскийСчет.СписокВыбора.Добавить(ВыборкаСчетов.Ссылка);
		КонецЦикла;
	Иначе
		Элементы.ОтборБанковскийСчет.Видимость = Ложь;
		Элементы.ГруппаОтборСчетИКасса.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗакладкаОткрыта(ЗакладкаНеоплаченныеСчетаОткрыта)
	
	СчетаНаОплату.Параметры.УстановитьЗначениеПараметра("ЗакладкаНеоплаченныеСчетаОткрыта", ЗакладкаНеоплаченныеСчетаОткрыта);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКлючевыеРеквизитыСчетов(МассивСчетов)
	
	СтруктураДанных = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетНаОплатуПоставщика.Организация) КАК КоличествоОрганизация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетНаОплатуПоставщика.Контрагент) КАК КоличествоКонтрагент,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетНаОплатуПоставщика.ВалютаДокумента) КАК КоличествоВалютаДокумента
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
	|ГДЕ
	|	СчетНаОплатуПоставщика.Ссылка В(&МассивСчетов)
	|
	|ИМЕЮЩИЕ
	|	(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетНаОплатуПоставщика.Организация) > 1
	|	ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетНаОплатуПоставщика.Контрагент) > 1
	|	ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетНаОплатуПоставщика.ВалютаДокумента) > 1)";
	
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СтруктураДанных.Вставить("СформироватьНесколькоСчетов", Ложь);
		СтруктураДанных.Вставить("ПредставлениеДанных", "");
	Иначе
		СтруктураДанных.Вставить("СформироватьНесколькоСчетов", Истина);
		ПредставлениеДанных = "";
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.КоличествоОрганизация > 1 Тогда
				ПредставлениеДанных = ПредставлениеДанных + ?(ПустаяСтрока(ПредставлениеДанных), "Организация", ", Организация");
			КонецЕсли;
			
			Если Выборка.КоличествоКонтрагент > 1 Тогда
				ПредставлениеДанных = ПредставлениеДанных + ?(ПустаяСтрока(ПредставлениеДанных), "Контрагент", ", Контрагент");
			КонецЕсли;
			
			Если Выборка.КоличествоВалютаДокумента > 1 Тогда
				ПредставлениеДанных = ПредставлениеДанных + ?(ПустаяСтрока(ПредставлениеДанных), "Валюта", ", Валюта");
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураДанных.Вставить("ПредставлениеДанных", ПредставлениеДанных);
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура СоздатьПлатежноеПоручениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	МассивСчетов = ДополнительныеПараметры.МассивСчетов;
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		МассивПлатежныхПоручений = СформироватьИЗаписатьПлатежныеПоручения(МассивСчетов);
		Текст = НСтр("ru='Создание:'");
		Для каждого СтрокаПлатежноеПоручение Из МассивПлатежныхПоручений Цикл
			
			ПоказатьОповещениеПользователя(Текст, ПолучитьНавигационнуюСсылку(СтрокаПлатежноеПоручение), СтрокаПлатежноеПоручение, БиблиотекаКартинок.Информация32);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьИЗаписатьПлатежныеПоручения(МассивСчетов)
	
	МассивПлатежныхПоручений = Новый Массив();
	Для каждого СтрокаСчета Из МассивСчетов Цикл
		
		НовоеПлатежноеПоручение = Документы.ПлатежноеПоручение.СоздатьДокумент();
		
		НовоеПлатежноеПоручение.Дата = ТекущаяДатаСеанса();
		НовоеПлатежноеПоручение.Заполнить(СтрокаСчета);
		НовоеПлатежноеПоручение.Записать();
		МассивПлатежныхПоручений.Добавить(НовоеПлатежноеПоручение.Ссылка);
		
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
	Возврат МассивПлатежныхПоручений;
	
КонецФункции

&НаКлиенте
Процедура СоздатьПлатежноеПоручениеРегулярныеПлатежиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Элементы.СписокРегулярныеПлатежи.Обновить();
КонецПроцедуры

&НаСервере
Функция СформироватьИЗаписатьПлатежныеПорученияРегулярныеПлатежи(МассивИсходныхДокументов)
	
	МассивПлатежныхПоручений = Новый Массив();
	Для Каждого ДокументИДата Из МассивИсходныхДокументов Цикл
		
		НовоеПлатежноеПоручение = ДокументИДата.Документ.Скопировать();
		НовоеПлатежноеПоручение.Дата = ТекущаяДатаСеанса();
		НовоеПлатежноеПоручение.Записать();
		
		МассивПлатежныхПоручений.Добавить(НовоеПлатежноеПоручение.Ссылка);
		
		РегистрыСведений.РегулярныеПлатежиГрафик.УдалитьЗаписьИзГрафика(
			ДокументИДата.Документ, ДокументИДата.Дата);
			
	КонецЦикла;
	
	Элементы.СписокРегулярныеПлатежи.Обновить();
	
	Возврат МассивПлатежныхПоручений;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура УстановитьВидимостьРерулярныеПлатежи(Элемент)
	
	Элемент.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРегулярныеПлатежи");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	// Будущие платежи отображаются серым
	НовоеУсловноеОформление = СписокРегулярныеПлатежи.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение 		= ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Больше;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДатаСледующегоПлатежа");
	Отбор.ПравоеЗначение 	= ТекущаяДатаСеанса();
	
КонецПроцедуры

#КонецОбласти

