
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получаем актуальную подпись по ключу "Пользователь" "Учетная запись"
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты
//  ПодписьПисем - СправочникСсылка.ПодписиПисем
// 
// Возвращаемое значение:
//  Структура - Учетная запись и основные настройки.
Функция ПолучитьПодпись(УчетнаяЗапись, ПодписьПисем = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодписиПисем.Ссылка КАК Подпись,
	|	1 КАК Сортировка,
	|	ПодписиПисем.Содержание КАК Содержание,
	|	ПодписиПисем.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ПодписиПисем.ВладелецПодписи КАК ВладелецПодписи
	|ИЗ
	|	Справочник.ПодписиПисем КАК ПодписиПисем
	|ГДЕ
	|	ПодписиПисем.Ссылка = &ПодписьПисем
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОсновныеПодписиПисем.Подпись,
	|	2,
	|	ПодписиПисем.Содержание,
	|	ПодписиПисем.УчетнаяЗапись,
	|	ПодписиПисем.ВладелецПодписи
	|ИЗ
	|	РегистрСведений.ОсновныеПодписиПисем КАК ОсновныеПодписиПисем
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодписиПисем КАК ПодписиПисем
	|		ПО ОсновныеПодписиПисем.Подпись = ПодписиПисем.Ссылка
	|ГДЕ
	|	ОсновныеПодписиПисем.Пользователь = &Пользователь
	|	И ОсновныеПодписиПисем.УчетнаяЗапись = &УчетнаяЗапись
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОсновныеПодписиПисем.Подпись,
	|	3,
	|	ПодписиПисем.Содержание,
	|	ПодписиПисем.УчетнаяЗапись,
	|	ПодписиПисем.ВладелецПодписи
	|ИЗ
	|	РегистрСведений.ОсновныеПодписиПисем КАК ОсновныеПодписиПисем
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодписиПисем КАК ПодписиПисем
	|		ПО ОсновныеПодписиПисем.Подпись = ПодписиПисем.Ссылка
	|ГДЕ
	|	ОсновныеПодписиПисем.Пользователь = &Пользователь
	|	И ОсновныеПодписиПисем.УчетнаяЗапись = ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сортировка";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ПодписьПисем", ПодписьПисем);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	
	Результат.Вставить("Подпись" , Выборка.Подпись);
	Результат.Вставить("Содержание" , Выборка.Содержание);
	Результат.Вставить("УчетнаяЗапись" , Выборка.УчетнаяЗапись);
	Результат.Вставить("ВладелецПодписи" , Выборка.ВладелецПодписи);
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные либо подписи для учетной записи, либо, если таковой нет, то основной подписи
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты
//  ПредназначениеПодписи - ПеречислениеСсылка.ПредназначенияПодписейПисем
//  Пользователь - Неопределено, СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//   - Структура:
//      * Ссылка - СправочникСсылка.ПодписиПисем
//      * Содержание - Строка - содержание подписи
//   - Неопределено - подпись не найдена
//
Функция ДанныеОсновнойПодписи(УчетнаяЗапись, ПредназначениеПодписи, Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновныеПодписиПисем.Подпись КАК Подпись,
	|	1 КАК Сортировка,
	|	ПодписиПисем.Содержание КАК Содержание
	|ИЗ
	|	РегистрСведений.ОсновныеПодписиПисем КАК ОсновныеПодписиПисем
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодписиПисем КАК ПодписиПисем
	|		ПО ОсновныеПодписиПисем.Подпись = ПодписиПисем.Ссылка
	|ГДЕ
	|	ОсновныеПодписиПисем.Пользователь = &Пользователь
	|	И ОсновныеПодписиПисем.УчетнаяЗапись = &УчетнаяЗапись
	|	И ОсновныеПодписиПисем.ПредназначениеПодписи = &ПредназначениеПодписи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОсновныеПодписиПисем.Подпись,
	|	2,
	|	ПодписиПисем.Содержание
	|ИЗ
	|	РегистрСведений.ОсновныеПодписиПисем КАК ОсновныеПодписиПисем
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодписиПисем КАК ПодписиПисем
	|		ПО ОсновныеПодписиПисем.Подпись = ПодписиПисем.Ссылка
	|ГДЕ
	|	ОсновныеПодписиПисем.Пользователь = &Пользователь
	|	И ОсновныеПодписиПисем.УчетнаяЗапись = ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка)
	|	И ОсновныеПодписиПисем.ПредназначениеПодписи = &ПредназначениеПодписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сортировка";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ПредназначениеПодписи", ПредназначениеПодписи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	
	Результат.Вставить("Ссылка" , Выборка.Подпись);
	Результат.Вставить("Содержание" , Выборка.Содержание);
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные подписи для учетной записи
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты
//  ПредназначениеПодписи - ПеречислениеСсылка.ПредназначенияПодписейПисем
//  Пользователь - Неопределено, СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//   - Структура:
//      * Ссылка - СправочникСсылка.ПодписиПисем
//      * Наименование - Строка - наименование подписи
//      * Содержание - Строка - содержание подписи
//   - Неопределено - подпись не найдена
//
Функция ДанныеОсновнойПодписиПоУчетнойЗаписи(
	УчетнаяЗапись, ПредназначениеПодписи, Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеПодписиПисем.Подпись КАК Ссылка,
		|	ОсновныеПодписиПисем.Подпись.Наименование КАК Наименование,
		|	ОсновныеПодписиПисем.Подпись.Содержание КАК Содержание
		|ИЗ
		|	РегистрСведений.ОсновныеПодписиПисем КАК ОсновныеПодписиПисем
		|ГДЕ
		|	ОсновныеПодписиПисем.Пользователь = &Пользователь
		|	И ОсновныеПодписиПисем.УчетнаяЗапись = &УчетнаяЗапись
		|	И ОсновныеПодписиПисем.ПредназначениеПодписи = &ПредназначениеПодписи";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ПредназначениеПодписи", ПредназначениеПодписи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Результат.Вставить("Ссылка", Выборка.Ссылка);
	Результат.Вставить("Наименование", Выборка.Наименование);
	Результат.Вставить("Содержание", Выборка.Содержание);
	
	Возврат Результат;
	
КонецФункции

// Возвращает содержание либо подписи для учетной записи, либо, если таковой нет, то основной подписи
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты
//  ПредназначениеПодписи - ПеречислениеСсылка.ПредназначенияПодписейПисем
//  Пользователь - Неопределено, СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//   - Содержание - Строка - содержание подписи
//   - Неопределено - подпись не найдена
//
Функция СодержаниеОсновнойПодписи(УчетнаяЗапись, ПредназначениеПодписи, Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Сортировка,
	|	ПодписиПисем.Содержание КАК Содержание
	|ИЗ
	|	РегистрСведений.ОсновныеПодписиПисем КАК ОсновныеПодписиПисем
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодписиПисем КАК ПодписиПисем
	|		ПО ОсновныеПодписиПисем.Подпись = ПодписиПисем.Ссылка
	|ГДЕ
	|	ОсновныеПодписиПисем.Пользователь = &Пользователь
	|	И ОсновныеПодписиПисем.УчетнаяЗапись = &УчетнаяЗапись
	|	И ОсновныеПодписиПисем.ПредназначениеПодписи = &ПредназначениеПодписи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ПодписиПисем.Содержание
	|ИЗ
	|	РегистрСведений.ОсновныеПодписиПисем КАК ОсновныеПодписиПисем
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодписиПисем КАК ПодписиПисем
	|		ПО ОсновныеПодписиПисем.Подпись = ПодписиПисем.Ссылка
	|ГДЕ
	|	ОсновныеПодписиПисем.Пользователь = &Пользователь
	|	И ОсновныеПодписиПисем.УчетнаяЗапись = ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка)
	|	И ОсновныеПодписиПисем.ПредназначениеПодписи = &ПредназначениеПодписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сортировка";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ПредназначениеПодписи", ПредназначениеПодписи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Содержание;
	
КонецФункции

// Возвращает содержание подписи для учетной записи
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты
//  ПредназначениеПодписи - ПеречислениеСсылка.ПредназначенияПодписейПисем
//  Пользователь - Неопределено, СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//   - Содержание - Строка - содержание подписи
//   - Неопределено - подпись не найдена
//
Функция СодержаниеОсновнойПодписиПоУчетнойЗаписи(
	УчетнаяЗапись, ПредназначениеПодписи, Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеПодписиПисем.Подпись КАК Ссылка,
	|	ОсновныеПодписиПисем.Подпись.Содержание КАК Содержание
	|ИЗ
	|	РегистрСведений.ОсновныеПодписиПисем КАК ОсновныеПодписиПисем
	|ГДЕ
	|	ОсновныеПодписиПисем.Пользователь = &Пользователь
	|	И ОсновныеПодписиПисем.УчетнаяЗапись = &УчетнаяЗапись
	|	И ОсновныеПодписиПисем.ПредназначениеПодписи = &ПредназначениеПодписи";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ПредназначениеПодписи", ПредназначениеПодписи);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Содержание;
	
КонецФункции

// Устанавливает подпись основной для пустой учетной записи (для пустой ссылки)
//
// Параметры:
//  Подпись - СправочникСсылка.ПодписиПисем - подпись
//
Процедура УстановитьПодписьОсновнойДляВсехУчетныхЗаписей(Подпись) Экспорт
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	УстановитьПодписьОсновной(Подпись, УчетнаяЗапись, Перечисления.ПредназначенияПодписейПисем.ДляНового);
	УстановитьПодписьОсновной(Подпись, УчетнаяЗапись, Перечисления.ПредназначенияПодписейПисем.ПриОтвете);
	
КонецПроцедуры

// Возвращает флаг, что для выбранного пользователя есть только 1 переданная подпись
//
// Параметры:
//  Подпись - СправочникСсылка.ПодписиПисем - подпись
//  Пользователь - Неопределено, СправочникСсылка.Пользователи - пользователь ИБ
// 
// Возвращаемое значение:
//  Булево - существует только 1 переданная подпись
//
Функция ЕстьТолькоЭтаПодпись(Подпись, Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПодписиПисем.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодписиПисем КАК ПодписиПисем
		|ГДЕ
		|	ПодписиПисем.Ссылка <> &Ссылка
		|	И ПодписиПисем.ВладелецПодписи = &Пользователь";
	Запрос.УстановитьПараметр("Ссылка", Подпись);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

// Проверяет, что переданная подпись является основной (что в регистре есть запись с ней)
//
// Параметры:
//  Подпись - СправочникСсылка.ПодписиПисем - подпись на проверку
//  Пользователь - Неопределено, СправочникСсылка.Пользователи - если Неопределено, отбор не осуществляется
// 
// Возвращаемое значение:
//  Булево - подпись является основной (в регистре есть запись с данной подписью)
//
Функция ЭтоОсновнаяПодпись(Подпись, Пользователь = Неопределено) Экспорт
	
	Возврат РегистрыСведений.ОсновныеПодписиПисем.ЭтоОсновнаяПодпись(Подпись, Пользователь);
	
КонецФункции

// Если подпись использовалась в качестве основной, то информация об этом удаляется
//
// Параметры:
//  Подпись - СправочникСсылка.ПодписиПисем
//  Пользователь - Неопределено, СправочникСсылка.Пользователи - если Неопределено, отбор не устанавливается
//
Процедура ОтменитьИспользованиеПодписиКакОсновной(Подпись, Пользователь = Неопределено) Экспорт
	
	РегистрыСведений.ОсновныеПодписиПисем.УдалитьЗаписиСПодписью(Подпись, Пользователь);
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// В связи с измененной структурой данных, был создан текущий справочник взамен прошлого УдалитьПодписиПисем
// Версия 3.0.7
//
// Параметры:
//  Параметры - Структура - См. ОбновлениеИнформационнойБазыУНФ.ПриДобавленииОбработчиковОбновления
//
Процедура ПереместитьОбъектыВНовыйТекущийСправочник(Параметры) Экспорт
	
	Если Метаданные.Справочники.Найти("УдалитьПодписиПисем") = Неопределено Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		ТекстСообщения = НСтр(
		"ru='Процедура ПереместитьОбъектыВНовыйТекущийСправочник завершила обработку. Не найден изначальный справочник.'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(
		ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ПодписиПисем, ,
		ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	НЕ ОсновныеПодписиПисем.УдалитьПодпись ЕСТЬ NULL КАК ЭтоОсновная,
		|	СправочникПодписиПисем.Ссылка КАК Ссылка,
		|	СправочникПодписиПисем.Представление КАК Представление
		|ИЗ
		|	Справочник.УдалитьПодписиПисем КАК СправочникПодписиПисем
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеПодписиПисем КАК ОсновныеПодписиПисем
		|		ПО СправочникПодписиПисем.Ссылка = ОсновныеПодписиПисем.УдалитьПодпись
		|			И СправочникПодписиПисем.ВладелецПодписи = ОсновныеПодписиПисем.Пользователь
		|ГДЕ
		|	СправочникПодписиПисем.СсылкаНаНовуюПодписьДляНовых = ЗНАЧЕНИЕ(Справочник.ПодписиПисем.ПустаяСсылка)
		|	И СправочникПодписиПисем.СсылкаНаНовуюПодписьПриОтвете = ЗНАЧЕНИЕ(Справочник.ПодписиПисем.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		ТекстСообщения = НСтр(
		"ru='Процедура ПереместитьОбъектыВНовыйТекущийСправочник завершила обработку. Запрос вернул пустую порцию объектов.'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(
		ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Справочники.ПодписиПисем, ,
		ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ПустаяФС = Новый ФорматированнаяСтрока("");
	ФСПоУмолчанию = Новый ФорматированнаяСтрока(Символы.ПС + Символы.ПС + "---------------------------------");
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбработкаОбъектаДляПеремещенияВНовыйСправочник(
		Выборка,
		ОбъектовОбработано,
		ПроблемныхОбъектов,
		ПустаяФС,
		ФСПоУмолчанию);
		
	КонецЦикла;
	
	Если ОбъектовОбработано Тогда
		
		ТекстСообщения = НСтр(
		"ru='Процедура ПереместитьОбъектыВНовыйТекущийСправочник обработала очередную порцию объектов: %1'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстСообщения = СтрШаблон(ТекстСообщения, ОбъектовОбработано);
		
		ЗаписьЖурналаРегистрации(
		ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Справочники.ПодписиПисем, ,
		ТекстСообщения);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Процедуре ПереместитьОбъектыВНовыйТекущийСправочник не удалось обработать некоторые объекты (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	НуженОтборПоПользователю = Неопределено;
	Параметры.Свойство("НуженОтборПоПользователю", НуженОтборПоПользователю);
	Если НуженОтборПоПользователю = Неопределено Тогда
		НуженОтборПоПользователю = Истина;
	КонецЕсли;
	
	ВладелецПодписи = Неопределено;
	Параметры.Свойство("ВладелецПодписи", ВладелецПодписи);
	Если ВладелецПодписи = Неопределено Тогда
		ВладелецПодписи = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 10
		|	ПодписиПисем.Ссылка КАК Ссылка,
		|	ПодписиПисем.Представление КАК Представление
		|ИЗ
		|	Справочник.ПодписиПисем КАК ПодписиПисем
		|ГДЕ
		|	(НЕ &НуженОтборПоПользователю
		|			ИЛИ ПодписиПисем.ВладелецПодписи = &ВладелецПодписи)
		|	И ПодписиПисем.Наименование ПОДОБНО &СтрокаПоиска
		|	И НЕ ПодписиПисем.ПометкаУдаления
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ВладелецПодписи", ВладелецПодписи);
	Запрос.УстановитьПараметр("НуженОтборПоПользователю", НуженОтборПоПользователю);
	
	Если ПустаяСтрока(Параметры.СтрокаПоиска) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПодписиПисем.Наименование ПОДОБНО &СтрокаПоиска", "");
	Иначе
		СтрокаПоиска = СтрШаблон("%%%1%%", ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Параметры.СтрокаПоиска));
		Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
	КонецЕсли;
	
	Количество = Неопределено;
	Если Параметры.Свойство("Количество", Количество) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 10", СтрШаблон("ПЕРВЫЕ %1", Количество));
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Представление);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обновление

Процедура ОбработкаОбъектаДляПеремещенияВНовыйСправочник(
	Выборка,
	ОбъектовОбработано,
	ПроблемныхОбъектов,
	ПустаяФС,
	ФСПоУмолчанию)
	
	НачатьТранзакцию();
	
	Попытка
		
		СтараяПодписьОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если СтараяПодписьОбъект = Неопределено Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		СтараяПодписьОбъект.Заблокировать();
		
		ФДДляНовых = СтараяПодписьОбъект.ПодписьДляНовыхФорматированныйДокумент.Получить();
		ФДПриОтвете = СтараяПодписьОбъект.ПодписьПриОтветеФорматированныйДокумент.Получить();
		
		ЕстьПодписьПриОтвете = ЕстьПодписьПриОтветеУСтаройПодписи(
		ФДДляНовых, ФДПриОтвете, ПустаяФС, ФСПоУмолчанию);
		
		СтароеНаименование = СтараяПодписьОбъект.Наименование;
		Если ЕстьПодписьПриОтвете Тогда
			НаименованиеДляНовых = СтрШаблон("%1 (%2)", СтароеНаименование, НСтр("ru = 'для новых'"));
		Иначе
			НаименованиеДляНовых = СтароеНаименование;
		КонецЕсли;
		
		Если ТипЗнч(ФДДляНовых) = Тип("ФорматированныйДокумент") Тогда
			СодержаниеПодписиДляНовых = Гипертекст.HTMLИзФорматированногоДокумента(ФДДляНовых);
		Иначе
			СодержаниеПодписиДляНовых = "<html><body></body></html>";
		КонецЕсли;
		
		НоваяПодписьДляНовыхОбъект = НоваяПодписьОбъект(
		СтараяПодписьОбъект, СодержаниеПодписиДляНовых, НаименованиеДляНовых);
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоваяПодписьДляНовыхОбъект);
		СтараяПодписьОбъект.СсылкаНаНовуюПодписьДляНовых = НоваяПодписьДляНовыхОбъект.Ссылка;
		
		Если ЕстьПодписьПриОтвете Тогда
			
			НаименованиеПриОтвете = СтрШаблон("%1 (%2)", СтароеНаименование, НСтр("ru = 'при ответе'"));
			СодержаниеПриОтвете = Гипертекст.HTMLИзФорматированногоДокумента(ФДПриОтвете);
			НоваяПодписьПриОтветеОбъект = НоваяПодписьОбъект(
			СтараяПодписьОбъект, СодержаниеПриОтвете, НаименованиеПриОтвете);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоваяПодписьПриОтветеОбъект);
			СтараяПодписьОбъект.СсылкаНаНовуюПодписьПриОтвете = НоваяПодписьПриОтветеОбъект.Ссылка;
			
		Иначе
			НоваяПодписьПриОтветеОбъект = Неопределено;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтараяПодписьОбъект);
		
		Если Выборка.ЭтоОсновная Тогда
			
			ОбработкаЗаписиОсновныхПодписейПриОбновлении(
			СтараяПодписьОбъект, ЕстьПодписьПриОтвете, НоваяПодписьДляНовыхОбъект, НоваяПодписьПриОтветеОбъект);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		ОбъектовОбработано = ОбъектовОбработано + 1;
		
	Исключение
		
		ОтменитьТранзакцию();
		ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru='Не удалось обработать объект ""%1"" по причине:
		|%2'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, ТекстОшибки);
		
		ЗаписьЖурналаРегистрации(
		ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ПодписиПисем,
		Выборка.Ссылка,
		ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ЕстьПодписьПриОтветеУСтаройПодписи(ФДДляНовых, ФДПриОтвете, ПустаяФС, ФСПоУмолчанию)
	
	Если ТипЗнч(ФДПриОтвете) <> Тип("ФорматированныйДокумент") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ФДДляНовых) <> Тип("ФорматированныйДокумент") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ФСПриОтвете = ФДПриОтвете.ПолучитьФорматированнуюСтроку();
	Если ФСПриОтвете = ПустаяФС Или ФСПриОтвете = ФСПоУмолчанию Тогда
		Возврат Ложь;
	КонецЕсли;
	
	HTMLДляНовых = Неопределено;
	КартинкиHTMLДляНовых = Неопределено;
	ФДДляНовых.ПолучитьHTML(HTMLДляНовых, КартинкиHTMLДляНовых);
	
	HTMLПриОтвете = Неопределено;
	КартинкиHTMLПриОтвете = Неопределено;
	ФДПриОтвете.ПолучитьHTML(HTMLПриОтвете, КартинкиHTMLПриОтвете);
	
	Если HTMLДляНовых <> HTMLПриОтвете Тогда
		Возврат Истина;
	КонецЕсли;
	
	КоличествоКартинокДляНовых = КартинкиHTMLДляНовых.Количество();
	КоличествоКартинокПриОтвете = КартинкиHTMLПриОтвете.Количество();
	
	Если КоличествоКартинокДляНовых <> КоличествоКартинокПриОтвете Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если КоличествоКартинокДляНовых = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из КартинкиHTMLДляНовых Цикл
		Если КартинкиHTMLПриОтвете[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция НоваяПодписьОбъект(СтарыйОбъект, СодержаниеПодписи, Наименование)
	
	НоваяПодписьОбъект = Справочники.ПодписиПисем.СоздатьЭлемент();
	НоваяПодписьОбъект.ПометкаУдаления = СтарыйОбъект.ПометкаУдаления;
	НоваяПодписьОбъект.Наименование = Наименование;
	НоваяПодписьОбъект.ВладелецПодписи = СтарыйОбъект.ВладелецПодписи;
	НоваяПодписьОбъект.Содержание = СодержаниеПодписи;
	
	Возврат НоваяПодписьОбъект;
	
КонецФункции

Процедура ОбработкаЗаписиОсновныхПодписейПриОбновлении(
	СтараяПодписьОбъект, ЕстьПодписьПриОтвете, НоваяПодписьДляНовыхОбъект, НоваяПодписьПриОтветеОбъект)
	
	НаборЗаписей = РегистрыСведений.ОсновныеПодписиПисем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(СтараяПодписьОбъект.ВладелецПодписи);
	НаборЗаписей.Отбор.УчетнаяЗапись.Установить(СтараяПодписьОбъект.УчетнаяЗапись);
	НаборЗаписей.Прочитать();
	
	ПодписьДляНовогоНужноДобавитьВРегистр =
	СтараяПодписьОбъект.ВключатьПодписьДляНовыхСообщений
	Или (Не СтараяПодписьОбъект.ВключатьПодписьДляНовыхСообщений
	И Не СтараяПодписьОбъект.ВключатьПодписьПриОтветеИлиПересылке);
	
	Если ПодписьДляНовогоНужноДобавитьВРегистр Тогда
		
		Если НаборЗаписей.Количество() Тогда
			
			Запись = НаборЗаписей[0];
			Запись.Подпись = НоваяПодписьДляНовыхОбъект.Ссылка;
			Запись.ПредназначениеПодписи = Перечисления.ПредназначенияПодписейПисем.ДляНового;
			
		Иначе
			
			ДобавитьЗаписьОсновнойПодписи(
			НаборЗаписей,
			СтараяПодписьОбъект,
			Перечисления.ПредназначенияПодписейПисем.ДляНового,
			НоваяПодписьДляНовыхОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтараяПодписьОбъект.ВключатьПодписьПриОтветеИлиПересылке Тогда
		
		Если ЕстьПодписьПриОтвете Тогда
			ПодписьДляПодстановкиВРегистр = НоваяПодписьПриОтветеОбъект;
		Иначе
			ПодписьДляПодстановкиВРегистр = НоваяПодписьДляНовыхОбъект;
		КонецЕсли;
		
		Если ПодписьДляНовогоНужноДобавитьВРегистр Или Не НаборЗаписей.Количество() Тогда
			
			ДобавитьЗаписьОсновнойПодписи(
			НаборЗаписей,
			СтараяПодписьОбъект,
			Перечисления.ПредназначенияПодписейПисем.ПриОтвете,
			ПодписьДляПодстановкиВРегистр);
			
		Иначе
			
			Запись = НаборЗаписей[0];
			Запись.Подпись = ПодписьДляПодстановкиВРегистр.Ссылка;
			Запись.ПредназначениеПодписи = Перечисления.ПредназначенияПодписейПисем.ПриОтвете;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	
КонецПроцедуры

Процедура ДобавитьЗаписьОсновнойПодписи(НаборЗаписей, СтарыйОбъект, ПредназначениеПодписи, НовыйОбъект)
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Пользователь = СтарыйОбъект.ВладелецПодписи;
	НоваяЗапись.УчетнаяЗапись = СтарыйОбъект.УчетнаяЗапись;
	НоваяЗапись.ПредназначениеПодписи = ПредназначениеПодписи;
	НоваяЗапись.Подпись = НовыйОбъект.Ссылка;
	
КонецПроцедуры

#КонецОбласти

Процедура УстановитьПодписьОсновной(Ссылка, УчетнаяЗапись, ПредназначениеПодписи)
	
	РегистрыСведений.ОсновныеПодписиПисем.УстановитьПодписьОсновной(
	УчетнаяЗапись, ПредназначениеПодписи, Ссылка);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
