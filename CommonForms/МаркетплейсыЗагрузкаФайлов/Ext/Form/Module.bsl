 

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Маркетплейс") Тогда
		Маркетплейс = Параметры.Маркетплейс;
	КонецЕсли;
		
	УстановитьУсловноеОформление();
	УправлениеФормой(ЭтотОбъект);
				
КонецПроцедуры 

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Видимость колонок для отображения заголовков
		
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыOzonЗагружать");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыOzonОписание1");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыOzonОписание2");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыOzonДокумент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыOzonДокументПредставление2");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ЗагружаемыеФайлыOzon.ТекстЗаголовка", 
		ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗагружаемыеФайлыOzonТекстЗаголовка");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ЗагружаемыеФайлыOzon.ТекстЗаголовка", 
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			
КонецПроцедуры

#КонецОбласти


#Область ПомещениеФайловНаСервер  

 &НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Не ВыполняетсяЗагрузка Тогда
		ВыполнитьЗагрузкуФайловИнтерактивно();
	КонецЕсли;
	
КонецПроцедуры    

&НаКлиенте
Процедура ВыполнитьЗагрузкуФайловИнтерактивно()
	
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов(НСтр("ru = 'Выберите файлы для загрузки'"), 
		Истина, "(*.xlsx;*.xls;*.mxl;*.zip)|*.xlsx;*.xls;*.mxl;*.zip"); 
		
	ВыполнитьЗагрузкуФайлов(ПараметрыДиалога);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗагрузкуФайлов(СсылкиНаФайлыИлиПараметрыДиалога)
	
	НачатьПомещениеФайловНаСервер(
		Новый ОписаниеОповещения("ПриЗавершенииПомещенияФайлов", ЭтотОбъект),
		Новый ОписаниеОповещения("ПриВыполненииПомещенияФайлов", ЭтотОбъект),
		Новый ОписаниеОповещения("ПередНачаломПомещенияФайлов", ЭтотОбъект),
		СсылкиНаФайлыИлиПараметрыДиалога,
		УникальныйИдентификатор);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередНачаломПомещенияФайлов(ПомещаемыеФайлы, ОтказОтПомещенияВсехФайлов, Контекст) Экспорт
	
	Если ПомещаемыеФайлы.Количество() = 0 Тогда
		ОтказОтПомещенияВсехФайлов = Истина;
	Иначе
		ВыполняетсяЗагрузка = Истина;
		ТекстСообщенияЗагрузки = НСтр("ru = 'Загрузка файлов ...'");
		ПерерисоватьФайлыПоСостоянию();
	КонецЕсли;
		
КонецПроцедуры  

&НаКлиенте
Процедура ПриВыполненииПомещенияФайлов(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ПомещеноВсего, ОтказОтПомещенияВсехФайлов, Контекст) Экспорт
	
	Если Не ЭтотОбъект.Открыта() Тогда
		ОтказОтПомещенияВсехФайлов = Истина;
	КонецЕсли;
	
	СтрокиФайлов = Файлы.НайтиСтроки(Новый Структура("Наименование, Разобран", ПомещаемыйФайл.Имя, Истина));
	Если СтрокиФайлов.Количество() > 0 Тогда
		ОтказОтПомещенияФайла = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииПомещенияФайлов(ПомещенныеФайлы, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(ПомещенныеФайлы) Тогда
		ОбновитьСостояниеФайлов(ПомещенныеФайлы);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("РазобратьФайлы", 0.2, Истина);
    
КонецПроцедуры  


&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ВыполняетсяЗагрузка Тогда 
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	Иначе 
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если Не ВыполняетсяЗагрузка Тогда
		ДобавитьФайлВСписок(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлВСписок(СсылкиНаФайлы)
	
	Если ТипЗнч(СсылкиНаФайлы) = Тип("СсылкаНаФайл") Тогда
		СсылкиНаФайлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкиНаФайлы);
	КонецЕсли;
	
	Для Каждого СсылкаНаФайл Из СсылкиНаФайлы Цикл
		ДобавитьФайл(СсылкаНаФайл.Имя, СсылкаНаФайл.ИдентификаторФайла, СсылкаНаФайл.Расширение);
	КонецЦикла;
	
	ВыполнитьЗагрузкуФайлов(СсылкиНаФайлы);
	
КонецПроцедуры  

&НаКлиенте
Функция ДобавитьФайл(Имя, ИдентификаторФайла, Расширение)
	
	НовыйФайл = Файлы.Добавить();
	НовыйФайл.Наименование 			= Имя;
	НовыйФайл.ИдентификаторФайла 	= ИдентификаторФайла;
	НовыйФайл.Расширение 			= Расширение;
	
	Возврат НовыйФайл;
	
КонецФункции 

&НаКлиенте
Процедура ПредложениеПеретащитьИзображениеНажатие(Элемент)
	
	ВыполнитьЗагрузкуФайловИнтерактивно();
	
КонецПроцедуры

 &НаКлиенте
Процедура ПредложениеПеретащитьИзображениеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложениеПеретащитьИзображениеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьФайлВСписок(ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура РазобратьФайлы()
	
	ФоновоеЗадание = ЗапуститьФоновыйРазборФайлов();
		
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания			= Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения 	= Истина; 
	
	Обработчик = Новый ОписаниеОповещения("ПослеРазбораФайлов", ЭтотОбъект, Неопределено);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, ПараметрыОжидания);  
	
КонецПроцедуры  

&НаСервере
Функция ЗапуститьФоновыйРазборФайлов()
	
	ОтправляемыеФайлы = Новый Массив;
	Для Каждого Файл Из Файлы Цикл 
		
		Если Файл.Разобран Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("ИмяФайла", Файл.Наименование);
		
		ВременныйФайл = ПолучитьИмяВременногоФайла(Файл.Расширение);
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(Файл.Адрес);
		ДвоичныеДанные.Записать(ВременныйФайл);    
		
		ОписаниеФайла.Вставить("РасширениеФайла", Файл.Расширение);
		ОписаниеФайла.Вставить("ПолноеИмяФайла"	, Файл.Наименование);
		ОписаниеФайла.Вставить("ВременныйФайл"	, ВременныйФайл);
		
		ОтправляемыеФайлы.Добавить(ОписаниеФайла);
	КонецЦикла;
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Разбор файлов, полученных из маркетплейса'"); 
	
	Если ЗначениеЗаполнено(АдресХранилища) Тогда
		ДанныеРазобранныхФайлов = ПолучитьИзВременногоХранилища(АдресХранилища);
		АдресВременногоХранилища =  ПоместитьВоВременноеХранилище(ДанныеРазобранныхФайлов, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);

	ФоновоеЗадание = ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения,
		"ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьДанныеВСтруктуру",
		ОтправляемыеФайлы, АдресХранилища);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ПослеРазбораФайлов(Задание, Контекст) Экспорт
	
	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполняетсяЗагрузка = Ложь;
	ПодключитьОбработчикОжидания("ПерерисоватьФайлыПоСостоянию", 0.2, Истина);
	
	Если Задание.Статус = "Выполнено" Тогда  
		
		ПослеРазбораФайловНаСервере();
		ОтобразитьРезультатЧтенияФайлов();
		
		ПодключитьОбработчикОжидания("ПроверитьНаличиеФайловДляЗагрузки", 0.2, Истина);
		
	Иначе
		ПоказатьПредупреждение(, Задание.КраткоеПредставлениеОшибки);
		АдресХранилища = АдресВременногоХранилища;
	КонецЕсли;
	
КонецПроцедуры  

&НаСервере
Процедура ОтобразитьРезультатЧтенияФайлов() 
	
	Если НЕ ЗначениеЗаполнено(АдресХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагружаемыеФайлыOzon.Очистить();
		
	ДанныеФайлов = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(ДанныеФайлов) = Тип("Массив") Тогда 
		
		ДанныеКонтрагента = ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьРеквизитыOzon();
		
		НайденныйКонтрагентOzon = ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.НайтиКонтрагентаПоИНН_КПП(
			ДанныеКонтрагента.ИНН, ДанныеКонтрагента.КПП);
					
		МассивПериодовOzon = Новый Массив;
		Для Каждого Файл Из ДанныеФайлов Цикл
			
			Если Файл.Свойство("ТекстОшибки") Тогда
				Продолжить;
			КонецЕсли;  
			
			Если Файл.Маркетплейс = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда  
				
				Если МассивПериодовOzon.Найти(НачалоМесяца(Файл.Дата)) = Неопределено Тогда 
					
					НоваяСтрока = ЗагружаемыеФайлыOzon.Добавить(); 
					
					НоваяСтрока.УИД 			= Файл.УИД;
					НоваяСтрока.Дата 			= НачалоМесяца(Файл.Дата);
					НоваяСтрока.ТекстЗаголовка 	= СтрШаблон(НСтр("ru='Период с %1 по %2'"), 
						Формат(НачалоМесяца(Файл.Дата), "ДЛФ=dd.MM.yyyy"), Формат(КонецМесяца(Файл.Дата), "ДЛФ=dd.MM.yyyy"));
					
					НоваяСтрока.КлючСтроки 		= -1;   
					
					МассивПериодовOzon.Добавить(НачалоМесяца(Файл.Дата));
				КонецЕсли; 
								
			Иначе
				//	
				Продолжить;
			КонецЕсли;    
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Файл);
			
			НоваяСтрока.КлючСтроки = ДанныеФайлов.Найти(Файл);
			НоваяСтрока.Контрагент = НайденныйКонтрагентOzon; 
						
			Если ЗначениеЗаполнено(НоваяСтрока.Описание) Тогда
				МассивПодстрок = СтрРазделить(НоваяСтрока.Описание, Символы.ПС, Ложь);
				Если МассивПодстрок.Количество() > 0 Тогда
					НоваяСтрока.Описание1 = МассивПодстрок[0];
				Иначе
					НоваяСтрока.Описание1 = НоваяСтрока.Описание;
				КонецЕсли;       
				
				Если МассивПодстрок.Количество() > 1 Тогда
					НоваяСтрока.Описание2 = МассивПодстрок[1];
				КонецЕсли;				
			КонецЕсли;
			
		КонецЦикла;			
	КонецЕсли;
	
	ЗагружаемыеФайлыOzon.Сортировать("Дата, ВидДокумента");
		
	Элементы.ФормаЗагрузить.Доступность = Истина;
	
	Элементы.ГруппаOZON.Заголовок = СтрШаблон(НСтр("ru='OZON (%1)'"), 
		Формат(ЗагружаемыеФайлыOzon.Количество() - МассивПериодовOzon.Количество(), "ЧН=0"));
		
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры  

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Форма.Заголовок = НСтр("ru='Загрузка отчетов Ozon'");
		
	Элементы.ГруппаМаркетплейсы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаOZON.Видимость = Истина;
	
	Элементы.ГруппаМаркетплейсы.ТекущаяСтраница = Элементы.ГруппаOZON;
	
	ЕстьРазобранныеФайлы = Форма.ЗагружаемыеФайлыOzon.Количество() > 0;
			
	Элементы.ГруппаСтраницы.ТекущаяСтраница = ?(ЕстьРазобранныеФайлы, Элементы.ГруппаСозданиеДокументов, Элементы.ГруппаФайлы );
	Элементы.ФормаЗагрузить.Видимость       = ЕстьРазобранныеФайлы;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеФайловДляЗагрузки()
	
	Если НЕ ВыполняетсяЗагрузка И Файлы.Количество() > 0 Тогда
		
		ФайлOzon = Маркетплейс = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon");
		
		Если ФайлOzon И ЗагружаемыеФайлыOzon.Количество() = 0 Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Среди выбранных файлов нет подходящих для загрузки.'"));
			Элементы.ФайлыОписание.Видимость = Истина;
			Элементы.ДобавитьВСписок.Видимость = Истина;
			Элементы.ГруппаПодсказка.Видимость = Истина;

		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПослеРазбораФайловНаСервере()
	
	ДанныеФайлов = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(ДанныеФайлов) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРазобранныхФайлов = Неопределено;
	Если ЗначениеЗаполнено(АдресВременногоХранилища) Тогда
	    ДанныеРазобранныхФайлов = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		Если ТипЗнч(ДанныеРазобранныхФайлов) <> Тип("Массив") Тогда
			ДанныеРазобранныхФайлов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Файл Из ДанныеФайлов Цикл 
		
		Если ДанныеРазобранныхФайлов <> Неопределено Тогда
			ДанныеРазобранныхФайлов.Добавить(Файл);
		КонецЕсли;
		
		СтрокиФайлов = Файлы.НайтиСтроки(Новый Структура("Наименование", Файл.ПолноеИмяФайла));
		Для Каждого СтрокаФайлов Из СтрокиФайлов Цикл
			
			Если Файл.Свойство("ТекстОшибки") Тогда
				Файл.Вставить("Описание", Файл.ТекстОшибки);
			КонецЕсли;  
			
			Если НЕ СтрокаФайлов.Разобран Тогда 
				СтрокаФайлов.Разобран = Истина;
				СтрокаФайлов.Описание = Файл.Описание; 
			Иначе
			   	СтрокаФайлов.Описание = СтрокаФайлов.Описание + "
					|" + Файл.Описание;
			КонецЕсли;  
			
		КонецЦикла
	КонецЦикла;	
	
	Если ДанныеРазобранныхФайлов <> Неопределено Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеРазобранныхФайлов, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеФайлов(ПомещенныеФайлы)
	
	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
		
		Если ПомещенныйФайл.ПомещениеФайлаОтменено Тогда
			Продолжить;
		КонецЕсли;
		
		Файл = НайтиФайлПоИдентификатору(ПомещенныйФайл.СсылкаНаФайл.ИдентификаторФайла);
		
		Если Файл = Неопределено Тогда 
			
			Файл = ДобавитьФайл(ПомещенныйФайл.СсылкаНаФайл.Имя, ПомещенныйФайл.СсылкаНаФайл.ИдентификаторФайла, 
				ПомещенныйФайл.СсылкаНаФайл.Расширение); 
				
		КонецЕсли;
		
		Файл.Адрес = ПомещенныйФайл.Адрес;
		
	КонецЦикла;
	
	Элементы.ГруппаФайлы.Заголовок = СтрШаблон(НСтр("ru='Файлы (%1)'"), Формат(Файлы.Количество(), "ЧН=0"));
	
КонецПроцедуры 

&НаКлиенте
Функция НайтиФайлПоИдентификатору(ИдентификаторФайла)
	
	НайденныеСтроки = Файлы.НайтиСтроки(Новый Структура("ИдентификаторФайла", ИдентификаторФайла));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПерерисоватьФайлыПоСостоянию()
	
	ЕстьЗагруженныеФайлы = (Файлы.Количество() > 0);
	
	Если ВыполняетсяЗагрузка Или ЕстьЗагруженныеФайлы Тогда
		Элементы.ВыборФайлов.ТекущаяСтраница = Элементы.Список;
		Элементы.ДобавитьВСписок.Видимость = Ложь;
	Иначе
		Элементы.ВыборФайлов.ТекущаяСтраница = Элементы.ПредложениеПеретащить;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда) 
				 	
	Элементы.ФормаЗагрузить.Видимость = Ложь;
			
	ОткрытьФормуСозданиеДокументов(); 
	
КонецПроцедуры  

&НаСервере
Функция ПолучитьАдресТаблицыЗагружаемыхФайлов()    
	
	Возврат ПоместитьВоВременноеХранилище(ЗагружаемыеФайлыOzon.Выгрузить(), Новый УникальныйИдентификатор()); 
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуСозданиеДокументов() 
	
	НастройкиЗагрузкиДанных = Новый Структура;
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяОбъектаЗаполнения"	, "Документ.ОтчетКомиссионера.ТабличнаяЧасть.Запасы");	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти"		, "ОтчетКомиссионера.Запасы");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном"			, "ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок"					, НСтр("ru = 'Загрузка из маркетплейса'"));
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо"				, Истина);
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги"	, Ложь);
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаШапкиДокумента"		, Истина);
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаИзФайлаOzon"			, Истина);
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаИзФайлаWB"			, Ложь);  
	НастройкиЗагрузкиДанных.Вставить("ЭтоЗагрузкаСправочника"		, Ложь);
	НастройкиЗагрузкиДанных.Вставить("ЭтоЗагрузкаРегистраСведений"	, Ложь);
	НастройкиЗагрузкиДанных.Вставить("ЭтоЗагрузкаТабличнойЧасти"	, Истина);  
	НастройкиЗагрузкиДанных.Вставить("ИспользоватьСовместно"		, Ложь);
	НастройкиЗагрузкиДанных.Вставить("ПакетнаяЗагрузка"				, Истина);
	НастройкиЗагрузкиДанных.Вставить("ЗагружаемыеФайлыАдресТаблицы"	, ПолучитьАдресТаблицыЗагружаемыхФайлов()); 
	НастройкиЗагрузкиДанных.Вставить("АдресХранилища"				, АдресХранилища); 
	
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыСозданиеДокументов", ЭтотОбъект, Неопределено);
	
	ИмяФормыПомошник = "Обработка.ЗагрузкаДанныхИзВнешнегоИсточника.Форма.ПомощникЗагрузкиДанныхИзВнешнегоИсточника";
	ПараметрыОткрытия = Новый Структура("НастройкиЗагрузкиДанных", НастройкиЗагрузкиДанных);
	ОткрытьФорму(ИмяФормыПомошник, ПараметрыОткрытия, , , , , ОповещениеПриЗакрытии);
	
КонецПроцедуры   

&НаКлиенте
Процедура ПослеЗакрытияФормыСозданиеДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	Закрыть();	
	
КонецПроцедуры


#КонецОбласти


