#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Задать настройки формы отчета.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма отчета
//  КлючВарианта - Строка						 - Ключ загружаемого варианта
//  Настройки	 - Структура					 - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт

	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// Процедура - Обработчик заполнения настроек отчета и варианта
//
// Параметры:
//  НастройкиОтчета		 - Структура - Настройки отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиОтчета 
//  НастройкиВариантов	 - Структура - Настройки варианта отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиВарианта
//
Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	УстановитьТегиВариантов(НастройкиВариантов);
	ДобавитьОписанияСвязанныхПолей(НастройкиВариантов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ОтчетыУНФ.ФормаОтчетаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
	Если Форма.Параметры.Свойство("ПараметрКоманды") Тогда
		Если ТипЗнч(Форма.Параметры.ПараметрКоманды) = Тип("ДокументСсылка.НачислениеЗарплатыУНФ") И ЗначениеЗаполнено(Форма.Параметры.ПараметрКоманды) Тогда
			
			ОтборПоДокументу = ОтборПоНачислению(Форма.Параметры.ПараметрКоманды);
			Для Каждого Элемент Из ОтборПоДокументу Цикл
				Форма.ФормаПараметры.Отбор.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеВариантаНаСервере
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма отчета
//  НовыеНастройкиКД - НастройкиКомпоновкиДанных	 - Загружаемые настройки КД
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПреобразоватьСтарыеНастройки(Форма, НовыеНастройкиКД);	
	ОтчетыУНФ.ОбновитьВидимостьОтбораОрганизация(Форма.Отчет.КомпоновщикНастроек);	
	ОтчетыУНФ.ФормаОтчетаПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД);

КонецПроцедуры

// Обработчик события ПриЗагрузкеПользовательскихНастроекНаСервере
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения				 - Форма отчета
//  НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - Загружаемые пользовательские
//                                                                                 настройки КД
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПеренестиПараметрыЗаголовкаВНастройки(КомпоновщикНастроек.Настройки, НовыеПользовательскиеНастройкиКД);	
	
	Если Форма.ФормаПараметры.Отбор.Свойство("ПериодРегистрации") Тогда
		ПериодОтчета = Новый СтандартныйПериод;
		ПериодОтчета.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		ПериодОтчета.ДатаНачала = НачалоМесяца(Форма.ФормаПараметры.Отбор.ПериодРегистрации);
		ПериодОтчета.ДатаОкончания = КонецМесяца(Форма.ФормаПараметры.Отбор.ПериодРегистрации);
		
		ПериодРегистрации = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СтПериод");
		Если ПериодРегистрации <> Неопределено Тогда
			ПериодРегистрации.Значение = ПериодОтчета;
			ПериодРегистрацииПольз = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПериодРегистрации.ИдентификаторПользовательскойНастройки);
			Если ПериодРегистрацииПольз <> Неопределено Тогда
				ПериодРегистрацииПольз.Значение = ПериодОтчета;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ОтчетыУНФ.ОбъединитьСПользовательскимиНастройками(КомпоновщикНастроек);
	ОтчетыУНФ.ПриКомпоновкеРезультата(КомпоновщикНастроек, СхемаКомпоновкиДанных, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьТегиВариантов(НастройкиВариантов)
	
	НастройкиВариантов["Основной"].Теги = НСТР("ru = 'Зарплата,Сотрудники,Начисления,Удержания'");
	НастройкиВариантов["ВВалюте"].Теги = НСТР("ru = 'Зарплата,Сотрудники,Начисления,Удержания,Валюты'");
	
КонецПроцедуры

Процедура ДобавитьОписанияСвязанныхПолей(НастройкиВариантов)
	
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["Основной"].СвязанныеПоля, "Сотрудник", "Справочник.Сотрудники");
	
КонецПроцедуры

Функция ОтборПоНачислению(НачислениеЗарплатыУНФ)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НачислениеЗарплатыУНФ, "Организация, СтруктурнаяЕдиница, ПериодРегистрации");
	
	Отбор = Новый Структура;
	Если НЕ Константы.УчетПоКомпании.Получить() Тогда
		Отбор.Вставить("Организация", Реквизиты.Организация);
	КонецЕсли;
	Отбор.Вставить("Подразделение", Реквизиты.СтруктурнаяЕдиница);
	Отбор.Вставить("ПериодРегистрации", Реквизиты.ПериодРегистрации);
	Отбор.Вставить("Сотрудник", НачислениеЗарплатыУНФ.НачисленияУдержания.ВыгрузитьКолонку("Сотрудник"));
	
	Возврат Отбор;
	
КонецФункции


#КонецОбласти 

#Область Инициализация

ЭтоОтчетУНФ = Истина;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли