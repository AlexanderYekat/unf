#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает идентификатор печатной формы
// Возвращаемое значение:
//   Строка
// 
Функция ИдентификаторПечатнойФормы() Экспорт
	
	Возврат "РасчетнаяВедомостьУпр";
	
КонецФункции

// Возвращает представление печатной формы
// Возвращаемое значение:
//   Строка
//
Функция ПредставлениеПФ() Экспорт
	
	Возврат НСтр("ru = 'Расчетная ведомость'");
	
КонецФункции

// Сформировать печатные формы из отчета
//
// Параметры:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//   КоллекцияПечатныхФорм - см. УправлениеПечатьюПереопределяемый.ПриПечати.КоллекцияПечатныхФорм
//   ОбъектыПечати - СписокЗначений
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Перем Ошибки;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы()) Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы(),
			ПредставлениеПФ(), ПечатьРасчетнойВедомости(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов,
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Сформировать табличный документ - расчетную ведомость 
//
// Параметры:
//   Организация  - СправочникСсылка.Организации
//   Подразделение - СправочникСсылка.СтруктурныеЕдиницы
//   ПериодРегистрации - Дата
//   Валюта - СправочникСсылка.Валюты
//   Сотрудники - СправочникСсылка.Сотрудники, массив из СправочникСсылка.Сотрудники
//
// Возвращаемое значение:
//   ТабличныйДокумент - печатная форма расчетной ведомости
//
Функция СформироватьОтчет(Организация, Подразделение, ПериодРегистрации, Валюта, Сотрудники) Экспорт
	
	СписокСотрудников = Новый Массив;
	Если ЗначениеЗаполнено(Сотрудники) Тогда
		Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
			СписокСотрудников.Добавить(Сотрудники);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСотрудников, Сотрудники);
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗапроса = ВыполнитьЗапрос(Организация, Подразделение, ПериодРегистрации, Валюта, СписокСотрудников);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Макет = Отчеты.РасчетнаяВедомость.ПолучитьМакет("Макет");
	
	ОбластьШапкаДокумента 		= Макет.ПолучитьОбласть("ШапкаДокумента");
	ОбластьШапка 				= Макет.ПолучитьОбласть("Шапка");
	ОбластьДетали 				= Макет.ПолучитьОбласть("Детали");
	ОбластьИтогоПоСтранице 		= Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьПодвал 				= Макет.ПолучитьОбласть("Подвал");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ОбластьШапкаДокумента.Параметры.Организация = Организация.НаименованиеПолное;
	ОбластьШапкаДокумента.Параметры.Подразделение = Подразделение;
	ОбластьШапкаДокумента.Параметры.ДатаД = ТекущаяДатаСеанса();
	ОбластьШапкаДокумента.Параметры.ОтчетныйПериодС = ПериодРегистрации;
	ОбластьШапкаДокумента.Параметры.ОтчетныйПериодПо = КонецМесяца(ПериодРегистрации);
	ТабличныйДокумент.Вывести(ОбластьШапкаДокумента);
	
	ОбластьШапка.Параметры.Валюта = Валюта;
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	// Инициализация итогов по странице
	ИтогПоСтраницеДолгЗаОрганизацией = 0;
	ИтогПоСтраницеДолгЗаРаботником	 = 0;
	ИтогПоСтраницеСальдоНаКонец      = 0;
	
	// Инициализация итогов по документу
	ИтогДолгЗаОрганизацией			 = 0;
	ИтогДолгЗаРаботником			 = 0;
	ИтогСальдоНаКонец				 = 0;
	
	НПП = 0;
	ПерваяСтраница = Истина;
	
	ВыборкаФизлицо = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Физлицо");
	Пока ВыборкаФизлицо.Следующий() Цикл
		
		СтавкаСписок = "";
		
		ВыборкаДетали = ВыборкаФизлицо.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаДетали.Размер) Тогда
				СтавкаСписок = СтавкаСписок + ?(ЗначениеЗаполнено(СтавкаСписок), ", ", "") + Формат(ВыборкаДетали.Размер, "ЧДЦ=2");
			КонецЕсли;
		КонецЦикла; 
		
		НПП = НПП + 1;
		ОбластьДетали.Параметры.НомерПП = НПП;
		ОбластьДетали.Параметры.Заполнить(ВыборкаФизлицо);
		ОбластьДетали.Параметры.ТарифнаяСтавка = СтавкаСписок;
		ПредставлениеФизЛицо = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ВыборкаФизлицо);
		ОбластьДетали.Параметры.ФизЛицо = ?(ЗначениеЗаполнено(ПредставлениеФизЛицо), ПредставлениеФизЛицо, ВыборкаФизлицо.Физлицо);
		ОбластьДетали.Параметры.ТабельныйНомер = СокрЛП(ВыборкаФизлицо.ТабельныйНомер);
		
		Если ВыборкаФизлицо.СальдоНаКонец < 0 Тогда
			ОбластьДетали.Параметры.ДолгЗаОрганизацией = 0;
			ОбластьДетали.Параметры.ДолгЗаРаботником = -1 * ВыборкаФизлицо.СальдоНаКонец;
		Иначе
			ОбластьДетали.Параметры.ДолгЗаОрганизацией = ВыборкаФизлицо.СальдоНаКонец;
			ОбластьДетали.Параметры.ДолгЗаРаботником = 0;
		КонецЕсли;
		
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		Если ПерваяСтраница Тогда
			СтрокаСПодвалом.Добавить(ОбластьШапка); // если первая строка, то должен помещаться заголовок
			ПерваяСтраница = Ложь;
		КонецЕсли;                                                   
		СтрокаСПодвалом.Добавить(ОбластьДетали);
		СтрокаСПодвалом.Добавить(ОбластьИтогоПоСтранице);
		
		Если НЕ ПерваяСтраница И НЕ ТабличныйДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
			
			// Выводим итоги по странице
			ОбластьИтогоПоСтранице.Параметры.ИтогПоСтраницеДолгЗаОрганизацией	 = ИтогПоСтраницеДолгЗаОрганизацией;
			ОбластьИтогоПоСтранице.Параметры.ИтогПоСтраницеДолгЗаРаботником		 = ИтогПоСтраницеДолгЗаРаботником;
			ОбластьИтогоПоСтранице.Параметры.ИтогПоСтраницеСальдоНаКонец		 = ИтогПоСтраницеСальдоНаКонец;
			ТабличныйДокумент.Вывести(ОбластьИтогоПоСтранице);
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Очистим итоги по странице
			ИтогПоСтраницеДолгЗаОрганизацией	 = 0;
			ИтогПоСтраницеДолгЗаРаботником		 = 0;
			ИтогПоСтраницеСальдоНаКонец			 = 0;
			
			// Выведем заголовок таблицы
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьДетали);
		
		// Увеличим итоги
		Если ВыборкаФизлицо.СальдоНаКонец < 0 Тогда
			
			ИтогПоСтраницеДолгЗаРаботником		 = ИтогПоСтраницеДолгЗаРаботником - ВыборкаФизлицо.СальдоНаКонец;
			ИтогПоСтраницеСальдоНаКонец			 = ИтогПоСтраницеСальдоНаКонец      + ВыборкаФизлицо.ДолгКВыплате;
			
			ИтогДолгЗаРаботником				 = ИтогДолгЗаРаботником + ВыборкаФизлицо.СальдоНаКонец;
			ИтогСальдоНаКонец     				 = ИтогСальдоНаКонец      + ВыборкаФизлицо.ДолгКВыплате;
			
		Иначе
			
			ИтогПоСтраницеДолгЗаОрганизацией	 = ИтогПоСтраницеДолгЗаОрганизацией       + ВыборкаФизлицо.СальдоНаКонец;
			ИтогПоСтраницеСальдоНаКонец			 = ИтогПоСтраницеСальдоНаКонец      + ВыборкаФизлицо.ДолгКВыплате;
			
			ИтогДолгЗаОрганизацией      		 = ИтогДолгЗаОрганизацией       + ВыборкаФизлицо.СальдоНаКонец;
			ИтогСальдоНаКонец     				 = ИтогСальдоНаКонец      + ВыборкаФизлицо.ДолгКВыплате;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим итоги по странице
	ОбластьИтогоПоСтранице.Параметры.ИтогПоСтраницеДолгЗаОрганизацией	 = ИтогПоСтраницеДолгЗаОрганизацией;
	ОбластьИтогоПоСтранице.Параметры.ИтогПоСтраницеДолгЗаРаботником		 = ИтогПоСтраницеДолгЗаРаботником;
	ОбластьИтогоПоСтранице.Параметры.ИтогПоСтраницеСальдоНаКонец		 = ИтогПоСтраницеСальдоНаКонец;
	ТабличныйДокумент.Вывести(ОбластьИтогоПоСтранице);
	
	ОбластьПодвал.Параметры.ИтогДолгЗаОрганизацией	 = ИтогДолгЗаОрганизацией;
	ОбластьПодвал.Параметры.ИтогДолгЗаРаботником	 = ИтогДолгЗаРаботником;
	ОбластьПодвал.Параметры.ИтогСальдоНаКонец		 = ИтогСальдоНаКонец;
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // Сформировать()

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Вызывается при работе в модели сервиса для получения сведений о предопределенных вариантах отчета.
//
// Возвращаемое значение:
//  Массив из Структура:
//    * Имя           - Строка - имя варианта отчета; например, "Основной";
//    * Представление - Строка - имя варианта отчета; например, НСтр("ru = 'Динамика изменений файлов'").
//
Функция ВариантыНастроек() Экспорт 
	
	Результат = Новый Массив;
	Результат.Добавить(Новый Структура("Имя, Представление", "Основной", 
		НСтр("ru = 'Расчетная ведомость'")));
	Возврат Результат;
	
КонецФункции

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Основной");
	Вариант.Описание = НСтр("ru = 'Расчетная ведомость произвольной формы. Предназначена для внутренней отчетности предприятия.'");
	Вариант.НастройкиДляПоиска.НаименованияПолей =
	НСтр("ru = 'Табельный номер
	|Сотрудник
	|Должность
	|Тарифная ставка
	|Подразделение
	|Организация.'");
	Вариант.НастройкиДляПоиска.НаименованияПараметровИОтборов =
	НСтр("ru = 'Период регистрации
	|Подразделение
	|Валюта
	|Организация.'");
	Вариант.Размещение.Вставить(Метаданные.Подсистемы.Персонал.Подсистемы.Зарплата, "Важный");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
// Возвращаемое значение:
//   СтрокаТаблицыЗначений, Неопределено - в зависимости от факта добавления отчета
//
Функция ДобавитьКомандуОтчета(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РасчетныеЛистки) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Менеджер = Метаданные.Отчеты.РасчетнаяВедомость.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Расчетная ведомость'");
		КомандаОтчет.МножественныйВыбор = Ложь;
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьПодсистемуЗарплата";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РасчетнаяВедомостьУпрУчет");
		КомандаОтчет.ЕстьУсловияВидимости = Истина;
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаОтчет, "ДокументОснование",, ВидСравненияКомпоновкиДанных.Заполнено);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлючПараметровПечати()
	
	Возврат "ПАРАМЕТРЫ_ПЕЧАТИ_РАСЧЕТНЫЙ_ЛИСТОК";
	
КонецФункции

Функция ВыполнитьЗапрос(Организация, Подразделение, ПериодРегистрации, Валюта, Сотрудники)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиСрезПоследних.СтруктурнаяЕдиница КАК Подразделение,
	|	НачисленияИУдержания.Сотрудник.Код КАК ТабельныйНомер,
	|	НачисленияИУдержания.Сотрудник КАК Физлицо,
	|	СотрудникиСрезПоследних.Должность КАК Должность,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|			ТОГДА НачисленияИУдержания.Размер
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Размер,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Удержание)
	|				ИЛИ НачисленияИУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Налог)
	|			ТОГДА ЕСТЬNULL(НачисленияИУдержания.СуммаВал, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУдержано,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|			ТОГДА ЕСТЬNULL(НачисленияИУдержания.СуммаВал, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНачислено,
	|	Табель.ДнейОборот КАК ОтработаноДней,
	|	Табель.ЧасовОборот КАК ОтработаноЧасов,
	|	ЕСТЬNULL(ДолгНаКонец.СуммаВалОстаток, 0) КАК СальдоНаКонец,
	|	ЕСТЬNULL(ДолгКВыплате.СуммаВалОстаток, 0) КАК ДолгКВыплате,
	|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") <> """"
	|			ТОГДА ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
	|		ИНАЧЕ НачисленияИУдержания.Сотрудник.Наименование
	|	КОНЕЦ КАК СотрудникПредставление
	|ИЗ
	|	РегистрНакопления.НачисленияИУдержания КАК НачисленияИУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПерсоналом.Остатки(
	|				&ПериодРегистрацииКонец,
	|				Организация = &Организация
	|					И Валюта = &Валюта
	|					И ПериодРегистрации < &ПериодРегистрации
	|					И &СотрудникСотрудник
	|					И (СтруктурнаяЕдиница = &Подразделение
	|						ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))) КАК ДолгНаКонец
	|		ПО НачисленияИУдержания.Сотрудник = ДолгНаКонец.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники.СрезПоследних(
	|				&ПериодРегистрацииКонец,
	|				Организация = &Организация
	|					И СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СотрудникиСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ТабельОбороты.ДнейОборот КАК ДнейОборот,
	|				ТабельОбороты.ЧасовОборот КАК ЧасовОборот,
	|				ТабельОбороты.Сотрудник КАК Сотрудник,
	|				ТабельОбороты.Должность КАК Должность
	|			ИЗ
	|				РегистрНакопления.Табель.Обороты(
	|						&ПериодРегистрации,
	|						&ПериодРегистрацииКонец,
	|						Месяц,
	|						Организация = &Организация
	|							И (СтруктурнаяЕдиница = &Подразделение
	|								ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|							И ВидВремени = ЗНАЧЕНИЕ(Справочник.ВидыРабочегоВремени.Работа)) КАК ТабельОбороты) КАК Табель
	|			ПО СотрудникиСрезПоследних.Сотрудник = Табель.Сотрудник
	|				И СотрудникиСрезПоследних.Должность = Табель.Должность
	|		ПО НачисленияИУдержания.Сотрудник = СотрудникиСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ПериодРегистрацииКонец, ) КАК ФИОФизЛицСрезПоследних
	|		ПО НачисленияИУдержания.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПерсоналом.Остатки(
	|				&ПериодРегистрацииКонец,
	|				Организация = &Организация
	|					И Валюта = &Валюта
	|					И ПериодРегистрации = &ПериодРегистрации
	|					И &СотрудникСотрудник
	|					И (СтруктурнаяЕдиница = &Подразделение
	|						ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))) КАК ДолгКВыплате
	|		ПО НачисленияИУдержания.Сотрудник = ДолгКВыплате.Сотрудник
	|ГДЕ
	|	НачисленияИУдержания.Организация = &Организация
	|	И НачисленияИУдержания.ПериодРегистрации = &ПериодРегистрации
	|	И НачисленияИУдержания.Валюта = &Валюта
	|	И &НачисленияИУдержанияСотрудникСотрудник
	|	И (НачисленияИУдержания.СтруктурнаяЕдиница = &Подразделение
	|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникПредставление,
	|	НачисленияИУдержания.ДатаНачала
	|ИТОГИ
	|	МАКСИМУМ(Подразделение),
	|	МАКСИМУМ(ТабельныйНомер),
	|	МАКСИМУМ(Должность),
	|	СУММА(СуммаУдержано),
	|	СУММА(СуммаНачислено),
	|	МАКСИМУМ(ОтработаноДней),
	|	МАКСИМУМ(ОтработаноЧасов),
	|	МАКСИМУМ(СальдоНаКонец),
	|	МАКСИМУМ(ДолгКВыплате),
	|	МАКСИМУМ(Фамилия),
	|	МАКСИМУМ(Имя),
	|	МАКСИМУМ(Отчество)
	|ПО
	|	Физлицо");
	
	
	Если Сотрудники.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НачисленияИУдержанияСотрудникСотрудник", "НачисленияИУдержания.Сотрудник В (&Сотрудники)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СотрудникСотрудник", "Сотрудник В (&Сотрудники)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НачисленияИУдержанияСотрудникСотрудник", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СотрудникСотрудник", "ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Организация", Организация); 
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ПериодРегистрацииКонец", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ВыполнитьЗапрос()

Функция ПечатьРасчетнойВедомости(МассивОбъектов, ОбъектыПечати)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НачислениеЗарплатыУНФНачисленияУдержания.Сотрудник КАК Сотрудник,
	               |	НачислениеЗарплатыУНФ.Организация КАК Организация,
	               |	НачислениеЗарплатыУНФ.ПериодРегистрации КАК ПериодРегистрации,
	               |	НачислениеЗарплатыУНФ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |	НачислениеЗарплатыУНФ.ВалютаДокумента КАК ВалютаДокумента
	               |ИЗ
	               |	Документ.НачислениеЗарплатыУНФ.НачисленияУдержания КАК НачислениеЗарплатыУНФНачисленияУдержания
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыУНФ КАК НачислениеЗарплатыУНФ
	               |		ПО НачислениеЗарплатыУНФНачисленияУдержания.Ссылка = НачислениеЗарплатыУНФ.Ссылка
	               |ГДЕ
	               |	НачислениеЗарплатыУНФНачисленияУдержания.Ссылка В(&НачисленияЗарплатыУНФ)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НачислениеЗарплатыУНФНалогиНаДоходы.Сотрудник,
	               |	НачислениеЗарплатыУНФ.Организация,
	               |	НачислениеЗарплатыУНФ.ПериодРегистрации,
	               |	НачислениеЗарплатыУНФ.СтруктурнаяЕдиница,
	               |	НачислениеЗарплатыУНФ.ВалютаДокумента
	               |ИЗ
	               |	Документ.НачислениеЗарплатыУНФ.НалогиНаДоходы КАК НачислениеЗарплатыУНФНалогиНаДоходы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыУНФ КАК НачислениеЗарплатыУНФ
	               |		ПО НачислениеЗарплатыУНФНалогиНаДоходы.Ссылка = НачислениеЗарплатыУНФ.Ссылка
	               |ГДЕ
	               |	НачислениеЗарплатыУНФНалогиНаДоходы.Ссылка В(&НачисленияЗарплатыУНФ)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НачислениеЗарплатыУНФПогашениеЗаймов.Сотрудник,
	               |	НачислениеЗарплатыУНФ.Организация,
	               |	НачислениеЗарплатыУНФ.ПериодРегистрации,
	               |	НачислениеЗарплатыУНФ.СтруктурнаяЕдиница,
	               |	НачислениеЗарплатыУНФ.ВалютаДокумента
	               |ИЗ
	               |	Документ.НачислениеЗарплатыУНФ.ПогашениеЗаймов КАК НачислениеЗарплатыУНФПогашениеЗаймов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыУНФ КАК НачислениеЗарплатыУНФ
	               |		ПО НачислениеЗарплатыУНФПогашениеЗаймов.Ссылка = НачислениеЗарплатыУНФ.Ссылка
	               |ГДЕ
	               |	НачислениеЗарплатыУНФПогашениеЗаймов.Ссылка В(&НачисленияЗарплатыУНФ)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НачислениеЗарплатыУНФВзносы.Сотрудник,
	               |	НачислениеЗарплатыУНФ.Организация,
	               |	НачислениеЗарплатыУНФ.ПериодРегистрации,
	               |	НачислениеЗарплатыУНФ.СтруктурнаяЕдиница,
	               |	НачислениеЗарплатыУНФ.ВалютаДокумента
	               |ИЗ
	               |	Документ.НачислениеЗарплатыУНФ.Взносы КАК НачислениеЗарплатыУНФВзносы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыУНФ КАК НачислениеЗарплатыУНФ
	               |		ПО НачислениеЗарплатыУНФВзносы.Ссылка = НачислениеЗарплатыУНФ.Ссылка
	               |ГДЕ
	               |	НачислениеЗарплатыУНФВзносы.Ссылка В(&НачисленияЗарплатыУНФ)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НачислениеЗарплатыУНФПримененныеВычетыПоНДФЛ.Сотрудник,
	               |	НачислениеЗарплатыУНФ.Организация,
	               |	НачислениеЗарплатыУНФ.ПериодРегистрации,
	               |	НачислениеЗарплатыУНФ.СтруктурнаяЕдиница,
	               |	НачислениеЗарплатыУНФ.ВалютаДокумента
	               |ИЗ
	               |	Документ.НачислениеЗарплатыУНФ.ПримененныеВычетыПоНДФЛ КАК НачислениеЗарплатыУНФПримененныеВычетыПоНДФЛ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыУНФ КАК НачислениеЗарплатыУНФ
	               |		ПО НачислениеЗарплатыУНФПримененныеВычетыПоНДФЛ.Ссылка = НачислениеЗарплатыУНФ.Ссылка
	               |ГДЕ
	               |	НачислениеЗарплатыУНФПримененныеВычетыПоНДФЛ.Ссылка В(&НачисленияЗарплатыУНФ)";
	
	Запрос.УстановитьПараметр("НачисленияЗарплатыУНФ", МассивОбъектов);
	
	Компания = Неопределено;
	Если Константы.УчетПоКомпании.Получить() Тогда
		Компания = Справочники.Организации.ОрганизацияКомпания();
	КонецЕсли;	
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = КлючПараметровПечати();
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ПериодРегистрации") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ВалютаДокумента") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("СтруктурнаяЕдиница") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
					СписокСотрудников = Новый Массив;
					Пока Выборка.Следующий() Цикл
						СписокСотрудников.Добавить(Выборка.Сотрудник);
					КонецЦикла;
					
					Организация = ?(ЗначениеЗаполнено(Компания), Компания, Выборка.Организация);
					РасчетнаяВедомость = СформироватьОтчет(Организация, Выборка.СтруктурнаяЕдиница, Выборка.ПериодРегистрации, Выборка.ВалютаДокумента, СписокСотрудников);
					
					Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					ДокументРезультат.Вывести(РасчетнаяВедомость);
					
				КонецЦикла;
			КонецЦикла;			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти

#КонецЕсли