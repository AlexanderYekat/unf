#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает идентификатор печатной формы
// Возвращаемое значение:
//   Строка - идентификатор печатной формы
// 
Функция ИдентификаторПечатнойФормы() Экспорт
	
	Возврат "РасчетныйЛистокУпр";
	
КонецФункции

// Возвращает представление печатной формы
// Возвращаемое значение:
//   Строка - Представление печатной формы
//
Функция ПредставлениеПФ() Экспорт
	
	Возврат НСтр("ru = 'Расчетный листок'");
	
КонецФункции

// Сформировать печатные формы из отчета
//
// Параметры:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//   КоллекцияПечатныхФорм - см. УправлениеПечатьюПереопределяемый.ПриПечати.КоллекцияПечатныхФорм
//   ОбъектыПечати - СписокЗначений
//   ПараметрыВывода - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Перем Ошибки;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы()) Тогда
		
		ИмяМакета = ИдентификаторПечатнойФормы();
		СинонимМакета = ПредставлениеПФ();
		ПечатнаяФорма = ПечатьРасчетногоЛистка(МассивОбъектов, ОбъектыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, СинонимМакета, ПечатнаяФорма);
	КонецЕсли;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов,
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Вызывается при работе в модели сервиса для получения сведений о предопределенных вариантах отчета.
//
// Возвращаемое значение:
//  Массив из Структура:
//    * Имя           - Строка - имя варианта отчета; например, "Основной";
//    * Представление - Строка - имя варианта отчета; например, НСтр("ru = 'Динамика изменений файлов'").
//
Функция ВариантыНастроек() Экспорт 
	
	Результат = Новый Массив;
	ОсновнойВариант = Новый Структура("Имя, Представление", "Основной", НСтр("ru = 'Расчетные листки'"));
	Результат.Добавить(ОсновнойВариант);
	Возврат Результат;
	
КонецФункции

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Основной");
	Вариант.Описание = НСтр("ru = 'Формирование расчетных листков, отобранных и сгруппированных по организациям и подразделениям.'");
	Вариант.НастройкиДляПоиска.НаименованияПолей =
	НСтр("ru = 'Табельный номер
	|Сотрудник
	|Должность
	|Тарифная ставка
	|Подразделение
	|Организация.'");
	Вариант.НастройкиДляПоиска.НаименованияПараметровИОтборов =
	НСтр("ru = 'Период регистрации
	|Подразделение
	|Валюта
	|Сотрудник.'");
	Вариант.Размещение.Вставить(Метаданные.Подсистемы.Персонал.Подсистемы.Зарплата, "Важный");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

// Сформировать табличный документ - расчетный листок
//
// Параметры:
//   Организация  - СправочникСсылка.Организации
//   Подразделение - СправочникСсылка.СтруктурныеЕдиницы
//   ПериодРегистрации - Дата
//   Валюта - СправочникСсылка.Валюты
//   Сотрудники - СправочникСсылка.Сотрудники, массив из СправочникСсылка.Сотрудники
//
// Возвращаемое значение:
//   ТабличныйДокумент - печатная форма расчетного листка
//
Функция СформироватьОтчет(Организация, Подразделение, ПериодРегистрации, Валюта, Сотрудники) Экспорт
	
	СписокСотрудников = Новый Массив;
	Если ЗначениеЗаполнено(Сотрудники) Тогда
		Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
			СписокСотрудников.Добавить(Сотрудники);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСотрудников, Сотрудники);
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗапроса = ВыполнитьЗапрос(Организация, Подразделение, ПериодРегистрации, Валюта, СписокСотрудников);
	РезультатЗапросаНачисления = РезультатЗапроса[РезультатЗапроса.Количество() - 2];
	РезультатЗапросаВыплаты = РезультатЗапроса[РезультатЗапроса.Количество() - 1];
	
	Если РезультатЗапросаНачисления.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Макет = Отчеты.РасчетныеЛистки.ПолучитьМакет("Макет");
	
	ОбластьШапка 				= Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовок 			= Макет.ПолучитьОбласть("Заголовок");
	ОбластьНачисленоУдержано 	= Макет.ПолучитьОбласть("НачисленоУдержано");
	ОбластьДетали 				= Макет.ПолучитьОбласть("Детали");
	ОбластьДоходыВыплачено 		= Макет.ПолучитьОбласть("ДоходыВыплачено");
	ОбластьДеталиВыплаты 		= Макет.ПолучитьОбласть("ДеталиВыплаты");
	ОбластьВсегоВыплачено 		= Макет.ПолучитьОбласть("ВсегоВыплачено");
	ОбластьВсего 				= Макет.ПолучитьОбласть("Всего");
	ОбластьПодвал 				= Макет.ПолучитьОбласть("Подвал");
	ОбластьОтбивка 				= Макет.ПолучитьОбласть("Отбивка");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = КлючПараметровПечати();
	
	ПредставлениеПериодаРегистрации = Формат(ПериодРегистрации, НСтр("ru = 'ДФ=''ММММ гггг ''''г.'''''''"));
	ОбластьОтбивка.Параметры.ТекстОтбивки = ПредставлениеПериодаРегистрации;
	ТабличныйДокумент.Вывести(ОбластьОтбивка);
	
	ОбластьОтбивка.Параметры.ТекстОтбивки = СтрШаблон(НСтр("ru = 'Организация: %1'"), Организация);
	ТабличныйДокумент.Вывести(ОбластьОтбивка);
	
	ВыборкаПодразделение = РезультатЗапросаНачисления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Подразделение");
	Пока ВыборкаПодразделение.Следующий() Цикл
		
		ОбластьОтбивка.Параметры.ТекстОтбивки = "Подразделение: " + ВыборкаПодразделение.Подразделение;
		ТабличныйДокумент.Вывести(ОбластьОтбивка);
		ТабличныйДокумент.НачатьГруппуСтрок();
		
		ВыборкаФизлицо = ВыборкаПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ФизЛицо");
		Пока ВыборкаФизлицо.Следующий() Цикл
			
			ОбластьШапка.Параметры.Заголовок = СтрШаблон(НСтр("ru = 'Расчетный листок за %1'"),
				ПредставлениеПериодаРегистрации);
			ОбластьШапка.Параметры.Организация = Организация;
			ОбластьШапка.Параметры.Заполнить(ВыборкаФизлицо);
			ПредставлениеФизЛицо = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ВыборкаФизлицо);
			ОбластьШапка.Параметры.ФизЛицо = ?(ЗначениеЗаполнено(ПредставлениеФизЛицо),
												ПредставлениеФизЛицо,
												ВыборкаФизлицо.Физлицо);
			ТабличныйДокумент.Вывести(ОбластьШапка);
			ТабличныйДокумент.Вывести(ОбластьЗаголовок);
			ТабличныйДокумент.Вывести(ОбластьНачисленоУдержано);
			
			ПоследнееНачисление = ТабличныйДокумент.ВысотаТаблицы;
			ПоследнееУдержание = ТабличныйДокумент.ВысотаТаблицы;
			
			ВыборкаДетали = ВыборкаФизлицо.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				
				Если ВыборкаДетали.Удержание = NULL Тогда
					
					Если ПоследнееНачисление < ПоследнееУдержание Тогда
						
						ТабличныйДокумент.Область(ПоследнееНачисление + 1, 1).Текст = ВыборкаДетали.Начисление;
						ТабличныйДокумент.Область(ПоследнееНачисление + 1, 2, ПоследнееНачисление + 1, 3).Текст
							= ТекстПериод(ВыборкаДетали.ДатаНачала, ВыборкаДетали.ДатаОкончания);
						ТабличныйДокумент.Область(ПоследнееНачисление + 1, 4).Текст = ВыборкаДетали.ОтработаноДней;
						ТабличныйДокумент.Область(ПоследнееНачисление + 1, 5).Текст = ВыборкаДетали.ОтработаноЧасов;
						ТабличныйДокумент.Область(ПоследнееНачисление + 1, 6, ПоследнееНачисление + 1, 7).Текст
							= ВыборкаДетали.СуммаНачислено;
						
					Иначе
						
						ОбластьДетали.Параметры.Начисление = ВыборкаДетали.Начисление;
						ОбластьДетали.Параметры.ПериодНачисление = ТекстПериод(ВыборкаДетали.ДатаНачала, ВыборкаДетали.ДатаОкончания);
						ОбластьДетали.Параметры.ОтработаноДнейНачисление = ВыборкаДетали.ОтработаноДней;
						ОбластьДетали.Параметры.ОтработаноЧасовНачисление = ВыборкаДетали.ОтработаноЧасов;
						ОбластьДетали.Параметры.СуммаНачисление = ВыборкаДетали.СуммаНачислено;
						
						ТабличныйДокумент.Вывести(ОбластьДетали);
						
						ОбластьДетали.Параметры.Начисление = Справочники.ВидыНачисленийИУдержаний.ПустаяСсылка();
						ОбластьДетали.Параметры.ПериодНачисление = "";
						ОбластьДетали.Параметры.ОтработаноДнейНачисление = 0;
						ОбластьДетали.Параметры.ОтработаноЧасовНачисление = 0;
						ОбластьДетали.Параметры.СуммаНачисление = 0;
						
					КонецЕсли; 
					
					ПоследнееНачисление = ПоследнееНачисление + 1;
					
				Иначе
					
					Если ПоследнееУдержание < ПоследнееНачисление Тогда
						
						ТабличныйДокумент.Область(ПоследнееУдержание + 1, 8, ПоследнееУдержание + 1, 10).Текст = ВыборкаДетали.Удержание;
						ТабличныйДокумент.Область(ПоследнееУдержание + 1, 11, ПоследнееУдержание + 1, 12).Текст
							= ТекстПериод(ВыборкаДетали.ДатаНачала, ВыборкаДетали.ДатаОкончания);
						ТабличныйДокумент.Область(ПоследнееУдержание + 1, 13, ПоследнееУдержание + 1, 14).Текст
							= ВыборкаДетали.СуммаУдержано;
						
					Иначе
						
						ОбластьДетали.Параметры.Удержание = ВыборкаДетали.Удержание;
						ОбластьДетали.Параметры.ПериодУдержание = ТекстПериод(ВыборкаДетали.ДатаНачала, ВыборкаДетали.ДатаОкончания);
						ОбластьДетали.Параметры.СуммаУдержание = ВыборкаДетали.СуммаУдержано;
						
						ТабличныйДокумент.Вывести(ОбластьДетали);
						
						ОбластьДетали.Параметры.Удержание = Справочники.ВидыНачисленийИУдержаний.ПустаяСсылка();
						ОбластьДетали.Параметры.ПериодУдержание = "";
						ОбластьДетали.Параметры.СуммаУдержание = 0;
						
					КонецЕсли; 
					
					ПоследнееУдержание = ПоследнееУдержание + 1;
					
				КонецЕсли; 
				
			КонецЦикла;
			
			ОбластьВсего.Параметры.ВсегоНачисления = ВыборкаФизлицо.СуммаНачислено;
			ОбластьВсего.Параметры.ВсегоУдержания = ВыборкаФизлицо.СуммаУдержано;
			ТабличныйДокумент.Вывести(ОбластьВсего);
			
			ТабличныйДокумент.Вывести(ОбластьДоходыВыплачено);
			ВыборкаВыплатСотрудника		= РезультатЗапросаВыплаты.Выбрать();
			
			СуммаВыплаты = 0;
			
			ПараметрыПоискаПоВыборке = Новый Структура("Сотрудник", ВыборкаФизлицо.Физлицо);
			Пока ВыборкаВыплатСотрудника.НайтиСледующий(ПараметрыПоискаПоВыборке) Цикл
				
				СуммаВыплаты = СуммаВыплаты + ВыборкаВыплатСотрудника.СуммаВыплаты;
				
				ОбластьДеталиВыплаты.Параметры.Заполнить(ВыборкаВыплатСотрудника);
				ПредставлениеАванса = ?(ВыборкаВыплатСотрудника.ПризнакАванса, НСтр("ru = '(аванс)'"), "");
				ОбластьДеталиВыплаты.Параметры.ТекстВыплаты = СтрШаблон(НСтр("ru = '%1%2 №%3 от %4'"),
																ВыборкаВыплатСотрудника.ПредставлениеДокумента,
																ПредставлениеАванса,
																СокрЛП(ВыборкаВыплатСотрудника.Номер),
																Формат(ВыборкаВыплатСотрудника.Дата, "ДЛФ=D;"));
				ОбластьДеталиВыплаты.Параметры.ПериодВыплат = ТекстПериод(ПериодРегистрации, КонецМесяца(ПериодРегистрации));
				
				ТабличныйДокумент.Вывести(ОбластьДеталиВыплаты);
				
			КонецЦикла;
			
			Если СуммаВыплаты <> 0 Тогда
				ОбластьВсегоВыплачено.Параметры.ВсегоВыплачено = СуммаВыплаты;
				ТабличныйДокумент.Вывести(ОбластьВсегоВыплачено);
			КонецЕсли;
			
			ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = ВыборкаФизлицо.СальдоНаНачало;
			ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода = ВыборкаФизлицо.СальдоНаКонец;// + ВыборкаФизлицо.СуммаНачислено - ВыборкаФизлицо.СуммаУдержано - СуммаВыплаты;
			Если ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода < 0 Тогда
				ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru = 'Долг за работником на начало месяца:'");
			Иначе	
				ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru = 'Долг за организацией на начало месяца:'");
			КонецЕсли; 
			Если ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода < 0 Тогда
				ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = НСтр("ru = 'Долг за работником на конец месяца:'");
			Иначе	
				ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = НСтр("ru = 'Долг за организацией на конец месяца:'");
			КонецЕсли; 
			ТабличныйДокумент.Вывести(ОбластьПодвал);
			
		КонецЦикла;
		
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьОтчет()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлючПараметровПечати()
	
	Возврат "ПАРАМЕТРЫ_ПЕЧАТИ_РАСЧЕТНЫЙ_ЛИСТОК";
	
КонецФункции

Функция ВыполнитьЗапрос(Организация, Подразделение, ПериодРегистрации, Валюта, Сотрудники)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДолгНаНачало.Организация КАК Организация,
	|	ДолгНаНачало.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ДолгНаНачало.Сотрудник КАК Сотрудник,
	|	ДолгНаНачало.Валюта КАК Валюта,
	|	СУММА(ДолгНаНачало.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(ДолгНаНачало.СуммаВалОстаток) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ ДолгНаНачало
	|ИЗ
	|	РегистрНакопления.РасчетыСПерсоналом.Остатки(
	|			,
	|			Организация = &Организация
	|				И Валюта = &Валюта
	|				И ПериодРегистрации <> &ПериодРегистрации
	|				И ПериодРегистрации < &ПериодРегистрации
	|				И &СотрудникСотрудник) КАК ДолгНаНачало
	|
	|СГРУППИРОВАТЬ ПО
	|	ДолгНаНачало.Организация,
	|	ДолгНаНачало.СтруктурнаяЕдиница,
	|	ДолгНаНачало.Сотрудник,
	|	ДолгНаНачало.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДолгНаКонец.Организация КАК Организация,
	|	ДолгНаКонец.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ДолгНаКонец.Сотрудник КАК Сотрудник,
	|	ДолгНаКонец.Валюта КАК Валюта,
	|	СУММА(ДолгНаКонец.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(ДолгНаКонец.СуммаВалОстаток) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ ДолгНаКонец
	|ИЗ
	|	РегистрНакопления.РасчетыСПерсоналом.Остатки(
	|			,
	|			Организация = &Организация
	|				И Валюта = &Валюта
	|				И ПериодРегистрации < &ПериодРегистрацииКонец
	|				И &СотрудникСотрудник) КАК ДолгНаКонец
	|
	|СГРУППИРОВАТЬ ПО
	|	ДолгНаКонец.Организация,
	|	ДолгНаКонец.СтруктурнаяЕдиница,
	|	ДолгНаКонец.Сотрудник,
	|	ДолгНаКонец.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленияИУдержания.Сотрудник КАК Физлицо,
	|	НачисленияИУдержания.Сотрудник.Код КАК ТабельныйНомер,
	|	НачисленияИУдержания.СтруктурнаяЕдиница КАК Подразделение,
	|	НачисленияИУдержания.СтруктурнаяЕдиница.Наименование КАК ПодразделениеПредставление,
	|	СотрудникиСрезПоследних.Должность КАК Должность,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|			ТОГДА НачисленияИУдержания.ВидНачисленияУдержания
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Начисление,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|			ТОГДА NULL
	|		ИНАЧЕ НачисленияИУдержания.ВидНачисленияУдержания
	|	КОНЕЦ КАК Удержание,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияИУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|				ТОГДА ЕСТЬNULL(НачисленияИУдержания.СуммаВал, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачислено,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияИУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(НачисленияИУдержания.СуммаВал, 0)
	|		КОНЕЦ) КАК СуммаУдержано,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата)
	|				ИЛИ НачисленияИУдержания.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент)
	|			ТОГДА &ПериодРегистрации
	|		ИНАЧЕ НачисленияИУдержания.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата)
	|				ИЛИ НачисленияИУдержания.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент)
	|			ТОГДА КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|		ИНАЧЕ НачисленияИУдержания.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания,
	|	СУММА(НачисленияИУдержания.ОтработаноДней) КАК ОтработаноДней,
	|	СУММА(НачисленияИУдержания.ОтработаноЧасов) КАК ОтработаноЧасов,
	|	ЕСТЬNULL(ДолгНаКонец.СуммаВалОстаток, 0) КАК СальдоНаКонец,
	|	ЕСТЬNULL(ДолгНаНачало.СуммаВалОстаток, 0) КАК СальдоНаНачало,
	|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") <> """"
	|			ТОГДА ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
	|		ИНАЧЕ НачисленияИУдержания.Сотрудник.Наименование
	|	КОНЕЦ КАК СотрудникПредставление
	|ИЗ
	|	РегистрНакопления.НачисленияИУдержания КАК НачисленияИУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолгНаНачало КАК ДолгНаНачало
	|		ПО НачисленияИУдержания.Сотрудник = ДолгНаНачало.Сотрудник
	|			И НачисленияИУдержания.СтруктурнаяЕдиница = ДолгНаНачало.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолгНаКонец КАК ДолгНаКонец
	|		ПО НачисленияИУдержания.Сотрудник = ДолгНаКонец.Сотрудник
	|			И НачисленияИУдержания.СтруктурнаяЕдиница = ДолгНаКонец.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники.СрезПоследних(
	|				&ПериодРегистрацииКонец,
	|				Организация = &Организация
	|					И СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СотрудникиСрезПоследних
	|		ПО НачисленияИУдержания.Сотрудник = СотрудникиСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ПериодРегистрацииКонец, ) КАК ФИОФизЛицСрезПоследних
	|		ПО НачисленияИУдержания.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	|ГДЕ
	|	НачисленияИУдержания.Организация = &Организация
	|	И НачисленияИУдержания.ПериодРегистрации = &ПериодРегистрации
	|	И НачисленияИУдержания.Валюта = &Валюта
	|	И &НачисленияИУдержанияСтруктурнаяЕдиницаПодразделение
	|	И &НачисленияИУдержанияСотрудникСотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияИУдержания.Сотрудник.Код,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата)
	|				ИЛИ НачисленияИУдержания.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент)
	|			ТОГДА &ПериодРегистрации
	|		ИНАЧЕ НачисленияИУдержания.ДатаНачала
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата)
	|				ИЛИ НачисленияИУдержания.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент)
	|			ТОГДА КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|		ИНАЧЕ НачисленияИУдержания.ДатаОкончания
	|	КОНЕЦ,
	|	НачисленияИУдержания.Сотрудник,
	|	НачисленияИУдержания.СтруктурнаяЕдиница,
	|	НачисленияИУдержания.СтруктурнаяЕдиница.Наименование,
	|	СотрудникиСрезПоследних.Должность,
	|	ЕСТЬNULL(ДолгНаКонец.СуммаВалОстаток, 0),
	|	ЕСТЬNULL(ДолгНаНачало.СуммаВалОстаток, 0),
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|			ТОГДА НачисленияИУдержания.ВидНачисленияУдержания
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НачисленияИУдержания.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|			ТОГДА NULL
	|		ИНАЧЕ НачисленияИУдержания.ВидНачисленияУдержания
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") <> """"
	|			ТОГДА ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
	|		ИНАЧЕ НачисленияИУдержания.Сотрудник.Наименование
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодразделениеПредставление,
	|	СотрудникПредставление,
	|	ДатаНачала
	|ИТОГИ
	|	МАКСИМУМ(ПодразделениеПредставление),
	|	МАКСИМУМ(Должность),
	|	СУММА(СуммаНачислено),
	|	СУММА(СуммаУдержано),
	|	МАКСИМУМ(СальдоНаКонец),
	|	МАКСИМУМ(СальдоНаНачало),
	|	МАКСИМУМ(Фамилия),
	|	МАКСИМУМ(Имя),
	|	МАКСИМУМ(Отчество)
	|ПО
	|	Подразделение,
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПредставлениеКасса КАК ПредставлениеДокумента,
	|	ЕСТЬNULL(ПлатежнаяВедомость.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежнаяВедомость.Аванс), ЛОЖЬ) КАК ПризнакАванса,
	|	РасходИзКассы.Номер КАК Номер,
	|	РасходИзКассы.Дата КАК Дата,
	|	РасчетыСПерсоналомОбороты.Регистратор КАК Регистратор,
	|	РасчетыСПерсоналомОбороты.Сотрудник КАК Сотрудник,
	|	РасчетыСПерсоналомОбороты.СуммаВалРасход КАК СуммаВыплаты,
	|	ВЫБОР
	|		КОГДА РасходИзКассы.ДокументОснование ССЫЛКА Документ.ПлатежнаяВедомость
	|			ТОГДА ВЫРАЗИТЬ(РасходИзКассы.ДокументОснование КАК Документ.ПлатежнаяВедомость).Дата
	|		КОГДА РасходИзКассы.ДокументОснование ССЫЛКА Документ.РасходДСПлан
	|			ТОГДА ВЫРАЗИТЬ(РасходИзКассы.ДокументОснование КАК Документ.РасходДСПлан).Дата
	|		ИНАЧЕ &ПериодРегистрации
	|	КОНЕЦ КАК ДокументОснованиеДата
	|ИЗ
	|	РегистрНакопления.РасчетыСПерсоналом.Обороты(
	|			,
	|			,
	|			Запись,
	|			Организация = &Организация
	|				И Валюта = &Валюта
	|				И &СтруктурнаяЕдиницаПодразделение
	|				И &СотрудникСотрудник
	|				И (ПериодРегистрации МЕЖДУ &ПериодРегистрации И &ПериодРегистрацииКонец)) КАК РасчетыСПерсоналомОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходИзКассы КАК РасходИзКассы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежнаяВедомость КАК ПлатежнаяВедомость
	|			ПО РасходИзКассы.ДокументОснование = ПлатежнаяВедомость.Ссылка
	|		ПО РасчетыСПерсоналомОбороты.Регистратор = РасходИзКассы.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ПредставлениеСчет,
	|	ЕСТЬNULL(ПлатежнаяВедомость.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежнаяВедомость.Аванс), ЛОЖЬ),
	|	РасходСоСчета.Номер,
	|	РасходСоСчета.Дата,
	|	РасчетыСПерсоналомОбороты.Регистратор,
	|	РасчетыСПерсоналомОбороты.Сотрудник,
	|	РасчетыСПерсоналомОбороты.СуммаВалРасход,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.ДокументОснование ССЫЛКА Документ.ПлатежнаяВедомость
	|			ТОГДА ВЫРАЗИТЬ(РасходСоСчета.ДокументОснование КАК Документ.ПлатежнаяВедомость).Дата
	|		КОГДА РасходСоСчета.ДокументОснование ССЫЛКА Документ.РасходДСПлан
	|			ТОГДА ВЫРАЗИТЬ(РасходСоСчета.ДокументОснование КАК Документ.РасходДСПлан).Дата
	|		ИНАЧЕ &ПериодРегистрации
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.РасчетыСПерсоналом.Обороты(
	|			,
	|			,
	|			Запись,
	|			Организация = &Организация
	|				И Валюта = &Валюта
	|				И &СтруктурнаяЕдиницаПодразделение
	|				И &СотрудникСотрудник
	|				И (ПериодРегистрации МЕЖДУ &ПериодРегистрации И &ПериодРегистрацииКонец)) КАК РасчетыСПерсоналомОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходСоСчета КАК РасходСоСчета
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежнаяВедомость КАК ПлатежнаяВедомость
	|			ПО РасходСоСчета.ДокументОснование = ПлатежнаяВедомость.Ссылка
	|		ПО РасчетыСПерсоналомОбороты.Регистратор = РасходСоСчета.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснованиеДата,
	|	Дата");
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтруктурнаяЕдиницаПодразделение", "СтруктурнаяЕдиница = &Подразделение");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НачисленияИУдержанияСтруктурнаяЕдиницаПодразделение", "НачисленияИУдержания.СтруктурнаяЕдиница = &Подразделение");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтруктурнаяЕдиницаПодразделение", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НачисленияИУдержанияСтруктурнаяЕдиницаПодразделение", "ИСТИНА");
	КонецЕсли;
	
	Если Сотрудники.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НачисленияИУдержанияСотрудникСотрудник", "НачисленияИУдержания.Сотрудник В (&Сотрудники)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СотрудникСотрудник", "Сотрудник В (&Сотрудники)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НачисленияИУдержанияСотрудникСотрудник", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СотрудникСотрудник", "ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПредставлениеКасса", НСтр("ru = 'Через кассу'") + " ");
	Запрос.УстановитьПараметр("ПредставлениеСчет", НСтр("ru = 'С расч. счета'") + " ");
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ПериодРегистрацииКонец", КонецМесяца(ПериодРегистрации)); 
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПодразделениеЗаполнено", ЗначениеЗаполнено(Подразделение));
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ВидДоговораДоговорЗайма", Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;

КонецФункции // ВыполнитьЗапрос()

Функция ПечатьРасчетногоЛистка(МассивОбъектов, ОбъектыПечати)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НачислениеЗарплатыУНФНачисленияУдержания.Сотрудник КАК Сотрудник,
	               |	НачислениеЗарплатыУНФ.Организация КАК Организация,
	               |	НачислениеЗарплатыУНФ.ПериодРегистрации КАК ПериодРегистрации,
	               |	НачислениеЗарплатыУНФ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |	НачислениеЗарплатыУНФ.ВалютаДокумента КАК ВалютаДокумента
	               |ИЗ
	               |	Документ.НачислениеЗарплатыУНФ.НачисленияУдержания КАК НачислениеЗарплатыУНФНачисленияУдержания
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыУНФ КАК НачислениеЗарплатыУНФ
	               |		ПО НачислениеЗарплатыУНФНачисленияУдержания.Ссылка = НачислениеЗарплатыУНФ.Ссылка
	               |ГДЕ
	               |	НачислениеЗарплатыУНФНачисленияУдержания.Ссылка В(&НачисленияЗарплатыУНФ)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НачислениеЗарплатыУНФНалогиНаДоходы.Сотрудник,
	               |	НачислениеЗарплатыУНФ.Организация,
	               |	НачислениеЗарплатыУНФ.ПериодРегистрации,
	               |	НачислениеЗарплатыУНФ.СтруктурнаяЕдиница,
	               |	НачислениеЗарплатыУНФ.ВалютаДокумента
	               |ИЗ
	               |	Документ.НачислениеЗарплатыУНФ.НалогиНаДоходы КАК НачислениеЗарплатыУНФНалогиНаДоходы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыУНФ КАК НачислениеЗарплатыУНФ
	               |		ПО НачислениеЗарплатыУНФНалогиНаДоходы.Ссылка = НачислениеЗарплатыУНФ.Ссылка
	               |ГДЕ
	               |	НачислениеЗарплатыУНФНалогиНаДоходы.Ссылка В(&НачисленияЗарплатыУНФ)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НачислениеЗарплатыУНФПогашениеЗаймов.Сотрудник,
	               |	НачислениеЗарплатыУНФ.Организация,
	               |	НачислениеЗарплатыУНФ.ПериодРегистрации,
	               |	НачислениеЗарплатыУНФ.СтруктурнаяЕдиница,
	               |	НачислениеЗарплатыУНФ.ВалютаДокумента
	               |ИЗ
	               |	Документ.НачислениеЗарплатыУНФ.ПогашениеЗаймов КАК НачислениеЗарплатыУНФПогашениеЗаймов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыУНФ КАК НачислениеЗарплатыУНФ
	               |		ПО НачислениеЗарплатыУНФПогашениеЗаймов.Ссылка = НачислениеЗарплатыУНФ.Ссылка
	               |ГДЕ
	               |	НачислениеЗарплатыУНФПогашениеЗаймов.Ссылка В(&НачисленияЗарплатыУНФ)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НачислениеЗарплатыУНФВзносы.Сотрудник,
	               |	НачислениеЗарплатыУНФ.Организация,
	               |	НачислениеЗарплатыУНФ.ПериодРегистрации,
	               |	НачислениеЗарплатыУНФ.СтруктурнаяЕдиница,
	               |	НачислениеЗарплатыУНФ.ВалютаДокумента
	               |ИЗ
	               |	Документ.НачислениеЗарплатыУНФ.Взносы КАК НачислениеЗарплатыУНФВзносы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыУНФ КАК НачислениеЗарплатыУНФ
	               |		ПО НачислениеЗарплатыУНФВзносы.Ссылка = НачислениеЗарплатыУНФ.Ссылка
	               |ГДЕ
	               |	НачислениеЗарплатыУНФВзносы.Ссылка В(&НачисленияЗарплатыУНФ)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НачислениеЗарплатыУНФПримененныеВычетыПоНДФЛ.Сотрудник,
	               |	НачислениеЗарплатыУНФ.Организация,
	               |	НачислениеЗарплатыУНФ.ПериодРегистрации,
	               |	НачислениеЗарплатыУНФ.СтруктурнаяЕдиница,
	               |	НачислениеЗарплатыУНФ.ВалютаДокумента
	               |ИЗ
	               |	Документ.НачислениеЗарплатыУНФ.ПримененныеВычетыПоНДФЛ КАК НачислениеЗарплатыУНФПримененныеВычетыПоНДФЛ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыУНФ КАК НачислениеЗарплатыУНФ
	               |		ПО НачислениеЗарплатыУНФПримененныеВычетыПоНДФЛ.Ссылка = НачислениеЗарплатыУНФ.Ссылка
	               |ГДЕ
	               |	НачислениеЗарплатыУНФПримененныеВычетыПоНДФЛ.Ссылка В(&НачисленияЗарплатыУНФ)";
	
	Запрос.УстановитьПараметр("НачисленияЗарплатыУНФ", МассивОбъектов);
	
	Компания = Неопределено;
	Если Константы.УчетПоКомпании.Получить() Тогда
		Компания = Справочники.Организации.ОрганизацияКомпания();
	КонецЕсли;	
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ПериодРегистрации") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ВалютаДокумента") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("СтруктурнаяЕдиница") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
					СписокСотрудников = Новый Массив;
					Пока Выборка.Следующий() Цикл
						СписокСотрудников.Добавить(Выборка.Сотрудник);
					КонецЦикла;
					
					Организация = ?(ЗначениеЗаполнено(Компания), Компания, Выборка.Организация);
					РасчетныйЛист = СформироватьОтчет(Организация, Выборка.СтруктурнаяЕдиница, Выборка.ПериодРегистрации, Выборка.ВалютаДокумента, СписокСотрудников);
					
					Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					ДокументРезультат.Вывести(РасчетныйЛист);
					
				КонецЦикла;
			КонецЦикла;			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ТекстПериод(ДатаНачала, ДатаОкончания)
	
	Возврат СтрШаблон("%1-%2 %3",
						День(ДатаНачала),
						День(ДатаОкончания),
						Формат(ДатаОкончания, НСтр("ru = 'ДФ=''МММ гг'''")))	
КонецФункции

#КонецОбласти

#КонецЕсли
